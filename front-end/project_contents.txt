Листинг А.1 – файл App.js

import Router from "./routes";
import ThemeProvider from './theme';
import ThemeSettings from './components/settings';
import 'react-toastify/dist/ReactToastify.css';
import {Bounce, ToastContainer} from "react-toastify";

// trying purpose only
import { CssBaseline } from "@mui/material"
import {useDispatch, useSelector} from "react-redux";
import {useEffect} from "react";
import {connectWithSocketServer} from "./utils/wss";

function App() {
    const { token } = useSelector(store => store.auth)

    const dispatch = useDispatch();

    useEffect(()=>{
        connectWithSocketServer(token);
    }, [])

    return (
        <ThemeProvider>
            <ThemeSettings>
                {/*<Button onClick={()=> dispatch(createEvent())}>Trying Event</Button>*/}
                <CssBaseline />
                <Router/>
                <ToastContainer
                    position={"top-center"}
                    autoClose={4000}
                    transition={Bounce}
                    hideProgressBar={false}
                    newestOnTop={false}
                    closeOnClick
                    rtl={false}
                    pauseOnFocusLoss={false}
                    draggable
                    pauseOnHover={false}
                />
            </ThemeSettings>
        </ThemeProvider>
    );
}

export default App;


Листинг А.2 – файл config.js

// @mui
import { enUS, frFR, zhCN, viVN, arSD, ruRU } from '@mui/material/locale';

// routes
import { PATH_DASHBOARD } from "./routes/paths";

export const BASE_BACKEND_URL = process.env.REACT_APP_BASE_BACKEND_URL;
export const BASE_API_URL = process.env.REACT_APP_BASE_API_URL;

export const defaultSettings = {
  themeMode: "light",
  themeDirection: "ltr",
  themeContrast: "default",
  themeLayout: "horizontal",
  themeColorPresets: "default",
  themeStretch: false,
};

export const NAVBAR = {
  BASE_WIDTH: 260,
  DASHBOARD_WIDTH: 280,
  DASHBOARD_COLLAPSE_WIDTH: 88,
  //
  DASHBOARD_ITEM_ROOT_HEIGHT: 48,
  DASHBOARD_ITEM_SUB_HEIGHT: 40,
  DASHBOARD_ITEM_HORIZONTAL_HEIGHT: 32,
};

export const allLangs = [
  {
    label: 'English',
    value: 'en',
    systemValue: enUS,
    icon: '/assets/icons/flags/ic_flag_en.svg',
  },
  {
    label: 'French',
    value: 'fr',
    systemValue: frFR,
    icon: '/assets/icons/flags/ic_flag_fr.svg',
  },
  {
    label: 'Vietnamese',
    value: 'vn',
    systemValue: viVN,
    icon: '/assets/icons/flags/ic_flag_vn.svg',
  },
  {
    label: 'Chinese',
    value: 'cn',
    systemValue: zhCN,
    icon: '/assets/icons/flags/ic_flag_cn.svg',
  },
  {
    label: 'Arabic (Sudan)',
    value: 'ar',
    systemValue: arSD,
    icon: '/assets/icons/flags/ic_flag_sa.svg',
  },
  {
    label: 'Russian',
    value: 'ru',
    systemValue: ruRU,
    icon: '/assets/icons/flags/ic_flag_su.svg',
  },
];

export const defaultLang = allLangs[0]; // English



// DEFAULT ROOT PATH
export const DEFAULT_PATH = PATH_DASHBOARD.general.app; // as '/app'


Листинг А.3 – файл index.js

import React from "react";
import ReactDOM from "react-dom/client";
import {BrowserRouter} from 'react-router-dom';
import {HelmetProvider} from "react-helmet-async";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import {persistor, store} from "./redux/store";
import {Provider as ReduxProvider} from "react-redux"


// contexts
import SettingsProvider from "./contexts/SettingsContext";
import {PersistGate} from "redux-persist/integration/react";

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(
    // <React.StrictMode>
        <HelmetProvider>
            <ReduxProvider store={store}>
                {/*<PersistGate persistor={persistor} loading={null}>*/}
                    <SettingsProvider>
                        <BrowserRouter>
                            <App/>
                        </BrowserRouter>
                    </SettingsProvider>
                {/*</PersistGate>*/}
            </ReduxProvider>
        </HelmetProvider>
    // {/*</React.StrictMode>*/}
)
;

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


Листинг А.4 – файл reportWebVitals.js

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


Листинг А.5 – файл socket.js

import io from "socket.io-client"; // Add this

let socket;

const connectSocket = (token) => {
    socket = io("http://localhost:5000", {
        query: { token }
    });
}

export {socket, connectSocket};


Листинг А.6 – файл NoChat.js

import { memo } from "react";
// @mui
import { useTheme } from "@mui/material/styles";
import { Box } from "@mui/material";

// ----------------------------------------------------------------------

function NoChat({ ...other }) {
  const theme = useTheme();

  const PRIMARY_MAIN = theme.palette.primary.main;

  return (
    <Box {...other}>
      <svg
        width="360"
        height="360"
        viewBox="0 0 750 750"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M356.607 560.305C264.098 540.058 140.839 499.879 161.094 362.018C181.349 224.156 268.175 171 375.595 171C483.01 171 605.051 252.041 581.094 419.925C557.136 587.809 449.117 580.551 356.607 560.305ZM660.68 394.122C664.5 355.761 660.441 317.805 649.538 282.225L680.646 265.561C685.889 262.754 687.861 256.229 685.058 250.987L642.588 171.698C639.776 166.456 633.251 164.484 628.007 167.291L596.9 183.954C573.318 155.169 543.97 130.76 509.927 112.683L520.131 78.919C521.855 73.2271 518.637 67.2188 512.942 65.4981L426.844 39.4636C421.15 37.7428 415.146 40.9614 413.422 46.6533L403.218 80.4177C364.851 76.5987 336.9 90.6574 301.318 101.554L284.654 70.4455C281.847 65.2038 275.322 63.2311 270.081 66.0385L190.792 108.511C185.55 111.318 183.577 117.843 186.385 123.084L203.048 154.193C174.263 177.775 139.853 197.122 121.777 231.172L88.0118 220.962C82.3209 219.242 76.3116 222.46 74.5909 228.151L48.5573 314.25C46.8366 319.942 50.0552 325.95 55.7461 327.672L89.5114 337.881C85.6924 376.241 89.7511 414.197 100.647 449.777L69.5393 466.442C64.2975 469.249 62.3248 475.774 65.1322 481.016L107.605 560.305C110.412 565.546 116.937 567.519 122.178 564.711L153.287 548.047C176.868 576.834 206.216 601.243 240.265 619.319L230.056 653.084C228.335 658.775 231.554 664.784 237.245 666.505L323.345 692.535C329.031 694.259 335.043 691.04 336.768 685.346L346.972 651.585C385.33 655.404 423.29 651.345 458.871 640.448L475.53 671.557C478.342 676.798 484.868 678.767 490.111 675.963L569.4 633.491C574.635 630.684 576.616 624.159 573.804 618.918L557.136 587.809C585.927 564.227 610.332 534.879 628.414 500.83L662.174 511.04C667.869 512.76 673.881 509.543 675.597 503.851L701.629 417.752C703.353 412.061 700.134 406.052 694.44 404.331L660.68 394.122Z"
          fill={PRIMARY_MAIN}
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M494.093 200.551L491.095 200.449L491.01 203.113C490.868 207.906 490.933 213.034 491.005 218.624C491.055 222.52 491.107 226.641 491.095 231.031L490.597 239.698C490.61 247.773 490.667 259.013 490.767 273.417L491.093 314.421C488.889 315.152 487.233 317.054 486.901 319.369C485.083 319.646 483.687 321.19 483.687 323.047C483.687 324.362 484.387 325.518 485.441 326.181L484.158 329.281C483.589 330.659 482.649 331.836 481.44 332.687C476.141 336.414 473.021 342.451 473.095 348.836C473.097 349.006 473.101 349.175 473.108 349.344C473.131 349.956 473.655 350.427 474.281 350.411C474.906 350.388 475.394 349.873 475.371 349.261C475.365 349.112 475.361 348.962 475.359 348.811C475.294 343.149 479.061 337.795 483.76 334.489C485.317 333.393 486.527 331.881 487.257 330.114L487.641 326.77H489.251C489.251 326.77 489.81 329.78 489.81 332.133C489.81 334.487 489.251 339.148 489.251 339.148H487.395C485.27 339.148 483.541 340.842 483.541 342.924C483.541 345.005 485.27 346.699 487.395 346.699H487.661C489.786 346.699 490.515 345.612 490.515 342.924C490.515 341.517 490.671 340.51 492.967 340.51C495.264 340.51 494.672 342.924 494.672 342.924C494.672 345.005 496.401 346.699 498.527 346.699H498.792C500.918 346.699 502.647 345.005 502.647 342.924C502.647 340.842 499.062 339.081 496.937 339.081C496.937 339.081 496.371 334.845 496.371 332.687C496.371 330.868 496.937 327.148 496.937 327.148H494.672C494.672 327.148 495.145 330.62 495.145 332.738C495.145 334.857 494.672 339.081 494.672 339.081C494.672 339.081 493.424 339.306 492.828 339.319C492.233 339.332 491.515 339.148 491.515 339.148C491.515 339.148 491.019 334.817 491.019 332.738C491.019 330.66 491.515 326.77 491.515 326.77H494.672H496.937H498.547L499.93 330.114C500.625 331.793 502.705 333.268 504.291 334.392L504.492 334.534C509.086 337.797 510.829 343.059 510.829 348.609C510.829 353.298 508.952 357.692 505.542 360.983C502.134 364.274 497.62 367.049 492.828 366.98C489.029 366.926 485.145 364.832 482.108 362.563C479.168 360.366 475.359 354.357 474.725 352.969C474.091 351.582 473.793 353.771 473.978 354.357C475.198 358.225 477.694 361.718 481.006 364.193C484.431 366.752 488.508 368.137 492.795 368.198C498.199 368.274 503.288 366.274 507.132 362.563C510.976 358.852 513.094 353.896 513.094 348.609C513.094 342.35 510.001 336.417 504.821 332.738C503.559 331.842 502.594 330.647 502.029 329.281L500.747 326.181C501.8 325.519 502.5 324.362 502.5 323.047C502.5 321.19 501.104 319.646 499.286 319.369C498.912 316.759 496.854 314.673 494.226 314.2L494.081 314.2L492.344 276.07C492.24 261.556 493.598 232.546 493.598 232.546C493.622 221.39 493.759 211.61 494.009 203.205L494.093 200.551ZM498.527 344.481C497.65 344.481 496.937 343.782 496.937 342.924V340.51C496.937 340.51 500.382 341.2 500.382 342.924C500.382 344.505 499.782 344.496 499.006 344.483H499.004C498.935 344.482 498.864 344.481 498.792 344.481H498.527ZM484.939 342.924C485.085 345.092 489.584 346.038 489.251 342.924V340.51C489.251 340.51 484.792 340.755 484.939 342.924ZM489.21 319.324C489.626 317.602 491.21 316.316 493.094 316.316C494.978 316.316 496.561 317.602 496.977 319.324H489.21ZM498.7 321.543H498.216H487.972H487.488C486.641 321.543 485.952 322.218 485.952 323.047C485.952 323.877 486.641 324.551 487.488 324.551H498.7C499.547 324.551 500.236 323.877 500.236 323.047C500.236 322.218 499.547 321.543 498.7 321.543ZM518.104 331.2H520.083C520.641 331.2 521.094 330.752 521.094 330.2C521.094 329.648 520.641 329.2 520.083 329.2H518.104C517.546 329.2 517.094 329.648 517.094 330.2C517.094 330.752 517.546 331.2 518.104 331.2ZM516.532 338.279L518.436 339.081C518.973 339.307 519.234 339.947 519.018 340.51C518.803 341.073 518.193 341.347 517.656 341.121L515.751 340.319C515.215 340.093 514.954 339.453 515.169 338.89C515.333 338.461 515.726 338.2 516.142 338.2C516.272 338.2 516.404 338.225 516.532 338.279ZM514.832 321.972L516.616 320.54C517.119 320.137 517.245 319.337 516.897 318.753C516.682 318.393 516.336 318.2 515.985 318.2C515.767 318.2 515.548 318.274 515.355 318.428L513.571 319.86C513.068 320.264 512.943 321.064 513.291 321.647C513.639 322.23 514.329 322.375 514.832 321.972ZM467.083 331.2H465.104C464.546 331.2 464.094 330.752 464.094 330.2C464.094 329.648 464.546 329.2 465.104 329.2H467.083C467.641 329.2 468.094 329.648 468.094 330.2C468.094 330.752 467.641 331.2 467.083 331.2ZM468.656 338.279L466.752 339.081C466.215 339.307 465.954 339.947 466.169 340.51C466.385 341.073 466.995 341.347 467.532 341.121L469.436 340.319C469.973 340.093 470.234 339.453 470.018 338.89C469.854 338.461 469.461 338.2 469.046 338.2C468.916 338.2 468.784 338.225 468.656 338.279ZM470.356 321.972L468.571 320.54C468.068 320.137 467.943 319.337 468.291 318.754C468.506 318.393 468.851 318.2 469.203 318.2C469.42 318.2 469.64 318.274 469.832 318.428L471.616 319.86C472.119 320.263 472.245 321.063 471.897 321.647C471.549 322.23 470.859 322.375 470.356 321.972Z"
          fill="#FFB61D"
        />
        <path
          d="M346.364 479.782C357.394 482.685 363.054 489.594 367.834 496.029C372.624 502.463 362.094 499.402 356.284 497.079C350.474 494.757 336.484 486.168 336.484 486.168L290.104 472.14V450.688L303.974 449.878C303.974 449.878 335.324 476.878 346.364 479.782Z"
          fill="white"
        />
        <path
          d="M298.305 322.67C308.225 360.214 313.345 396.137 314.155 430.598C314.155 430.598 323.445 431.759 322.285 439.888C321.125 448.017 296.735 470.08 296.735 470.08L288.285 442.071L285.125 338.859L298.305 322.67Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M301.69 341.885L295.994 338.106C295.63 337.865 295.15 338.053 295.019 338.487L293.033 345.084C292.867 345.634 293.361 346.148 293.874 345.961L301.556 343.142C302.08 342.95 302.16 342.196 301.69 341.885ZM301 342.975L294 345L296.084 339L301 342.975Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M299.19 389.385L293.494 385.606C293.13 385.365 292.65 385.553 292.519 385.987L290.533 392.584C290.367 393.134 290.861 393.648 291.374 393.461L299.056 390.642C299.58 390.45 299.66 389.696 299.19 389.385ZM298.5 390.475L291.5 392.5L293.584 386.5L298.5 390.475Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M296.195 416.071L296.619 409.249C296.646 408.813 296.244 408.491 295.802 408.595L289.095 410.173C288.537 410.305 288.338 410.99 288.757 411.34L295.04 416.584C295.468 416.941 296.16 416.634 296.195 416.071ZM294.906 416.019L289.652 410.969L295.89 409.773L294.906 416.019Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M306.991 411.038L300.169 410.614C299.733 410.587 299.411 410.989 299.515 411.431L301.094 418.137C301.225 418.696 301.91 418.894 302.26 418.476L307.504 412.193C307.862 411.765 307.554 411.073 306.991 411.038ZM306.939 412.327L301.889 417.58L300.694 411.342L306.939 412.327Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M301.724 445.815L295.604 448.859C295.213 449.053 295.136 449.563 295.447 449.893L300.167 454.912C300.56 455.33 301.253 455.16 301.346 454.622L302.746 446.559C302.842 446.01 302.23 445.564 301.724 445.815ZM302.324 446.958L300.578 454.032L296.423 449.228L302.324 446.958Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M304.724 426.815L298.604 429.859C298.213 430.053 298.136 430.563 298.447 430.893L303.167 435.912C303.56 436.33 304.253 436.16 304.346 435.622L305.746 427.559C305.842 427.01 305.23 426.564 304.724 426.815ZM305.324 427.958L303.578 435.032L299.423 430.228L305.324 427.958Z"
          fill="#FFB61D"
        />
        <path
          d="M265.047 345.246L258.318 365.563C242.935 412.092 235.36 435.709 235.133 437.923C234.991 439.298 235.825 440.327 237.112 440.676C237.885 440.886 238.83 440.875 240.004 440.701C241.831 440.43 244.273 439.745 247.222 438.726C249.501 437.939 251.965 436.994 254.46 435.972L255.51 435.539C255.851 435.397 256.182 435.258 256.503 435.121L258.171 434.403L258.646 434.193L258.923 433.752C259.415 432.97 260.115 431.586 260.806 429.688C261.413 428.021 261.897 426.236 262.215 424.349L262.326 423.637C262.425 422.944 263.376 421.341 265.337 418.604L266.704 416.733C267.825 415.222 269.982 412.335 270.199 412.043L271.467 410.325C272.679 408.673 273.737 407.197 274.771 405.709C279.956 398.244 283.62 391.709 285.782 385.421C287.616 380.087 288.259 375.145 287.533 370.601C286.421 363.666 286.847 357.039 288.47 350.819C289.818 345.652 285.553 340.884 279.404 339.132C273.05 337.321 266.997 339.372 265.047 345.246Z"
          fill="white"
        />
        <path
          d="M276.311 315.203C280.059 319.181 283.204 322.214 285.745 324.303C290.026 327.822 296.164 331.594 304.157 335.618C279.707 341.28 264.777 342.399 259.368 338.976C259.368 338.976 261.621 328.374 264.858 323.832C267.269 320.45 276.311 315.203 276.311 315.203Z"
          fill="white"
        />
        <path
          d="M315.204 264.092C310.124 283.386 296.244 303.529 281.464 299.639C266.684 295.748 258.504 269.377 263.584 250.083C268.664 230.789 284.764 218.302 299.544 222.192C314.324 226.082 320.284 244.799 315.204 264.092Z"
          fill="white"
        />
        <path
          d="M318.585 270.245C312.836 292.325 297.128 315.377 280.402 310.925C263.675 306.472 254.418 276.293 260.167 254.213C265.916 232.133 284.136 217.843 300.863 222.294C317.589 226.746 324.334 248.166 318.585 270.245Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M291.892 224.834C303.29 225.481 311.608 229.226 316.271 235.824L316.797 236.587C319.103 239.915 321.042 242.01 321.89 248.309L321.972 248.979C322.456 253.123 322.598 257.495 322.349 258.946C322.215 259.559 321.952 259.773 321.62 259.708C320.867 259.56 318.916 256.094 315.768 249.308L313.126 252.4C311.688 254.061 308.639 255.627 306.832 256.803C305.025 257.98 291.892 224.834 291.892 224.834Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M303.399 287.511C309.746 290.158 314.567 293.596 315.846 292.166C317.124 290.736 312.764 286.382 309.377 280.468C305.831 274.588 302.463 267.18 301.833 264.166L300.221 256.549C295.505 262.5 291.089 282.468 303.399 287.511Z"
          fill="white"
        />
        <path
          d="M377.188 651.122L376.844 672.303H364.796L361.188 648L377.188 651.122Z"
          fill="white"
        />
        <path
          d="M245.24 538.488C245.24 538.488 323.413 536.762 347.987 533.217C375.267 529.282 390.185 519.983 396.118 521.082C398.898 521.597 415.307 524.505 449.546 528.147C464.027 529.687 501.616 529.923 501.616 529.923L516.205 498.872C516.205 498.872 413.541 478.26 381.082 487.181C370.872 489.987 348.763 494.037 322.476 492.558C299.745 491.279 237.923 479.272 237.923 479.272C237.923 479.272 212.962 488.232 217.48 510.267C221.998 532.301 245.24 538.488 245.24 538.488Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M507.84 512.157L512.646 498.242C512.646 498.242 410.155 479.125 377.696 488.046C367.487 490.852 358.26 495.479 331.973 494C321.91 493.434 304.704 491.079 280.356 486.934C268.039 484.838 266.061 485.614 275.741 491.944C298.189 506.624 348.123 503.164 393.428 496.549C477.63 484.255 507.84 512.157 507.84 512.157Z"
          fill="#E7EAEE"
        />
        <path
          d="M363.587 655.932C358.487 661.567 351.727 670.847 355.207 680.137L415.597 698.717C415.597 698.717 417.917 691.747 414.437 685.947C410.947 680.137 377.999 657.215 377.999 657.215L363.587 655.932Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M391.462 668.517C391.862 668.408 392.273 668.645 392.382 669.044C392.49 669.444 392.254 669.856 391.854 669.964C389.887 670.497 388.591 671.74 388.136 673.314C387.546 675.348 387.482 677.429 388.15 680.76C388.232 681.166 387.969 681.561 387.563 681.643C387.157 681.724 386.761 681.461 386.68 681.055C385.965 677.493 386.037 675.168 386.695 672.896C387.298 670.813 388.996 669.185 391.462 668.517Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M358.207 681.137L417.619 698.618C417.619 698.618 425.164 697.032 417.362 695.923C409.346 694.784 362.413 673.293 357.251 677.207C356.517 677.764 357.753 679.923 358.207 681.137Z"
          fill="#E7EAEE"
        />
        <path
          d="M210.171 534.056C210.171 534.056 236.979 542.518 258.567 545.69C280.155 548.862 323.216 550.667 323.216 550.667C323.216 550.667 336.66 557.975 337.527 561.359C337.865 562.677 339.902 580.097 345.535 602.349C348.184 612.816 362.342 660.152 362.342 660.152L381.082 651.856C381.082 651.856 380.33 564.854 368.367 535.998C356.405 507.142 233.442 479.115 233.442 479.115C233.442 479.115 207.345 474.394 200.241 495.736C193.136 517.078 210.171 534.056 210.171 534.056Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M365.342 657.152L384.082 648.856C383.58 590.855 379.342 552.235 371.367 532.998C371.367 532.998 379.517 635.409 365.342 657.152Z"
          fill="#E7EAEE"
        />
        <path
          d="M528.755 513.299C533.418 519.3 541.383 527.569 551.137 525.755L579.921 469.509C579.921 469.509 572.514 466.233 566.198 468.653C559.871 471.081 532.047 500.116 532.047 500.116L528.755 513.299Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M403.73 678.504C404.029 678.218 404.504 678.228 404.791 678.527C405.077 678.826 405.067 679.301 404.768 679.587C403.025 681.257 402.702 684.055 403.702 685.744C403.913 686.1 403.795 686.56 403.438 686.771C403.082 686.982 402.622 686.864 402.411 686.508C401.063 684.23 401.475 680.665 403.73 678.504Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M397.604 673.559C397.906 673.275 398.38 673.29 398.664 673.592C398.947 673.893 398.933 674.368 398.631 674.652L398.225 675.042C395.071 678.145 394.167 680.859 396.944 683.77C397.23 684.07 397.219 684.545 396.919 684.83C396.619 685.116 396.144 685.105 395.859 684.805C393.806 682.654 393.385 680.33 394.294 678.004C394.921 676.4 396.012 675.054 397.604 673.559Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M368.737 672.576C370.459 675.867 379.599 674.516 378.008 665.414C377.256 661.108 363.969 663.461 368.737 672.576Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M545.43 526.801C557.509 512.998 564.451 481.956 574.398 471.274C577.909 467.504 582.463 466.658 577.561 475.584C568.592 491.915 551.354 526.801 551.354 526.801C550.442 527.258 549.314 526.801 548.294 526.801H545.43Z"
          fill="#E7EAEE"
        />
        <path
          d="M346.364 479.782C357.394 482.685 363.054 489.594 367.834 496.029C372.624 502.463 362.094 499.402 356.284 497.079C350.474 494.757 339.36 485.943 339.36 485.943L346.364 479.782Z"
          fill="white"
        />
        <path
          d="M245.894 453.654C245.894 453.654 307.984 480.327 316.734 480.362C325.474 480.398 346.924 490.813 348.084 498.942C349.494 508.831 312.084 494.297 312.084 494.297C312.084 494.297 228.474 494.297 214.544 480.362C200.605 466.427 209.894 437.396 209.894 437.396L245.894 453.654Z"
          fill="white"
        />
        <path
          d="M230.794 329.401C230.794 329.401 245.894 338.69 248.214 368.883C250.534 399.075 241.244 435.074 241.244 435.074C241.244 435.074 247.054 439.719 248.214 444.364C249.374 449.009 245.844 455.14 245.844 455.14C245.844 455.14 211.056 472.234 208.733 473.395C206.411 474.556 197.121 471.072 197.121 461.782C197.121 452.493 200.605 444.364 200.605 444.364C202.272 383.079 192.476 323.594 230.794 329.401Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M292.304 265.155C295.875 260.372 303.425 258.815 305.439 266.365C305.439 266.365 306.987 270.921 303.867 273.736C294.31 282.36 288.732 269.938 292.304 265.155Z"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M312.249 270.343C315.642 265.799 322.814 264.32 324.728 271.493C324.728 271.493 326.199 275.821 323.235 278.496C314.155 286.688 308.856 274.887 312.249 270.343Z"
          fill="white"
        />
        <path
          d="M284.464 328.504C284.464 328.504 284.464 384.324 285.284 415.517C286.104 446.71 278.954 477.444 265.294 501.479C251.634 525.515 253.493 559.898 243.424 562.454C163.779 582.669 185.222 335.282 214.691 319.474C244.16 303.665 253.894 300.317 253.894 300.317"
          fill="white"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M243.617 344.165L236.754 354.413C236.184 355.263 236.614 356.421 237.6 356.694L246.759 359.226C247.824 359.52 248.83 358.602 248.635 357.515L246.34 344.735C246.102 343.407 244.368 343.044 243.617 344.165ZM245.109 345.742L247.159 357.78L239.194 354.413L245.109 345.742Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M221.534 334.156L213.445 347.139C212.929 347.969 213.33 349.063 214.261 349.361L228.384 353.889C229.56 354.266 230.662 353.139 230.26 351.971L224.225 334.46C223.814 333.266 222.202 333.084 221.534 334.156ZM223.452 335.738L227.584 351.971L215.339 347.139L223.452 335.738Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M216.551 432.386L222.053 453.063C222.391 454.333 224.084 454.585 224.777 453.468L232.957 440.278C233.411 439.546 233.158 438.584 232.403 438.171L218.72 430.684C217.563 430.051 216.212 431.111 216.551 432.386ZM218 433L230.683 439.487L223.502 452.677L218 433Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M205.532 508.311L208.532 522.484C208.808 523.785 210.513 524.111 211.249 523.004L219.354 510.81C219.952 509.91 219.431 508.692 218.368 508.503L207.263 506.523C206.216 506.337 205.312 507.27 205.532 508.311ZM208.15 508.087L217.774 511.498L209.47 520.98L208.15 508.087Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M231.532 505.311L234.532 519.484C234.808 520.785 236.513 521.111 237.249 520.004L245.354 507.81C245.952 506.91 245.431 505.692 244.368 505.503L233.263 503.523C232.216 503.337 231.312 504.27 231.532 505.311ZM232.921 506.543L244.125 506.234L234.905 518.081L232.921 506.543Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M217.532 476.311L220.532 490.484C220.808 491.785 222.513 492.111 223.249 491.004L231.354 478.81C231.952 477.91 231.431 476.692 230.368 476.503L219.263 474.523C218.216 474.337 217.312 475.27 217.532 476.311ZM219 476L229.105 478.979L221 489.174L219 476Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M549.59 522.175C548.836 523.647 547.6 524.262 545.951 524.354C540.079 524.68 535.424 522.09 531.271 518.315C529.696 516.884 528.3 515.257 526.723 513.83C525.613 512.827 524.423 512.173 522.691 512.794C521.365 513.27 519.808 513.09 518.358 513.238C515.087 513.572 511.825 514.008 508.548 514.246C506.459 514.398 506.407 516.18 505.917 517.41C504.808 520.191 503.979 523.087 503.097 525.955C502.755 527.069 502.21 527.509 500.959 527.493C494.713 527.417 488.465 527.423 482.218 527.474C479.373 527.497 476.526 527.838 473.686 527.773C468.342 527.653 462.991 527.481 457.664 527.072C452.51 526.676 447.383 525.933 442.24 525.384C438.628 524.999 434.993 524.795 431.396 524.307C427.213 523.739 423.065 522.911 418.891 522.27C416.802 521.949 414.679 521.854 412.588 521.547C409.003 521.019 405.418 520.47 401.855 519.807C398.55 519.191 395.44 519.83 392.329 520.857C386.271 522.857 380.198 524.81 374.122 526.754C373.042 527.099 372.722 527.383 373.21 528.695C375 533.511 376.676 538.38 378.133 543.306C379.161 546.782 379.873 550.363 380.532 553.933C381.341 558.308 382.017 562.71 382.62 567.118C383.08 570.486 383.372 573.879 383.675 577.266C384.059 581.571 384.422 585.879 384.712 590.191C385.001 594.485 385.243 598.784 385.406 603.085C385.683 610.389 385.89 617.694 386.11 625C386.243 629.423 386.326 633.848 386.471 638.271C386.514 639.555 386.926 640.872 386.73 642.105C386.583 643.034 385.922 644.335 385.164 644.627C383.212 645.38 382.648 646.832 382.665 648.832C382.687 651.387 383.007 653.944 382.941 656.493C382.898 658.117 383.52 659.251 384.701 660.112C390.068 664.027 395.488 667.869 400.852 671.788C403.398 673.648 405.909 675.562 408.35 677.558C410.963 679.695 413.524 681.902 416.016 684.18C418.499 686.451 419.819 689.227 420.238 692.689C420.563 695.373 420.218 697.867 419.771 700.421C419.538 701.751 418.778 702.295 417.395 701.844C411.585 699.948 405.786 698.016 399.948 696.21C390.305 693.225 380.635 690.327 370.975 687.394C367.532 686.349 364.089 685.306 360.642 684.274C358.53 683.642 358.084 681.748 357.692 680.033C356.578 675.159 358.017 670.722 360.588 666.635C362.162 664.133 363.996 661.795 365.716 659.386C367.121 657.418 366.758 655.403 366.063 653.274C363.798 646.344 361.572 639.399 359.431 632.43C357.318 625.55 355.224 618.661 353.31 611.724C351.286 604.392 349.45 597.008 347.6 589.629C346.599 585.637 345.655 581.626 344.844 577.591C344.238 574.574 343.895 571.505 343.419 568.461C342.85 564.826 342.508 561.128 341.572 557.588C341.169 556.065 339.69 554.671 338.401 553.567C335.594 551.163 332.369 549.372 328.866 548.148C328 547.845 327.062 547.637 326.149 547.602C321.803 547.438 317.452 547.395 313.106 547.22C308.861 547.049 304.617 546.813 300.379 546.528C296.007 546.234 291.638 545.881 287.274 545.489C282.603 545.069 277.915 544.736 273.278 544.067C268.362 543.357 263.491 542.325 258.612 541.37C257.026 541.06 255.867 542.023 255.621 544.26C255.083 549.151 253.421 553.696 251.447 558.147C250.023 561.356 247.337 562.961 244.024 563.508C241.659 563.899 239.236 564.272 236.857 564.182C230.085 563.926 224.046 561.692 218.675 557.398C211.862 551.95 207.876 544.672 204.482 536.913C202.961 533.436 201.003 530.118 199.809 526.539C198.513 522.651 197.857 518.549 196.954 514.533C196.251 511.407 195.535 508.282 194.944 505.135C194.476 502.646 194.182 500.124 193.827 497.614C193.355 494.28 192.89 490.945 192.441 487.608C192.293 486.504 192.146 485.394 192.1 484.283C191.955 480.805 191.883 477.324 191.736 473.847C191.529 468.969 191.143 464.095 191.078 459.216C190.968 450.872 190.979 442.525 191.079 434.18C191.123 430.516 191.433 426.848 191.763 423.195C192.137 419.042 192.704 414.907 193.118 410.757C193.413 407.795 193.506 404.812 193.845 401.855C194.344 397.518 194.89 393.182 195.584 388.872C196.409 383.747 197.352 378.638 198.35 373.543C200.237 363.9 202.433 354.316 206.027 345.155C208.318 339.318 210.708 333.363 215.383 328.957C217.406 327.05 220.218 325.951 222.732 324.597C229.633 320.882 236.571 317.233 243.474 313.522C243.797 313.349 244.074 312.845 244.127 312.461C244.31 311.13 244.229 309.745 244.555 308.459C244.768 307.621 245.356 306.702 246.051 306.196C248.38 304.497 250.819 302.948 253.248 301.391C253.683 301.112 254.298 300.868 254.776 300.945C257.336 301.358 258.621 299.783 259.499 297.844C260.687 295.219 261.772 292.533 262.694 289.804C264.221 285.283 265.761 280.751 266.916 276.129C267.315 274.534 266.702 272.632 266.342 270.915C265.609 267.419 265.001 263.859 263.822 260.509C263.067 258.367 261.541 256.424 260.083 254.617C256.312 249.943 254.332 244.709 254.966 238.712C255.241 236.108 256.358 233.681 258.306 231.789C260.598 229.562 262.948 227.395 265.248 225.176C266.924 223.558 266.804 222.321 264.621 220.739C261.566 218.526 258.637 216.134 255.715 213.745C253.219 211.704 252.145 208.788 251.484 205.799C250.585 201.733 250.477 197.63 252.135 193.661C254.788 187.313 258.61 182.075 265.607 180.1C271.774 178.359 277.927 178.477 283.461 181.973C288.49 185.149 291.684 189.88 293.089 195.72C294.738 202.573 292.861 208.74 289.398 214.606C289.108 215.097 289.078 215.742 288.928 216.316C289.443 216.413 289.955 216.574 290.473 216.598C297.134 216.901 303.755 217.641 309.721 220.816C317.551 224.983 322.477 231.588 324.649 240.185C324.974 241.472 324.971 242.855 325.014 244.197C325.159 248.774 325.171 253.357 325.441 257.925C325.498 258.879 326.228 260.05 327.008 260.66C330.752 263.593 332.025 270.773 328.544 275.023C328.195 275.449 327.899 275.916 327.557 276.347C326.219 278.031 324.279 278.848 322.348 278.504C320.702 278.211 320.563 278.765 320.02 279.98C318.861 282.571 317.471 285.078 315.974 287.494C313.966 290.733 311.917 293.967 309.596 296.981C308.194 298.801 306.301 300.266 304.525 301.769C302.372 303.592 300.095 305.269 297.903 307.047C296.809 307.934 295.61 308.392 294.213 308.19C292.764 307.981 291.948 308.796 291.524 309.97C290.705 312.236 289.964 314.536 289.317 316.857C289.181 317.346 289.47 318.059 289.766 318.546C292.351 322.801 294.919 327.069 297.62 331.251C299.812 334.644 302.305 337.848 304.426 341.282C305.738 343.407 306.607 345.805 307.67 348.082C309.523 352.056 311.417 356.012 313.188 360.022C313.552 360.847 313.652 361.904 313.525 362.805C313.339 364.116 312.046 364.534 310.645 363.688C309.016 362.705 307.483 361.555 305.958 360.411C305.014 359.703 304.165 358.868 303.267 358.097C303.163 358.007 303.024 357.959 302.902 357.892C302.882 358.048 302.827 358.21 302.849 358.361C303.1 360.125 303.301 361.898 303.638 363.646C303.987 365.451 304.517 367.22 304.884 369.022C305.612 372.602 306.316 376.187 306.967 379.781C307.7 383.823 308.405 387.871 309.042 391.929C309.369 394.015 309.481 396.134 309.763 398.229C310.189 401.395 310.724 404.548 311.123 407.718C311.341 409.449 311.389 411.203 311.485 412.949C311.616 415.329 311.703 417.711 311.839 420.09C312.176 425.96 312.516 431.83 312.887 437.698C312.979 439.152 313.833 440.271 315.143 440.687C318.87 441.871 321.474 446.221 320.847 449.853C320.702 450.697 320.514 451.57 320.143 452.331C319.251 454.158 320.414 455.195 321.57 456.145C323.447 457.687 325.403 459.136 327.364 460.573C332.018 463.985 336.705 467.352 341.359 470.763C345.576 473.853 350.228 476.001 355.22 477.524C359.228 478.747 362.637 481.065 365.842 483.736C367.416 485.048 368.778 486.99 371.271 486.511C374.799 485.833 378.317 485.098 381.836 484.372C382.897 484.153 383.939 483.833 385.005 483.65C388.717 483.011 390.91 480.384 393.095 477.666C394.721 475.644 396.534 473.773 398.226 471.803C401.555 467.926 404.847 464.019 408.174 460.141C409.827 458.213 411.53 456.327 413.2 454.414C417.906 449.021 422.585 443.604 427.321 438.237C429.804 435.424 432.39 432.702 434.916 429.927C435.596 429.18 436.323 428.451 436.861 427.607C437.679 426.323 438.513 425.929 440.111 426.447C443.604 427.577 443.541 427.362 441.099 430.041C436.725 434.84 432.496 439.771 428.189 444.631C426.083 447.007 423.907 449.321 421.819 451.712C418.154 455.907 414.544 460.15 410.887 464.352C408.291 467.335 405.663 470.289 403.035 473.244C401.002 475.53 398.941 477.791 396.914 480.083C396.737 480.283 396.598 480.838 396.661 480.877C397.156 481.188 397.714 481.647 398.235 481.626C402.48 481.461 406.72 481.136 410.965 480.991C414.143 480.883 417.33 480.882 420.508 480.992C424.58 481.132 428.658 481.308 432.712 481.697C437.23 482.13 441.722 482.826 446.227 483.396C450.845 483.982 455.479 484.464 460.08 485.158C464.679 485.852 469.241 486.787 473.83 487.55C477.631 488.182 481.459 488.652 485.254 489.312C490.094 490.155 494.911 491.135 499.743 492.022C503.137 492.646 506.544 493.189 509.937 493.813C513.209 494.414 516.463 495.112 519.739 495.693C521.803 496.059 523.885 496.429 525.971 496.515C526.845 496.551 527.959 496.076 528.608 495.459C533.569 490.739 538.378 485.858 543.362 481.162C548.939 475.906 554.772 470.945 561.06 466.534C563.938 464.516 567.16 464.868 570.295 465.14C572.122 465.298 573.889 466.179 575.679 466.748C577.147 467.214 577.278 468.121 576.625 469.403C573.658 475.226 570.744 481.076 567.775 486.899C565.21 491.931 562.597 496.94 559.919 502.046C556.419 508.814 553.01 515.497 549.59 522.175ZM275.005 479.232C276.565 474.722 277.934 470.136 279.164 465.523C279.963 462.527 280.417 459.433 280.93 456.367C281.458 453.217 281.899 450.051 282.325 446.885C282.821 443.208 283.591 439.529 283.651 435.841C283.771 428.436 283.465 421.024 283.383 413.615C283.333 409.087 283.307 404.556 283.396 400.03C283.465 396.469 281.393 393.814 279.883 390.894C278.878 388.95 277.817 386.988 277.175 384.912C275.997 381.105 275.039 377.223 274.127 373.341C273.502 370.686 273.043 367.987 272.632 365.289C272.157 362.167 271.131 359.235 269.798 356.402C269.686 356.164 268.75 355.991 268.649 356.125C268.112 356.844 267.712 357.667 267.278 358.461C266.506 359.875 265.333 361.221 265.065 362.727C264.529 365.735 263.143 368.317 261.726 370.898C260.844 372.505 259.358 372.547 258.326 371.072C257.217 369.487 256.019 367.888 255.311 366.114C253.647 361.945 252.157 357.699 250.771 353.428C248.95 347.815 247.233 342.166 245.598 336.495C244.744 333.535 243.894 330.528 243.535 327.484C243.184 324.5 243.462 321.441 243.453 318.416C243.452 318.145 243.369 317.875 243.325 317.604C243.202 317.701 243.09 317.816 242.955 317.89C239.784 319.635 236.632 321.417 233.431 323.104C230.256 324.777 227.065 326.429 223.816 327.952C220.256 329.621 216.683 331.343 214.621 334.84C212.39 338.623 209.783 342.228 208.439 346.493C207.053 350.889 205.486 355.235 204.28 359.679C203.046 364.224 202.207 368.876 201.095 373.456C200.385 376.382 199.215 379.221 198.749 382.177C198.038 386.686 197.599 391.254 197.344 395.815C197.126 399.729 197.142 403.652 196.614 407.551C196.204 410.578 195.925 413.623 195.556 416.656C194.993 421.274 193.983 425.882 193.91 430.506C193.75 440.743 194.172 450.988 194.124 461.229C194.099 466.596 194.9 471.843 195.532 477.133C196.234 483.006 196.649 488.913 197.319 494.79C197.774 498.785 198.23 502.802 199.082 506.723C200.469 513.106 201.959 519.484 203.811 525.745C206.122 533.556 209.514 540.915 214.291 547.589C217.276 551.76 220.921 555.176 225.419 557.631C231.518 560.96 238.059 560.672 244.612 559.656C245.686 559.489 247.077 558.663 247.537 557.747C248.827 555.181 249.954 552.475 250.688 549.704C251.732 545.765 252.193 541.674 253.217 537.729C254.905 531.225 257.028 524.831 258.619 518.305C259.929 512.929 262.426 508.079 264.595 503.081C266.192 499.404 268.08 495.852 270.011 492.071C271.689 487.796 273.506 483.569 275.005 479.232ZM332.573 545.629C335.729 547.558 338.823 549.604 341.825 551.763C343.7 553.112 345.047 555.071 345.458 557.337C346.41 562.583 347.041 567.887 347.961 573.139C348.607 576.826 349.535 580.462 350.302 584.128C350.927 587.112 351.505 590.107 352.097 593.097C352.68 596.037 353.247 598.979 353.836 601.916C354.286 604.155 354.75 606.391 355.224 608.625C355.99 612.238 356.599 615.894 357.589 619.445C358.564 622.942 360.03 626.3 361.1 629.775C362.88 635.557 365.09 641.155 367.649 646.635C368.256 647.934 369.277 647.673 369.882 647.436C373.711 645.937 377.488 644.3 381.241 642.615C382.425 642.084 383.055 641.054 383 639.646C382.852 635.822 382.749 631.996 382.644 628.171C382.519 623.595 382.412 619.018 382.295 614.441C382.18 609.96 382.155 605.475 381.922 601C381.694 596.628 381.265 592.267 380.904 587.903C380.453 582.467 380.034 577.027 379.5 571.598C379.132 567.85 378.794 564.079 378.085 560.387C376.858 553.995 375.35 547.656 373.966 541.293C372.352 533.878 369.236 527.417 363.073 522.564C358.38 518.868 353.457 515.568 348.134 512.931C342.245 510.014 336.29 507.174 330.178 504.776C323.19 502.036 316.403 498.573 308.709 497.942C305.013 497.639 301.347 496.991 297.656 496.598C294.696 496.284 291.711 496.194 288.752 495.87C284.068 495.357 279.403 494.676 274.715 494.216C274.058 494.152 273.068 494.769 272.665 495.364C271.738 496.73 271.041 498.26 270.317 499.755C268.058 504.426 265.412 508.964 263.693 513.828C261.422 520.255 259.881 526.939 258.039 533.517C256.996 537.244 256.973 537.41 260.223 538.091C263.982 538.88 267.801 539.403 271.61 539.927C274.101 540.27 276.626 540.365 279.126 540.652C283.864 541.196 288.59 541.847 293.331 542.359C296.348 542.684 299.381 542.881 302.411 543.06C306.94 543.329 311.47 543.581 316.004 543.746C318.718 543.845 321.439 543.764 324.504 543.764C327.351 543.712 330.132 544.137 332.573 545.629ZM468.603 523.985C471.524 524.122 474.445 524.265 477.367 524.327C484.142 524.471 490.918 524.585 497.695 524.668C499.047 524.684 500.266 524.124 500.63 522.731C502.594 515.236 506.454 508.286 506.95 500.357C507.076 498.346 506.204 496.925 504.151 496.566C502.01 496.191 499.895 495.666 497.759 495.258C495.073 494.746 492.375 494.297 489.685 493.803C487.27 493.359 484.858 492.898 482.447 492.432C480.682 492.091 478.925 491.715 477.159 491.381C473.778 490.742 470.394 490.116 467.01 489.496C464.696 489.072 462.384 488.638 460.062 488.265C458.261 487.976 456.443 487.794 454.638 487.531C450.824 486.974 447.013 486.397 443.201 485.826C441.023 485.5 438.851 485.142 436.669 484.848C433.759 484.455 430.841 483.791 427.929 483.808C420.622 483.849 413.315 484.17 406.011 484.455C402.518 484.592 399.018 484.786 395.547 485.178C393.604 485.397 391.735 486.012 390.326 487.649C388.03 490.316 385.565 492.837 383.245 495.484C381.781 497.156 380.41 498.914 379.071 500.689C377.3 503.038 375.14 504.465 372.052 504.226C366.995 503.835 361.93 503.547 356.872 503.159C354.995 503.015 353.127 502.735 351.261 502.474C348.095 502.031 344.94 501.517 341.771 501.102C338.741 500.706 335.701 500.377 332.661 500.064C331.802 499.976 330.926 500.025 330.061 500.073C329.889 500.083 329.732 500.377 329.569 500.54C329.745 500.622 329.925 500.696 330.098 500.786C331.619 501.58 333.101 502.465 334.667 503.157C339.261 505.186 343.999 506.92 348.477 509.172C354.98 512.443 361.048 516.436 366.565 521.237C368.276 522.726 369.918 523.831 372.724 523.458C377.171 522.866 381.327 521.769 385.318 519.828C390.689 517.214 396.153 515.071 402.329 516.351C405.903 517.092 409.495 517.741 413.064 518.506C415.324 518.991 417.529 519.79 419.807 520.128C422.633 520.547 425.508 520.621 428.36 520.87C433.548 521.322 438.733 521.801 443.92 522.251C447.442 522.557 450.967 522.833 454.664 523.295C459.31 523.526 463.956 523.768 468.603 523.985ZM287.871 423.757C287.922 425.143 287.867 426.532 287.89 427.919C287.998 434.404 288.1 440.889 288.245 447.373C288.287 449.255 288.204 451.195 288.635 453C289.508 456.653 290.653 460.244 291.768 463.835C292.245 465.373 292.91 466.838 294.648 467.447C296.16 467.976 297.625 468.642 299.141 469.163C301.389 469.935 302.079 469.643 303.545 467.585C304.03 466.905 304.59 466.276 305.135 465.64C308.648 461.543 312.268 457.532 315.651 453.331C318.149 450.23 317.716 445.24 313.534 443.639C313.084 443.467 312.638 443.26 312.171 443.163C309.7 442.651 309.814 442.658 309.732 440.323C309.439 431.98 310.418 423.614 309.107 415.281C308.584 411.954 308.799 408.513 308.318 405.176C307.569 399.984 306.533 394.832 305.582 389.67C304.683 384.788 303.782 379.905 302.797 375.039C302.061 371.408 301.178 367.808 300.386 364.188C299.782 361.427 299.308 358.634 298.579 355.908C298.382 355.171 297.467 354.626 296.882 353.993C296.197 354.654 294.998 355.257 294.915 355.986C294.495 359.685 293.925 363.455 294.25 367.125C294.623 371.341 295.256 375.521 294.451 379.706C293.534 384.476 292.008 389.056 289.424 393.229C287.991 395.542 286.921 397.942 287.165 400.804C287.406 403.636 287.484 406.487 287.525 409.33C287.582 413.376 287.539 417.424 287.539 421.818C287.655 422.464 287.847 423.107 287.871 423.757ZM269.672 280.451C269.38 280.903 268.975 281.318 268.814 281.813C267.166 286.857 265.66 291.951 263.898 296.954C262.837 299.969 261.171 302.659 258.417 304.553C256.416 305.929 254.549 307.5 252.591 308.941C251.626 309.651 251.83 310.267 252.432 311.13C254.234 313.711 256.138 316.251 257.642 319.004C259.718 322.803 261.496 326.767 263.343 330.688C265.143 334.508 267.023 338.302 268.581 342.221C269.906 345.55 270.618 349.126 271.981 352.436C273.212 355.429 274.534 358.379 274.98 361.584C275.132 362.674 275.485 362.683 276.311 362.68C281.274 362.663 286.067 362.007 290.252 359.052C290.61 358.799 290.912 358.28 290.98 357.844C291.145 356.79 291.116 355.707 291.24 354.645C291.327 353.895 291.816 353.085 291.641 352.431C290.989 350.002 290.121 347.631 289.363 345.23C287.914 340.642 286.014 336.103 285.884 331.263C285.752 326.338 286.195 321.391 286.533 316.464C286.67 314.454 287.064 312.437 287.573 310.483C288.169 308.192 288.027 307.565 285.959 306.447C282.555 304.607 279.621 302.134 277.524 298.944C274.1 293.737 271.47 288.134 270.532 281.657C270.245 281.255 269.959 280.853 269.672 280.451ZM319.045 278.915C319.139 278.727 319.981 278.143 318.729 277.932C317.464 277.719 316.035 277.105 315.166 276.199C313.462 274.422 312.052 272.352 310.62 270.333C310.215 269.761 310.071 269.414 309.501 270.1C309.14 270.535 308.67 270.88 308.309 271.315C305.178 275.097 300.675 276.703 296.459 275.652C291.404 274.392 288.323 269.003 288.254 264.328C288.226 262.464 287.637 260.902 286.148 259.83C283.671 258.046 281.122 256.358 278.576 254.672C277.15 253.728 275.792 254.036 275.424 255.525C274.513 259.21 273.379 262.904 273.061 266.656C272.668 271.297 272.855 275.984 273.963 280.616C275.83 288.419 278.254 295.834 284.622 301.333C288.728 304.879 293.799 305.676 298.688 303.531C303.533 301.404 306.509 297.471 309.405 293.377C311.839 289.936 314.265 286.489 316.868 282.872C317.604 281.558 318.367 280.258 319.045 278.915ZM528.856 510.675C532.222 514.959 536.137 518.535 541.495 520.264C544.804 521.333 546.016 521.144 547.847 517.653C551.584 510.532 555.276 503.387 558.958 496.238C560.428 493.382 561.788 490.469 563.261 487.615C566.138 482.04 569.053 476.484 571.97 470.928C572.502 469.915 571.996 468.997 571.212 468.892C568.491 468.529 565.618 467.752 563.091 469.433C559.758 471.649 556.404 473.879 553.338 476.438C548.688 480.32 544.209 484.415 539.798 488.569C537.798 490.454 536.108 492.675 534.33 494.787C532.925 496.456 531.122 497.861 530.587 500.141C530.093 502.25 529.605 504.36 529.115 506.816C528.538 508.074 527.893 509.449 528.856 510.675ZM414.223 696.875C415.016 696.938 416.544 696.578 416.552 696.364C416.654 693.378 417.219 690.213 414.539 687.882C411.056 684.851 407.681 681.681 404.048 678.841C398.187 674.259 392.155 669.895 386.191 665.444C384.06 663.853 381.941 662.165 379.229 661.75C376.801 661.379 374.326 661.33 371.89 661.005C369.835 660.73 368.437 661.621 367.189 663.1C364.163 666.687 361.962 670.675 361.13 675.333C360.477 678.984 361.652 680.995 364.599 681.862C370.21 683.514 375.781 685.302 381.381 686.991C385.394 688.201 389.444 689.292 393.449 690.528C399.289 692.331 405.104 694.217 411.277 696.067C412.258 696.353 413.226 696.797 414.223 696.875ZM296.39 471.941C292.515 470.407 288.663 468.815 284.779 467.305C283.632 466.859 282.655 466.727 282.276 468.494C281.866 470.413 280.99 472.23 280.357 474.104C278.952 478.264 277.541 482.422 276.211 486.606C275.965 487.379 275.591 488.464 277.119 488.612C279.108 488.804 281.086 489.136 283.079 489.281C286.97 489.564 290.864 489.842 294.762 489.97C300.553 490.161 306.347 490.23 312.141 490.332C313.991 490.364 315.842 490.331 317.693 490.341C318.143 490.343 318.62 490.311 319.038 490.442C324.054 492.009 329.052 493.634 334.073 495.186C339.123 496.747 344.181 498.281 349.576 497.98C351.449 497.875 351.793 497.524 351.104 495.8C350.728 494.86 350.206 493.902 349.514 493.177C346.135 489.635 342.009 487.163 337.595 485.13C334.079 483.511 330.641 481.704 326.686 481.297C324.834 481.107 322.969 480.84 321.171 480.375C318.314 479.635 315.481 478.779 312.687 477.827C309.196 476.638 305.754 475.303 301.944 474.031C300.091 473.336 298.229 472.669 296.39 471.941ZM252.814 318.788C251.19 316.271 249.481 313.81 247.802 311.328C247.569 310.982 247.314 310.651 247.069 310.314C246.907 310.882 246.679 311.441 246.595 312.021C246.317 313.936 246.161 315.872 245.832 317.777C245.181 321.55 244.826 325.257 247.272 328.61C247.426 328.822 247.548 329.077 247.618 329.331C248.517 332.599 249.4 335.872 250.297 339.141C250.524 339.969 250.761 340.795 251.033 341.609C252.202 345.11 253.62 348.549 254.501 352.12C255.406 355.789 256.1 359.476 257.98 362.827C258.52 363.789 258.695 364.952 259.094 366.001C259.213 366.315 259.605 366.819 259.729 366.78C260.127 366.656 260.65 366.393 260.784 366.051C262.336 362.064 263.084 357.71 266.029 354.362C268.531 351.519 268.012 348.613 266.477 345.577C265.878 344.391 265.507 343.091 264.971 341.87C263.814 339.229 262.706 336.561 261.411 333.987C260.279 331.739 258.909 329.612 257.663 327.421C256.787 325.88 255.944 324.32 254.913 322.595C254.218 321.323 253.598 320.003 252.814 318.788ZM346.566 478.01C341.497 474.736 336.358 471.555 331.446 468.056C327.333 465.127 323.522 461.777 319.525 458.681C318.446 457.846 317.208 457.568 316.106 458.828C314.32 460.868 312.5 462.879 310.717 464.922C309.389 466.444 308.113 468.011 306.783 469.531C305.743 470.719 305.852 471.356 307.374 471.811C312.265 473.273 317.191 474.619 322.067 476.128C328.723 478.189 335.372 480.282 341.968 482.525C344.078 483.243 345.938 484.693 348.046 485.42C350.187 486.16 352.475 486.545 354.731 486.859C357.336 487.223 359.975 487.368 362.603 487.531C363.023 487.557 363.467 487.182 363.899 486.993C363.643 486.637 363.448 486.205 363.12 485.936C358.953 482.526 353.976 480.765 348.801 478.888C348.052 478.602 347.225 478.436 346.566 478.01ZM280.566 386.63C281.21 389.074 282.741 390.263 285.099 390.485C287.135 390.676 287.733 389.559 288.229 388.072C288.94 385.941 289.644 383.808 290.311 381.663C291.793 376.9 291.581 372.1 290.694 367.258C290.405 365.679 290.473 364.033 290.4 362.417C290.39 362.183 290.509 361.942 290.569 361.704C290.331 361.774 290.084 361.822 289.856 361.916C288.427 362.507 287.051 363.326 285.565 363.66C282.782 364.285 279.944 364.699 277.112 365.061C276.018 365.2 275.37 365.315 275.717 366.653C276.045 367.917 276.176 369.231 276.437 370.514C276.999 373.278 277.589 376.037 278.168 379.145C278.978 381.637 279.899 384.1 280.566 386.63ZM310.227 360.532C310.497 360.761 310.797 360.954 311.083 361.163C311.081 360.776 311.188 360.347 311.06 360.007C310.308 358.009 309.607 355.981 308.69 354.058C306.732 349.953 304.933 345.732 302.544 341.885C300.195 338.103 297.032 334.834 294.536 331.131C292.749 328.479 291.484 325.475 289.957 322.644C289.723 322.208 289.335 321.855 289.018 321.464C288.872 321.924 288.591 322.387 288.602 322.842C288.675 325.8 288.714 328.764 288.962 331.709C289.131 333.718 289.47 335.742 290.01 337.682C290.609 339.836 291.696 341.858 292.256 344.019C292.912 346.548 294.113 348.148 296.562 349.499C300.623 351.739 304.814 354.067 307.671 358.329C308.522 359.065 309.369 359.805 310.227 360.532ZM292.148 262.501C290.816 264.441 293.287 271.24 294.631 271.746C304.037 275.286 306.718 269.228 306.842 267.565C307.087 264.263 307.494 260.916 304.373 258.24C296.141 256.602 294.302 259.364 292.148 262.501ZM328.165 265.249C326.901 262.1 324.988 260.046 321.656 260.764C319.956 261.131 318.459 262.479 316.895 263.425C313.536 265.456 313.097 266.568 314.271 270.17C315.446 273.775 318.187 275.84 321.675 276.541C324.561 277.121 326.624 275.331 328.149 272.637C328.533 270.177 329.166 267.742 328.165 265.249ZM315.709 261.177C317.065 260.213 318.535 258.785 319.998 258.732C322.529 258.641 322.118 257.095 321.845 255.878C321.082 252.477 320.085 249.125 319.112 245.775C318.446 243.481 317.883 243.349 316.267 244.965C313.499 247.732 310.695 250.446 307.218 252.357C306.131 252.955 305.981 254.331 306.759 255.416C307.048 255.819 307.441 256.166 307.658 256.602C308.727 258.752 309.697 260.953 310.838 263.063C311.091 263.529 310.899 265.179 312.53 263.964C313.583 263.026 314.566 261.99 315.709 261.177ZM519.962 510.053C522.323 509.613 524.853 509.008 525.218 505.867C525.279 505.339 525.52 504.835 525.64 504.312C526.385 501.064 525.541 500.024 522.29 499.675C519.229 499.347 516.19 498.799 513.148 498.308C511.521 498.045 511.221 498.35 511.041 500.006C510.792 502.3 510.435 504.588 510.006 506.857C509.63 508.844 510.186 510.417 511.934 510.806C514.613 510.574 517.33 510.542 519.962 510.053ZM378.225 657.853C378.555 657.838 379.117 657.183 379.129 656.809C379.211 654.327 379.151 651.842 379.179 649.358C379.195 647.962 378.125 647.916 377.358 648.161C375.687 648.693 374.097 649.487 372.484 650.196C371.319 650.709 370.009 651.124 370.15 652.805C370.25 653.991 370.25 655.205 370.523 656.353C370.977 658.258 372.622 657.352 373.965 657.731C375.386 657.789 376.81 657.916 378.225 657.853ZM285.778 456.038C285.678 455.756 285.268 455.583 285 455.36C284.805 455.639 284.466 455.904 284.439 456.198C284.276 457.982 284.137 459.771 284.082 461.561C284.028 463.31 285.267 464.444 287.045 464.282C287.347 464.255 287.881 463.724 287.842 463.511C287.58 462.09 287.192 460.692 286.672 459.113C286.382 458.085 286.133 457.043 285.778 456.038ZM383.569 488.813C383.761 488.432 384.166 487.369 382.989 487.59C381.193 487.927 379.428 488.436 377.662 488.918C377.339 489.006 377.075 489.308 376.784 489.512C377.122 489.671 377.455 489.956 377.798 489.968C379.237 490.02 380.68 489.99 382.295 489.816C382.737 489.491 383.348 489.25 383.569 488.813ZM249.533 306.81C249.256 306.971 248.979 307.132 248.703 307.293C248.92 307.535 249.099 307.872 249.37 307.985C249.533 308.053 249.889 307.82 250.076 307.639C251.144 306.604 252.193 305.549 253.236 304.488C253.444 304.275 253.596 304.007 253.774 303.764C253.423 303.833 252.982 303.79 252.737 303.989C251.695 304.833 250.711 305.748 249.533 306.81Z"
          fill="#00160A"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M286.726 286.601C285.1 285.721 283.491 285 283.153 283.041C282.497 279.235 283.868 274.75 288.829 275.011C293.302 275.246 296.14 278.961 294.558 283.156C293.391 286.25 290.559 287.784 286.726 286.601Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M308.784 272.401C308.873 271.817 308.962 271.409 309.051 271C309.192 271.356 309.373 271.702 309.467 272.07C310.165 274.801 312.376 281.599 309.742 284.727C309.523 284.988 308.412 285.029 307.72 284.985C306.36 284.899 304.774 282.893 305.027 281.599C305.065 281.405 308.347 284.591 309.051 282.866C310.226 279.991 308.784 273.389 308.784 272.401Z"
          fill="#00160A"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M290.268 292.322C290.131 292.253 289.942 292.271 289.778 292.278C289.374 292.295 288.821 291.571 289.056 291.264C289.411 290.803 289.813 290.338 290.294 290.034C290.58 289.853 291.053 290.439 291.017 290.699C290.991 290.892 291.175 291.196 291.353 291.327C294.071 293.323 297.088 294.617 300.389 295.239C300.607 295.28 300.797 295.475 301 295.598C300.798 295.739 300.596 296.012 300.393 296C296.791 295.789 292.627 293.519 290.268 292.322Z"
          fill="#00160A"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M202.521 448.658L199.1 463.268C198.836 464.398 199.899 465.387 201.007 465.042L212.883 461.345C213.882 461.034 214.263 459.821 213.622 458.994L205.168 448.081C204.394 447.083 202.809 447.429 202.521 448.658ZM203.982 451L211.437 459.913L200.561 463.61L203.982 451Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M213.134 364.365C211.884 364.252 211.057 365.634 211.747 366.683L220.447 379.909C221.033 380.801 222.337 380.812 222.939 379.931L230.946 368.204C231.592 367.258 230.982 365.966 229.842 365.864L213.134 364.365ZM214.311 365.864L229.269 368.771L220.447 378.005L214.311 365.864Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M268.271 465.5H256C254.983 465.5 254.261 466.491 254.572 467.459L258.694 480.271C259.083 481.481 260.706 481.689 261.388 480.617L269.537 467.805C270.172 466.806 269.455 465.5 268.271 465.5ZM267.271 468L261.122 479.812L257 467L267.271 468Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M228.063 534.924L227.502 546.032C227.443 547.196 228.677 547.979 229.705 547.431L243.973 539.831C245.181 539.187 244.966 537.393 243.639 537.054L229.933 533.547C229.014 533.312 228.111 533.977 228.063 534.924ZM229.147 535.985L242.259 537.805L229.705 545.226L229.147 535.985Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M209.146 398.507L198.146 406.131C197.215 406.777 197.307 408.181 198.315 408.699L211.188 415.307C212.264 415.86 213.518 414.976 213.36 413.777L211.487 399.544C211.341 398.431 210.068 397.867 209.146 398.507ZM209.587 401.156L211.873 413.973L199 407.364L209.587 401.156Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M259.618 431.165L252.754 441.413C252.163 442.296 252.651 443.496 253.69 443.716L261.715 445.413C262.707 445.623 263.617 444.809 263.519 443.8L262.357 431.855C262.221 430.453 260.401 429.995 259.618 431.165ZM261.487 433.219V444.193L254.586 441.413L261.487 433.219Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M260.918 382.886C262.915 381.583 264.667 381.892 263.241 384.76C263.241 384.76 252.83 411.156 249.72 411.469C246.77 411.765 245.346 407.95 241.227 397.043L241.052 396.579C241.036 396.538 241.023 396.496 241.011 396.456L240.989 396.368L240.962 396.32L240.905 396.187L240.413 394.855C239.831 393.267 238.366 390.646 237.592 389.735C236.767 388.765 238.608 388.164 239.968 388.164C242.506 388.164 245.612 388.873 250.496 387.463C256.217 385.812 258.18 384.673 260.918 382.886ZM256.49 396.447L256.353 396.536C254.9 397.43 253.295 398.118 251.541 398.597C249.443 399.171 246.399 399.242 244.429 398.812L244.1 398.735L244.222 399.038C245.333 401.808 246.321 405.011 247.182 406.64L247.483 407.195C248.023 408.165 248.497 408.869 248.88 409.293L249 409.418L249.149 409.238C249.791 408.417 252.077 405.329 253.664 402.244L253.83 401.92C254.51 400.587 255.251 399.072 256.054 397.376L256.49 396.447ZM260.775 385.936L260.534 386.073C258.275 387.331 254.539 389.419 251.328 390.345C247.485 391.455 244.226 391.851 241.545 391.496L241.381 391.471L241.475 391.737C241.731 392.453 242.817 395.846 243.201 396.368C244.757 397.805 246.664 397.942 249 397.376L249.335 397.29C257.698 395.674 260.775 385.936 260.775 385.936Z"
          fill="#FFB61D"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M554.479 478.216C554.812 477.97 555.282 478.041 555.528 478.374C557.259 480.722 560.19 480.838 564.087 478.674C564.449 478.473 564.906 478.604 565.107 478.966C565.308 479.328 565.178 479.784 564.815 479.985C560.332 482.475 556.578 482.327 554.32 479.264C554.074 478.931 554.145 478.461 554.479 478.216Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M548.809 484.224C549.116 483.945 549.59 483.968 549.869 484.274C552.495 487.163 555.985 487.328 558.823 485.812C559.189 485.617 559.643 485.755 559.838 486.12C560.033 486.486 559.895 486.94 559.53 487.135C556.14 488.946 551.907 488.746 548.759 485.283C548.48 484.977 548.503 484.503 548.809 484.224Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M542.668 490.175C542.969 489.891 543.444 489.905 543.728 490.207C546.259 492.896 551.405 494.21 554.925 492.345C555.291 492.151 555.745 492.29 555.939 492.656C556.133 493.022 555.993 493.476 555.627 493.67C551.459 495.879 545.598 494.382 542.636 491.235C542.352 490.933 542.366 490.459 542.668 490.175Z"
          fill="#E7EAEE"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M547.435 513.696C552.7 511.149 547.257 501.709 542.162 505.53C538.894 507.98 542.477 516.095 547.435 513.696Z"
          fill="#E7EAEE"
        />
      </svg>
    </Box>
  );
}

export default memo(NoChat);


Листинг А.7 – файл landingRight_bg.png

Could not read file ./src\assets\Images\landingRight_bg.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte


Листинг А.8 – файл login_left_img.png

Could not read file ./src\assets\Images\login_left_img.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte


Листинг А.9 – файл logo.ico

Could not read file ./src\assets\Images\logo.ico. Error: 'utf-8' codec can't decode byte 0x9e in position 34: invalid start byte


Листинг А.10 – файл logo512.png

Could not read file ./src\assets\Images\logo512.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte


Листинг А.11 – файл register_img.png

Could not read file ./src\assets\Images\register_img.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte


Листинг А.12 – файл AntSwitch.js

import { Switch } from "@mui/material";
import { styled } from "@mui/material/styles";

const AntSwitch = styled(Switch)(({ theme }) => ({
  width: 40,
  height: 20,
  padding: 0,
  display: "flex",
  "&:active": {
    "& .MuiSwitch-thumb": {
      width: 15,
    },
    "& .MuiSwitch-switchBase.Mui-checked": {
      transform: "translateX(9px)",
    },
  },
  "& .MuiSwitch-switchBase": {
    padding: 2,
    "&.Mui-checked": {
      transform: "translateX(20px)",
      color: "#fff",
      "& + .MuiSwitch-track": {
        opacity: 1,
        backgroundColor: theme.palette.primary.main,
      },
    },
  },
  "& .MuiSwitch-thumb": {
    boxShadow: "0 2px 4px 0 rgb(0 35 11 / 20%)",
    width: 16,
    height: 16,
    borderRadius: 8,
    transition: theme.transitions.create(["width"], {
      duration: 200,
    }),
  },
  "& .MuiSwitch-track": {
    borderRadius: 20 / 2,
    opacity: 1,
    backgroundColor:
      theme.palette.mode === "dark"
        ? "rgba(255,255,255,.35)"
        : "rgba(0,0,0,.25)",
    boxSizing: "border-box",
  },
}));

export default AntSwitch;


Листинг А.13 – файл CallLogElement.js

import React from 'react';
import AvatarWithOnline from "./ChatElements/AvatarWithOnline";
import {Box, IconButton, Stack, Typography} from "@mui/material";
import NameAndMessage from "./ChatElements/NameAndMessage";
import {faker} from "@faker-js/faker";
import {ArrowUpRight, Phone, VideoCamera} from "phosphor-react";
import {useTheme} from "@mui/material/styles";

const CallLogElement = ({ incoming, videoCall, time, isBordered, isDialogLog}) => {
  const theme = useTheme();

  return (
    <Box
      sx={{
        position: "relative",
        height: '100%',
        width: '100%',
        borderRadius: 1,
        backgroundColor: theme.palette.mode === 'light'
          ? '#fff'
          : theme.palette.background.paper,
      }}

    >
        <Stack
          p={1}
          direction={"row"}
          alignItems={"center"}
          justifyContent={"space-between"}
          sx={{ mb: 2, border: isBordered ? "1px solid rgba(0, 0, 0, 0.05)" : "", borderRadius: 1,}}
        >
          <Stack direction={"row"} alignItems={"center"} spacing={2}>
            <AvatarWithOnline online={false}/>
            <Stack alignItems={""}>
              <Typography variant="subtitle2">
                {faker.person.fullName()}
              </Typography>
              <Typography variant="caption" sx={{display: "inline-block"}}>
                {incoming ? <ArrowUpRight color={"green"}/> : <ArrowUpRight color={"red"}/>}{"   "}
                Yesterday, {time}
              </Typography>
            </Stack>
          </Stack>
          {
            isDialogLog ?
              <Stack direction={"row"} spacing={1.25}>
                <IconButton>
                  <Phone color={"green"}/>
                </IconButton>
                <IconButton>
                  <VideoCamera color={"green"} />
                </IconButton>
              </Stack>
              :
              <IconButton>
                {videoCall ? <VideoCamera color={"green"} /> : <Phone color={"green"}/> }
              </IconButton>
          }

        </Stack>
    </Box>
  );
};

export default CallLogElement;


Листинг А.14 – файл ChatElement.js

import React from "react";
import { Box, Badge, Stack, Avatar, Typography } from "@mui/material";
import { styled, useTheme, alpha } from "@mui/material/styles";
import { useSearchParams } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { SelectConversation } from "../redux/slices/appSlice";

const truncateText = (string, n) => {
  return string?.length > n ? `${string?.slice(0, n)}...` : string;
};

const StyledChatBox = styled(Box)(({ theme }) => ({
  "&:hover": {
    cursor: "pointer",
  },
}));

const StyledBadge = styled(Badge)(({ theme }) => ({
  "& .MuiBadge-badge": {
    backgroundColor: "#44b700",
    color: "#44b700",
    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
    "&::after": {
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      borderRadius: "50%",
      animation: "ripple 1.2s infinite ease-in-out",
      border: "1px solid currentColor",
      content: '""',
    },
  },
  "@keyframes ripple": {
    "0%": {
      transform: "scale(.8)",
      opacity: 1,
    },
    "100%": {
      transform: "scale(2.4)",
      opacity: 0,
    },
  },
}));

const ChatElement = ({ img, name, msg, time, unread, online, id }) => {
  const dispatch = useDispatch();
  const {room_id} = useSelector((state) => state.app);
  const selectedChatId = room_id?.toString();

  let isSelected = +selectedChatId === id;

  if (!selectedChatId) {
    isSelected = false;
  }

  const theme = useTheme();

  return (
    <StyledChatBox
      onClick={() => {
        dispatch(SelectConversation({room_id: id}));
      }}
      sx={{
        width: "100%",

        borderRadius: 1,

        backgroundColor: isSelected
          ? theme.palette.mode === "light"
            ? alpha(theme.palette.primary.main, 0.5)
            : theme.palette.primary.main
          : theme.palette.mode === "light"
            ? "#fff"
            : theme.palette.background.paper,
      }}
      p={2}
    >
      <Stack
        direction="row"
        alignItems={"center"}
        justifyContent="space-between"
      >
        <Stack direction="row" spacing={2}>
          {" "}
          {online ? (
            <StyledBadge
              overlap="circular"
              anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
              variant="dot"
            >
              <Avatar alt={name} src={img} />
            </StyledBadge>
          ) : (
            <Avatar alt={name} src={img} />
          )}
          <Stack spacing={0.3}>
            <Typography variant="subtitle2">{name}</Typography>
            <Typography variant="caption">{truncateText(msg, 20)}</Typography>
          </Stack>
        </Stack>
        <Stack spacing={2} alignItems={"center"}>
          <Typography sx={{ fontWeight: 600 }} variant="caption">
            {time}
          </Typography>
          <Badge
            className="unread-count"
            color="primary"
            badgeContent={unread}
          />
        </Stack>
      </Stack>
    </StyledChatBox>
  );
};

export default ChatElement;


Листинг А.15 – файл CLoseDialogIcon.js

import React from 'react';
import {IconButton, Stack} from "@mui/material";
import {X} from "phosphor-react";

const CLoseDialogIcon = ({handleCloseDialog}) => {
  return (
    <>
      <IconButton onClick={handleCloseDialog}>
        <Stack alignItems={"center"} justifyContent={"center"} sx={{borderRadius: "50%", border: "1px solid"}}>
          <X/>
        </Stack>
      </IconButton>

    </>
  );
};

export default CLoseDialogIcon;


Листинг А.16 – файл Iconify.js

import PropTypes from 'prop-types';
// icons
import { Icon } from '@iconify/react';
// @mui
import { Box } from '@mui/material';


Iconify.propTypes = {
  icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),
  sx: PropTypes.object,
};

export default function Iconify({ icon, sx, ...other }) {
  return <Box component={Icon} icon={icon} sx={{ ...sx }} {...other} />;
}


Листинг А.17 – файл LoadingScreen.js

import React from "react";

const LoadingScreen = () => {
  return <>Loading...</>;
};

export default LoadingScreen;


Листинг А.18 – файл Scrollbar.js

import PropTypes from 'prop-types';
import SimpleBarReact from 'simplebar-react';
// @mui
import { alpha, styled } from '@mui/material/styles';
import { Box } from '@mui/material';

// ----------------------------------------------------------------------

const RootStyle = styled('div')(() => ({
  flexGrow: 1,
  height: '100%',
  overflow: 'scroll',
}));

const SimpleBarStyle = styled(SimpleBarReact)(({ theme }) => ({
  // maxHeight: '100%',
  '& .simplebar-scrollbar': {
    '&:before': {
      backgroundColor: alpha(theme.palette.grey[600], 0.48),
    },
    '&.simplebar-visible:before': {
      opacity: 1,
    },
  },
  '& .simplebar-track.simplebar-vertical': {
    width: 10,
  },
  '& .simplebar-track.simplebar-horizontal .simplebar-scrollbar': {
    height: 6,
  },
  '& .simplebar-mask': {
    zIndex: 'inherit',
  },
  "& .simplebar-placeholder": {
    height: '0 !important',
  }
}));

// ----------------------------------------------------------------------

Scrollbar.propTypes = {
  children: PropTypes.node.isRequired,
  sx: PropTypes.object,
};

export default function Scrollbar({ children, sx, ...other }) {
  const userAgent = typeof navigator === 'undefined' ? 'SSR' : navigator.userAgent;

  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);

  if (isMobile) {
    return (
      <Box sx={{ overflowX: 'auto', ...sx }} {...other}>
        {children}
      </Box>
    );
  }

  return (
    <RootStyle>
      <SimpleBarStyle timeout={500} clickOnTrack={false} sx={sx} {...other}>
        {children}
      </SimpleBarStyle>
    </RootStyle>
  );
}

export {SimpleBarStyle};


Листинг А.19 – файл StyledBadge.js

import {styled} from "@mui/material/styles";
import {Badge} from "@mui/material";

const StyledBadge = styled(Badge)(({theme}) => ({
  "& .MuiBadge-badge": {
    backgroundColor: "#44b700",
    color: "#44b700",
    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
    "&::after": {
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      borderRadius: "50%",
      animation: "ripple 1.2s infinite ease-in-out",
      border: "1px solid currentColor",
      content: '""',
    },
  },
  "@keyframes ripple": {
    "0%": {
      transform: "scale(.8)",
      opacity: 1,
    },
    "100%": {
      transform: "scale(2.4)",
      opacity: 0,
    },
  },
}));


export default StyledBadge;


Листинг А.20 – файл SubmittingLoader.js

import React from 'react';
import {CircularProgress, Stack} from "@mui/material";

const SubmittingLoader = () => {
    return (
        <Stack alignItems={"center"}>
            <CircularProgress />
        </Stack>
    );
};

export default SubmittingLoader;


Листинг А.21 – файл DialogAnimate.js

import PropTypes from 'prop-types';
import { m, AnimatePresence } from 'framer-motion';
// @mui
import { Dialog, Box, Paper } from '@mui/material';
//
import { varFade } from './variants';

// ----------------------------------------------------------------------

DialogAnimate.propTypes = {
  children: PropTypes.node.isRequired,
  onClose: PropTypes.func,
  open: PropTypes.bool.isRequired,
  sx: PropTypes.object,
  variants: PropTypes.object
};

export default function DialogAnimate({ open = false, variants, onClose, children, sx, ...other }) {
  return (
    <AnimatePresence>
      {open && (
        <Dialog
          fullWidth
          maxWidth="xs"
          open={open}
          onClose={onClose}
          PaperComponent={(props) => (
            <Box
              component={m.div}
              {...(variants ||
                varFade({
                  distance: 120,
                  durationIn: 0.32,
                  durationOut: 0.24,
                  easeIn: 'easeInOut'
                }).inUp)}
              sx={{
                width: '100%',
                height: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
            >
              <Box onClick={onClose} sx={{ width: '100%', height: '100%', position: 'fixed' }} />
              <Paper sx={sx} {...props}>
                {props.children}
              </Paper>
            </Box>
          )}
          {...other}
        >
          {children}
        </Dialog>
      )}
    </AnimatePresence>
  );
}


Листинг А.22 – файл FabButtonAnimate.js

import PropTypes from 'prop-types';
import { m } from 'framer-motion';
import { forwardRef } from 'react';
// @mui
import { useTheme } from '@mui/material/styles';
import { Box, Fab } from '@mui/material';

// ----------------------------------------------------------------------

const FabButtonAnimate = forwardRef(({ color = 'primary', size = 'large', children, sx, sxWrap, ...other }, ref) => {
  const theme = useTheme();

  if (color === 'default' || color === 'inherit' || color === 'primary' || color === 'secondary') {
    return (
      <AnimateWrap size={size} sxWrap={sxWrap}>
        <Fab ref={ref} size={size} color={color} sx={sx} {...other}>
          {children}
        </Fab>
      </AnimateWrap>
    );
  }

  return (
    <AnimateWrap size={size} sxWrap={sxWrap}>
      <Fab
        ref={ref}
        size={size}
        sx={{
          boxShadow: theme.customShadows[color],
          color: theme.palette[color].contrastText,
          bgcolor: theme.palette[color].main,
          '&:hover': {
            bgcolor: theme.palette[color].dark
          },
          ...sx
        }}
        {...other}
      >
        {children}
      </Fab>
    </AnimateWrap>
  );
});

FabButtonAnimate.propTypes = {
  children: PropTypes.node.isRequired,
  color: PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'info', 'success', 'warning', 'error']),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  sx: PropTypes.object,
  sxWrap: PropTypes.object
};

export default FabButtonAnimate;

// ----------------------------------------------------------------------

const varSmall = {
  hover: { scale: 1.07 },
  tap: { scale: 0.97 }
};

const varMedium = {
  hover: { scale: 1.06 },
  tap: { scale: 0.98 }
};

const varLarge = {
  hover: { scale: 1.05 },
  tap: { scale: 0.99 }
};

AnimateWrap.propTypes = {
  children: PropTypes.node.isRequired,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  sxWrap: PropTypes.object
};

function AnimateWrap({ size, children, sxWrap }) {
  const isSmall = size === 'small';
  const isLarge = size === 'large';

  return (
    <Box
      component={m.div}
      whileTap="tap"
      whileHover="hover"
      variants={(isSmall && varSmall) || (isLarge && varLarge) || varMedium}
      sx={{
        display: 'inline-flex',
        ...sxWrap
      }}
    >
      {children}
    </Box>
  );
}


Листинг А.23 – файл features.js

import { domMax } from 'framer-motion';

export default domMax;


Листинг А.24 – файл IconButtonAnimate.js

import PropTypes from 'prop-types';
import { m } from 'framer-motion';
import { forwardRef } from 'react';
// @mui
import { Box, IconButton } from '@mui/material';

// ----------------------------------------------------------------------

const IconButtonAnimate = forwardRef(({ children, size = 'medium', ...other }, ref) => (
  <AnimateWrap size={size}>
    <IconButton size={size} ref={ref} {...other}>
      {children}
    </IconButton>
  </AnimateWrap>
));

IconButtonAnimate.propTypes = {
  children: PropTypes.node.isRequired,
  color: PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'info', 'success', 'warning', 'error']),
  size: PropTypes.oneOf(['small', 'medium', 'large'])
};

export default IconButtonAnimate;

// ----------------------------------------------------------------------

const varSmall = {
  hover: { scale: 1.1 },
  tap: { scale: 0.95 }
};

const varMedium = {
  hover: { scale: 1.09 },
  tap: { scale: 0.97 }
};

const varLarge = {
  hover: { scale: 1.08 },
  tap: { scale: 0.99 }
};

AnimateWrap.propTypes = {
  children: PropTypes.node.isRequired,
  size: PropTypes.oneOf(['small', 'medium', 'large'])
};

function AnimateWrap({ size, children }) {
  const isSmall = size === 'small';
  const isLarge = size === 'large';

  return (
    <Box
      component={m.div}
      whileTap="tap"
      whileHover="hover"
      variants={(isSmall && varSmall) || (isLarge && varLarge) || varMedium}
      sx={{
        display: 'inline-flex'
      }}
    >
      {children}
    </Box>
  );
}


Листинг А.25 – файл index.js

export * from './variants';

export { default as DialogAnimate } from './DialogAnimate';
export { default as TextAnimate } from './TextAnimate';

export { default as FabButtonAnimate } from './FabButtonAnimate';
export { default as IconButtonAnimate } from './IconButtonAnimate';

export { default as MotionViewport } from './MotionViewport';
export { default as MotionContainer } from './MotionContainer';
export { default as MotionLazyContainer } from './MotionLazyContainer';


Листинг А.26 – файл MotionContainer.js

import PropTypes from 'prop-types';
import { m } from 'framer-motion';
// @mui
import { Box } from '@mui/material';
//
import { varContainer } from './variants';

// ----------------------------------------------------------------------

MotionContainer.propTypes = {
  action: PropTypes.bool,
  animate: PropTypes.bool,
  children: PropTypes.node.isRequired
};

export default function MotionContainer({ animate, action = false, children, ...other }) {
  if (action) {
    return (
      <Box
        component={m.div}
        initial={false}
        animate={animate ? 'animate' : 'exit'}
        variants={varContainer()}
        {...other}
      >
        {children}
      </Box>
    );
  }

  return (
    <Box component={m.div} initial="initial" animate="animate" exit="exit" variants={varContainer()} {...other}>
      {children}
    </Box>
  );
}


Листинг А.27 – файл MotionLazyContainer.js

import PropTypes from 'prop-types';
import { LazyMotion } from 'framer-motion';


// eslint-disable-next-line import/extensions
const loadFeatures = () => import('./features.js').then((res) => res.default);

MotionLazyContainer.propTypes = {
  children: PropTypes.node
};

export default function MotionLazyContainer({ children }) {
  return (
    <LazyMotion strict features={loadFeatures}>
      {children}
    </LazyMotion>
  );
}


Листинг А.28 – файл MotionViewport.js

import PropTypes from 'prop-types';
import { m } from 'framer-motion';
// @mui
import { Box } from '@mui/material';
// hooks
import useResponsive from '../../hooks/useResponsive';
//
import { varContainer } from '.';

// ----------------------------------------------------------------------

MotionViewport.propTypes = {
  children: PropTypes.node.isRequired,
  disableAnimatedMobile: PropTypes.bool,
};

export default function MotionViewport({ children, disableAnimatedMobile = false, ...other }) {
  const isMobile = useResponsive('down', 'sm');

  if (isMobile && disableAnimatedMobile) {
    return <Box {...other}>{children}</Box>;
  }

  return (
    <Box
      component={m.div}
      initial="initial"
      whileInView="animate"
      viewport={{ once: true, amount: 0.3 }}
      variants={varContainer()}
      {...other}
    >
      {children}
    </Box>
  );
}


Листинг А.29 – файл TextAnimate.js

import PropTypes from 'prop-types';
import { m } from 'framer-motion';
// @mui
import { Box } from '@mui/material';
//
import { varFade } from './variants';

// ----------------------------------------------------------------------

TextAnimate.propTypes = {
  text: PropTypes.string.isRequired,
  variants: PropTypes.object,
  sx: PropTypes.object
};

export default function TextAnimate({ text, variants, sx, ...other }) {
  return (
    <Box
      component={m.h1}
      sx={{
        typography: 'h1',
        overflow: 'hidden',
        display: 'inline-flex',
        ...sx
      }}
      {...other}
    >
      {text.split('').map((letter, index) => (
        <m.span key={index} variants={variants || varFade().inUp}>
          {letter}
        </m.span>
      ))}
    </Box>
  );
}


Листинг А.30 – файл actions.js

export const varHover = (scale) => ({
  hover: {
    scale: scale || 1.1
  }
});


Листинг А.31 – файл background.js

// ----------------------------------------------------------------------

export const varBgColor = (props) => {
  const colors = props?.colors || ['#19dcea', '#b22cff'];
  const duration = props?.duration || 5;
  const ease = props?.ease || 'linear';

  return {
    animate: {
      background: colors,
      transition: { duration, ease }
    }
  };
};

// ----------------------------------------------------------------------

export const varBgKenburns = (props) => {
  const duration = props?.duration || 5;
  const ease = props?.ease || 'easeOut';

  return {
    top: {
      animate: {
        scale: [1, 1.25],
        y: [0, -15],
        transformOrigin: ['50% 16%', 'top'],
        transition: { duration, ease }
      }
    },
    right: {
      animate: {
        scale: [1, 1.25],
        x: [0, 20],
        y: [0, -15],
        transformOrigin: ['84% 50%', 'right'],
        transition: { duration, ease }
      }
    },
    bottom: {
      animate: {
        scale: [1, 1.25],
        y: [0, 15],
        transformOrigin: ['50% 84%', 'bottom'],
        transition: { duration, ease }
      }
    },
    left: {
      animate: {
        scale: [1, 1.25],
        x: [0, -20],
        y: [0, 15],
        transformOrigin: ['16% 50%', 'left'],
        transition: { duration, ease }
      }
    }
  };
};

// ----------------------------------------------------------------------

export const varBgPan = (props) => {
  const colors = props?.colors || ['#ee7752', '#e73c7e', '#23a6d5', '#23d5ab'];
  const duration = props?.duration || 5;
  const ease = props?.ease || 'linear';

  const gradient = (deg) => `linear-gradient(${deg}deg, ${colors})`;

  return {
    top: {
      animate: {
        backgroundImage: [gradient(0), gradient(0)],
        backgroundPosition: ['center 99%', 'center 1%'],
        backgroundSize: ['100% 600%', '100% 600%'],
        transition: { duration, ease }
      }
    },
    right: {
      animate: {
        backgroundPosition: ['1% center', '99% center'],
        backgroundImage: [gradient(270), gradient(270)],
        backgroundSize: ['600% 100%', '600% 100%'],
        transition: { duration, ease }
      }
    },
    bottom: {
      animate: {
        backgroundImage: [gradient(0), gradient(0)],
        backgroundPosition: ['center 1%', 'center 99%'],
        backgroundSize: ['100% 600%', '100% 600%'],
        transition: { duration, ease }
      }
    },
    left: {
      animate: {
        backgroundPosition: ['99% center', '1% center'],
        backgroundImage: [gradient(270), gradient(270)],
        backgroundSize: ['600% 100%', '600% 100%'],
        transition: { duration, ease }
      }
    }
  };
};


Листинг А.32 – файл bounce.js

import { varTranEnter, varTranExit } from './transition';

// ----------------------------------------------------------------------

export const varBounce = (props) => {
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    in: {
      initial: {},
      animate: {
        scale: [0.3, 1.1, 0.9, 1.03, 0.97, 1],
        opacity: [0, 1, 1, 1, 1, 1],
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        scale: [0.9, 1.1, 0.3],
        opacity: [1, 1, 0],
      },
    },
    inUp: {
      initial: {},
      animate: {
        y: [720, -24, 12, -4, 0],
        scaleY: [4, 0.9, 0.95, 0.985, 1],
        opacity: [0, 1, 1, 1, 1],
        transition: { ...varTranEnter({ durationIn, easeIn }) },
      },
      exit: {
        y: [12, -24, 720],
        scaleY: [0.985, 0.9, 3],
        opacity: [1, 1, 0],
        transition: varTranExit({ durationOut, easeOut }),
      },
    },
    inDown: {
      initial: {},
      animate: {
        y: [-720, 24, -12, 4, 0],
        scaleY: [4, 0.9, 0.95, 0.985, 1],
        opacity: [0, 1, 1, 1, 1],
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        y: [-12, 24, -720],
        scaleY: [0.985, 0.9, 3],
        opacity: [1, 1, 0],
        transition: varTranExit({ durationOut, easeOut }),
      },
    },
    inLeft: {
      initial: {},
      animate: {
        x: [-720, 24, -12, 4, 0],
        scaleX: [3, 1, 0.98, 0.995, 1],
        opacity: [0, 1, 1, 1, 1],
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        x: [0, 24, -720],
        scaleX: [1, 0.9, 2],
        opacity: [1, 1, 0],
        transition: varTranExit({ durationOut, easeOut }),
      },
    },
    inRight: {
      initial: {},
      animate: {
        x: [720, -24, 12, -4, 0],
        scaleX: [3, 1, 0.98, 0.995, 1],
        opacity: [0, 1, 1, 1, 1],
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        x: [0, -24, 720],
        scaleX: [1, 0.9, 2],
        opacity: [1, 1, 0],
        transition: varTranExit({ durationOut, easeOut }),
      },
    },

    // OUT
    out: {
      animate: { scale: [0.9, 1.1, 0.3], opacity: [1, 1, 0] },
    },
    outUp: {
      animate: { y: [-12, 24, -720], scaleY: [0.985, 0.9, 3], opacity: [1, 1, 0] },
    },
    outDown: {
      animate: { y: [12, -24, 720], scaleY: [0.985, 0.9, 3], opacity: [1, 1, 0] },
    },
    outLeft: {
      animate: { x: [0, 24, -720], scaleX: [1, 0.9, 2], opacity: [1, 1, 0] },
    },
    outRight: {
      animate: { x: [0, -24, 720], scaleX: [1, 0.9, 2], opacity: [1, 1, 0] },
    },
  };
};


Листинг А.33 – файл container.js

// ----------------------------------------------------------------------

export const varContainer = (props) => {
  const staggerIn = props?.staggerIn || 0.05;
  const delayIn = props?.staggerIn || 0.05;
  const staggerOut = props?.staggerIn || 0.05;

  return {
    animate: {
      transition: {
        staggerChildren: staggerIn,
        delayChildren: delayIn
      }
    },
    exit: {
      transition: {
        staggerChildren: staggerOut,
        staggerDirection: -1
      }
    }
  };
};


Листинг А.34 – файл fade.js

import { varTranEnter, varTranExit } from './transition';

// ----------------------------------------------------------------------

export const varFade = (props) => {
  const distance = props?.distance || 120;
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    in: {
      initial: { opacity: 0 },
      animate: { opacity: 1, transition: varTranEnter },
      exit: { opacity: 0, transition: varTranExit }
    },
    inUp: {
      initial: { y: distance, opacity: 0 },
      animate: { y: 0, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: distance, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    inDown: {
      initial: { y: -distance, opacity: 0 },
      animate: { y: 0, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: -distance, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    inLeft: {
      initial: { x: -distance, opacity: 0 },
      animate: { x: 0, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: -distance, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    inRight: {
      initial: { x: distance, opacity: 0 },
      animate: { x: 0, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: distance, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },

    // OUT
    out: {
      initial: { opacity: 1 },
      animate: { opacity: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { opacity: 1, transition: varTranExit({ durationOut, easeOut }) }
    },
    outUp: {
      initial: { y: 0, opacity: 1 },
      animate: { y: -distance, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: 0, opacity: 1, transition: varTranExit({ durationOut, easeOut }) }
    },
    outDown: {
      initial: { y: 0, opacity: 1 },
      animate: { y: distance, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: 0, opacity: 1, transition: varTranExit({ durationOut, easeOut }) }
    },
    outLeft: {
      initial: { x: 0, opacity: 1 },
      animate: { x: -distance, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: 0, opacity: 1, transition: varTranExit({ durationOut, easeOut }) }
    },
    outRight: {
      initial: { x: 0, opacity: 1 },
      animate: { x: distance, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: 0, opacity: 1, transition: varTranExit({ durationOut, easeOut }) }
    }
  };
};


Листинг А.35 – файл flip.js

import { varTranEnter, varTranExit } from './transition';

export const varFlip = (props) => {
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    inX: {
      initial: { rotateX: -180, opacity: 0 },
      animate: { rotateX: 0, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { rotateX: -180, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    inY: {
      initial: { rotateY: -180, opacity: 0 },
      animate: { rotateY: 0, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { rotateY: -180, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },

    // OUT
    outX: {
      initial: { rotateX: 0, opacity: 1 },
      animate: { rotateX: 70, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    outY: {
      initial: { rotateY: 0, opacity: 1 },
      animate: { rotateY: 70, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    }
  };
};


Листинг А.36 – файл index.js

export * from './path';
export * from './fade';
export * from './zoom';
export * from './flip';
export * from './slide';
export * from './scale';
export * from './bounce';
export * from './rotate';
export * from './actions';
export * from './container';
export * from './transition';
export * from './background';


Листинг А.37 – файл path.js


export const TRANSITION = {
  duration: 2,
  ease: [0.43, 0.13, 0.23, 0.96]
};

export const varPath = {
  animate: {
    fillOpacity: [0, 0, 1],
    pathLength: [1, 0.4, 0],
    transition: TRANSITION
  }
};


Листинг А.38 – файл rotate.js

//
import { varTranEnter, varTranExit } from './transition';

export const varRotate = (props) => {
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    in: {
      initial: { opacity: 0, rotate: -360 },
      animate: { opacity: 1, rotate: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { opacity: 0, rotate: -360, transition: varTranExit({ durationOut, easeOut }) }
    },

    // OUT
    out: {
      initial: { opacity: 1, rotate: 0 },
      animate: { opacity: 0, rotate: -360, transition: varTranExit({ durationOut, easeOut }) }
    }
  };
};


Листинг А.39 – файл scale.js

//
import { varTranEnter, varTranExit } from './transition';

// ----------------------------------------------------------------------

export const varScale = (props) => {
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    inX: {
      initial: { scaleX: 0, opacity: 0 },
      animate: { scaleX: 1, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { scaleX: 0, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    inY: {
      initial: { scaleY: 0, opacity: 0 },
      animate: { scaleY: 1, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { scaleY: 0, opacity: 0, transition: varTranExit({ durationOut, easeOut }) }
    },

    // OUT
    outX: {
      initial: { scaleX: 1, opacity: 1 },
      animate: { scaleX: 0, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) }
    },
    outY: {
      initial: { scaleY: 1, opacity: 1 },
      animate: { scaleY: 0, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) }
    }
  };
};


Листинг А.40 – файл slide.js

//
import { varTranEnter, varTranExit } from './transition';


export const varSlide = (props) => {
  const distance = props?.distance || 160;
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    inUp: {
      initial: { y: distance },
      animate: { y: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: distance, transition: varTranExit({ durationOut, easeOut }) }
    },
    inDown: {
      initial: { y: -distance },
      animate: { y: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: -distance, transition: varTranExit({ durationOut, easeOut }) }
    },
    inLeft: {
      initial: { x: -distance },
      animate: { x: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: -distance, transition: varTranExit({ durationOut, easeOut }) }
    },
    inRight: {
      initial: { x: distance },
      animate: { x: 0, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: distance, transition: varTranExit({ durationOut, easeOut }) }
    },

    // OUT
    outUp: {
      initial: { y: 0 },
      animate: { y: -distance, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    outDown: {
      initial: { y: 0 },
      animate: { y: distance, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { y: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    outLeft: {
      initial: { x: 0 },
      animate: { x: -distance, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: 0, transition: varTranExit({ durationOut, easeOut }) }
    },
    outRight: {
      initial: { x: 0 },
      animate: { x: distance, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { x: 0, transition: varTranExit({ durationOut, easeOut }) }
    }
  };
};


Листинг А.41 – файл transition.js


export const varTranHover = (props) => {
  const duration = props?.duration || 0.32;
  const ease = props?.ease || [0.43, 0.13, 0.23, 0.96];

  return { duration, ease };
};

export const varTranEnter = (props) => {
  const duration = props?.durationIn || 0.64;
  const ease = props?.easeIn || [0.43, 0.13, 0.23, 0.96];

  return { duration, ease };
};

export const varTranExit = (props) => {
  const duration = props?.durationOut || 0.48;
  const ease = props?.easeOut || [0.43, 0.13, 0.23, 0.96];

  return { duration, ease };
};


Листинг А.42 – файл zoom.js

import { varTranEnter, varTranExit } from './transition';

export const varZoom = (props) => {
  const distance = props?.distance || 720;
  const durationIn = props?.durationIn;
  const durationOut = props?.durationOut;
  const easeIn = props?.easeIn;
  const easeOut = props?.easeOut;

  return {
    // IN
    in: {
      initial: { scale: 0, opacity: 0 },
      animate: { scale: 1, opacity: 1, transition: varTranEnter({ durationIn, easeIn }) },
      exit: { scale: 0, opacity: 0, transition: varTranExit({ durationOut, easeOut }) },
    },
    inUp: {
      initial: { scale: 0, opacity: 0, translateY: distance },
      animate: {
        scale: 1,
        opacity: 1,
        translateY: 0,
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        scale: 0,
        opacity: 0,
        translateY: distance,
        transition: varTranExit({ durationOut, easeOut }),
      },
    },
    inDown: {
      initial: { scale: 0, opacity: 0, translateY: -distance },
      animate: {
        scale: 1,
        opacity: 1,
        translateY: 0,
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        scale: 0,
        opacity: 0,
        translateY: -distance,
        transition: varTranExit({ durationOut, easeOut }),
      },
    },
    inLeft: {
      initial: { scale: 0, opacity: 0, translateX: -distance },
      animate: {
        scale: 1,
        opacity: 1,
        translateX: 0,
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        scale: 0,
        opacity: 0,
        translateX: -distance,
        transition: varTranExit({ durationOut, easeOut }),
      },
    },
    inRight: {
      initial: { scale: 0, opacity: 0, translateX: distance },
      animate: {
        scale: 1,
        opacity: 1,
        translateX: 0,
        transition: varTranEnter({ durationIn, easeIn }),
      },
      exit: {
        scale: 0,
        opacity: 0,
        translateX: distance,
        transition: varTranExit({ durationOut, easeOut }),
      },
    },

    // OUT
    out: {
      initial: { scale: 1, opacity: 1 },
      animate: { scale: 0, opacity: 0, transition: varTranEnter({ durationIn, easeIn }) },
    },
    outUp: {
      initial: { scale: 1, opacity: 1 },
      animate: {
        scale: 0,
        opacity: 0,
        translateY: -distance,
        transition: varTranEnter({ durationIn, easeIn }),
      },
    },
    outDown: {
      initial: { scale: 1, opacity: 1 },
      animate: {
        scale: 0,
        opacity: 0,
        translateY: distance,
        transition: varTranEnter({ durationIn, easeIn }),
      },
    },
    outLeft: {
      initial: { scale: 1, opacity: 1 },
      animate: {
        scale: 0,
        opacity: 0,
        translateX: -distance,
        transition: varTranEnter({ durationIn, easeIn }),
      },
    },
    outRight: {
      initial: { scale: 1, opacity: 1 },
      animate: {
        scale: 0,
        opacity: 0,
        translateX: distance,
        transition: varTranEnter({ durationIn, easeIn }),
      },
    },
  };
};


Листинг А.43 – файл Footer.js

import {
    Box,
    Fab,
    IconButton,
    InputAdornment,
    Stack,
    TextField,
    Tooltip,
} from "@mui/material";
import {
    Camera,
    File,
    Image,
    LinkSimple,
    PaperPlaneTilt,
    Smiley,
    Sticker,
    User,
} from "phosphor-react";
import {useTheme, styled} from "@mui/material/styles";
import {useState, useRef} from "react";
import {useSearchParams} from "react-router-dom";
import useResponsive from "../../hooks/useResponsive";

import data from "@emoji-mart/data";
import Picker from "@emoji-mart/react";
import {useSelector} from "react-redux";
import {socket} from "../../socket";

const StyledInput = styled(TextField)(({theme}) => ({
    "& .MuiInputBase-input": {
        paddingTop: "12px !important",
        paddingBottom: "12px !important",
    },
}));

const Actions = [
    {
        color: "#4da5fe",
        icon: <Image size={24}/>,
        y: 102,
        title: "Photo/Video",
    },
    {
        color: "#1b8cfe",
        icon: <Sticker size={24}/>,
        y: 172,
        title: "Stickers",
    },
    {
        color: "#0172e4",
        icon: <Camera size={24}/>,
        y: 242,
        title: "Image",
    },
    {
        color: "#0159b2",
        icon: <File size={24}/>,
        y: 312,
        title: "Document",
    },
    {
        color: "#013f7f",
        icon: <User size={24}/>,
        y: 382,
        title: "Contact",
    },
];

const ChatInput = ({openPicker, setOpenPicker, setValue, value, inputRef}) => {
    const [openActions, setOpenActions] = useState(false);

    return (
        <StyledInput
            fullWidth
            inputRef={inputRef}
            placeholder="Write a message..."
            variant="filled"
            value={value}
            onChange={e => {
                setValue(e.target.value)
            }}
            InputProps={{
                disableUnderline: true,
                startAdornment: (
                    <Stack sx={{width: "max-content"}}>
                        <Stack
                            sx={{
                                position: "relative",
                                display: openActions ? "inline-block" : "none",
                            }}
                        >
                            {Actions.map((el) => (
                                <Tooltip placement="right" title={el.title}>
                                    <Fab
                                        onClick={() => {
                                            setOpenActions(!openActions);
                                        }}
                                        sx={{
                                            position: "absolute",
                                            top: -el.y,
                                            backgroundColor: el.color,
                                        }}
                                        aria-label="add"
                                    >
                                        {el.icon}
                                    </Fab>
                                </Tooltip>
                            ))}
                        </Stack>

                        <InputAdornment position="">
                            <IconButton
                                onClick={() => {
                                    setOpenActions(!openActions);
                                }}
                            >
                                <LinkSimple/>
                            </IconButton>
                        </InputAdornment>
                    </Stack>
                ),
                endAdornment: (
                    <Stack sx={{position: "relative"}}>
                        <InputAdornment position="">
                            <IconButton
                                onClick={() => {
                                    setOpenPicker(!openPicker);
                                }}
                            >
                                <Smiley/>
                            </IconButton>
                        </InputAdornment>
                    </Stack>
                ),
            }}
        />
    );
};

function linkify(text) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    return text.replace(
        urlRegex,
        (url) => `<a href="${url}" target="_blank">${url}</a>`
    );
}
function containsUrl(text) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    return urlRegex.test(text);
}

const Footer = () => {
    const theme = useTheme();

    const {current_conversation} = useSelector(store => store.conversation.direct_chat);
    const {sideBar, room_id} = useSelector(store => store.app);

    const user_id = window.localStorage.getItem('user_id');
    const isMobile = useResponsive("between", "md", "xs", "sm");

    const [searchParams] = useSearchParams();
    const [openPicker, setOpenPicker] = useState(false);
    const [value, setValue] = useState("");
    const inputRef = useRef(null);

    function handleEmojiClick(emoji) {
        const input = inputRef.current;

        if (input) {
            const selectionStart = input.selectionStart;
            const selectionEnd = input.selectionEnd;

            setValue(
                value.substring(0, selectionStart) +
                emoji +
                value.substring(selectionEnd)
            );

            // Move the cursor to the end of the inserted emoji
            input.selectionStart = input.selectionEnd = selectionStart + 1;
        }
    }

    return (
        <Box
            sx={{
                position: "relative",
                backgroundColor: "transparent !important",
            }}
        >
            <Box
                p={isMobile ? 1 : 2}
                width={"100%"}
                sx={{
                    backgroundColor:
                        theme.palette.mode === "light"
                            ? "#F8FAFF"
                            : theme.palette.background,
                    boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.25)",
                }}
            >
                <Stack direction="row" alignItems={"center"} spacing={isMobile ? 1 : 3}>
                    <Stack sx={{width: "100%"}}>
                        <Box
                            style={{
                                zIndex: 10,
                                position: "fixed",
                                display: openPicker ? "inline" : "none",
                                bottom: 81,
                                right: isMobile
                                    ? 20
                                    : searchParams.get("open") === "true"
                                        ? 420
                                        : 100,
                            }}
                        >
                            <Picker
                                theme={theme.palette.mode}
                                data={data}
                                onEmojiSelect={(emoji) => {
                                    handleEmojiClick(emoji.native);
                                }}
                            />
                        </Box>
                        {/* Chat Input */}
                        <ChatInput
                            inputRef={inputRef}
                            value={value}
                            setValue={setValue}
                            openPicker={openPicker}
                            setOpenPicker={setOpenPicker}
                        />
                    </Stack>
                    <Box
                        sx={{
                            height: 48,
                            width: 48,
                            backgroundColor: theme.palette.primary.main,
                            borderRadius: 1.5,
                        }}
                    >
                        <Stack
                            sx={{height: "100%"}}
                            alignItems={"center"}
                            justifyContent="center"
                        >
                            <IconButton
                                onClick={() => {
                                    // console.log(value)
                                    socket.emit("text_message", {
                                        message: linkify(value),
                                        conversation_id: room_id,
                                        from: user_id,
                                        to: current_conversation?.user_id,
                                        type: containsUrl(value) ? "Link" : "Text",
                                    });
                                }}
                            >
                                <PaperPlaneTilt color="#ffffff"/>
                            </IconButton>
                        </Stack>
                    </Box>
                </Stack>
            </Box>
        </Box>
    );
};

export default Footer;


Листинг А.44 – файл Header.js

import React from 'react';
import {Avatar, Box, Divider, IconButton, Stack, Typography} from "@mui/material";
import {faker} from "@faker-js/faker";
import {CaretDown, MagnifyingGlass, Phone, VideoCamera} from "phosphor-react";
import {useTheme} from "@mui/material/styles";
import StyledBadge from "../StyledBadge";
import {ToggleSidebar} from "../../redux/slices/appSlice";
import {useDispatch} from "react-redux";

const Header = () => {
    const theme = useTheme();
    const dispatch = useDispatch();

    return (
        <>
        <Box
            p={2}
            sx={{
                width: "100%",
                boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
                backgroundColor: theme.palette.mode === "light" ? "#f8faff" : theme.palette.background.paper
            }}
        >
            <Stack
                alignItems={"center"}
                direction={"row"}
                justifyContent={"space-between"}
                sx={{width: "100%", height: "100%"}}
            >
                {/* avatar online */}
                <Stack
                    onClick={()=> dispatch(ToggleSidebar())}
                    direction={"row"} spacing={2}>
                    <Box>
                        <StyledBadge
                            overlap="circular"
                            anchorOrigin={{vertical: "bottom", horizontal: "right"}}
                            variant="dot"
                        >
                            <Avatar alt={faker.name.fullName()} src={faker.image.avatar()}/>
                        </StyledBadge>
                    </Box>
                    <Stack spacing={0.2}>
                        <Typography variant={"subtitle2"}>{faker.name.fullName()}</Typography>
                        <Typography variant={"caption"}>Online</Typography>
                    </Stack>
                </Stack>
                {/* btns */}
                <Stack direction={"row"} spacing={3}>
                    <IconButton><VideoCamera/></IconButton>
                    <IconButton><Phone/></IconButton>
                    <IconButton><MagnifyingGlass/></IconButton>
                    <Divider orientation={"vertical"} flexItem/>
                    <IconButton onClick={()=> dispatch(ToggleSidebar())}><CaretDown/></IconButton>
                </Stack>
            </Stack>
        </Box>
        </>
    );
};

export default Header;


Листинг А.45 – файл index.js

export {default as ChatHeader} from "./Header";
export {default as ChatFooter} from "./Footer";


Листинг А.46 – файл AvatarWithOnline.js

import React from 'react';
import {Avatar, Badge} from "@mui/material";
import {faker} from "@faker-js/faker";
import {styled} from "@mui/material/styles";

const StyledBadge = styled(Badge)(({theme}) => ({
  "& .MuiBadge-badge": {
    backgroundColor: "#44b700",
    color: "#44b700",
    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
    "&::after": {
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      borderRadius: "50%",
      animation: "ripple 1.2s infinite ease-in-out",
      border: "1px solid currentColor",
      content: '""',
    },
  },
  "@keyframes ripple": {
    "0%": {
      transform: "scale(.8)",
      opacity: 1,
    },
    "100%": {
      transform: "scale(2.4)",
      opacity: 0,
    },
  },
}));


const AvatarWithOnline = ({online, image}) => {
  return (
    <>
      {
        online ?
          <StyledBadge
            overlap="circular"
            anchorOrigin={{vertical: "bottom", horizontal: "right"}}
            variant="dot"
          >
            <Avatar src={image}/>
          </StyledBadge>
          :
          <Avatar src={faker.image.avatar()}/>
      }
    </>
  );
};

export default AvatarWithOnline;


Листинг А.47 – файл ChatElementComponent.js

import {useTheme} from "@mui/material/styles";
import {Box, Stack} from "@mui/material";
import React from "react";
import NameAndMessage from "./NameAndMessage";
import AvatarWithOnline from "./AvatarWithOnline";
import TimeAndUnread from "./TimeAndUnread";

const ChatElementComponent = ({id, name, img, msg, time, unread, online, current_conv}) => {
    const theme = useTheme();

    return (
        <Box
            p={2}
            sx={{
                position: "relative",
                height: '100%',
                width: '100%',
                borderRadius: 1,
                backgroundColor: theme.palette.mode === 'light'
                    ? '#fff'
                    : theme.palette.background.paper,
                "&:hover": {
                    cursor: "pointer"
                }
            }}>
            <Stack
                direction="row"
                alignItems="center"
                justifyContent="space-between"
            >
                <Stack
                    direction="row"
                    spacing={2}
                >
                    <AvatarWithOnline image={img} online={online} />
                    <Stack spacing={0.3}>
                        {/*  name and message*/}
                        <NameAndMessage name={name} message={msg} />
                    </Stack>
                </Stack>
                <Stack spacing={2} alignItems={"center"}>
                    <TimeAndUnread time={time} unread={unread} />
                </Stack>

            </Stack>
        </Box>
    )
};


export default ChatElementComponent;


Листинг А.48 – файл index.js

export { default as ChatElement } from './ChatElementComponent';


Листинг А.49 – файл NameAndMessage.js

import React from 'react';
import {Typography} from "@mui/material";

const NameAndMessage = ({name, message}) => {
  return (
    <>
      <Typography variant="subtitle2">
        {name}
      </Typography>
      <Typography variant="caption">
        {message}
      </Typography>
    </>
  );
};

export default NameAndMessage;


Листинг А.50 – файл TimeAndUnread.js

import React from 'react';
import {Badge, Typography} from "@mui/material";

const TimeAndUnread = ({time, unread}) => {
  return (
    <>
      <Typography sx={{fontWeight: 600}} variant="caption">
        {time}
      </Typography>
      <Badge color="primary" badgeContent={unread}/>
    </>
  );
};

export default TimeAndUnread;


Листинг А.51 – файл Contact.js

import React from 'react';
import {Avatar, Box, Divider, IconButton, Button, Stack, Typography, Grid} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {Bell, CaretRight, Phone, Prohibit, Star, Trash, VideoCamera, X} from "phosphor-react";
import {useDispatch} from "react-redux";
import {ToggleSidebar, UpdateSidebarType} from "../../redux/slices/appSlice";
import {faker} from "@faker-js/faker";
import AntSwitch from "../AntSwitch";
import {BlockDialog, DeleteDialog} from "./Dialogs";

const Contact = () => {
  const theme = useTheme();
  const dispatch = useDispatch();
  const [openBlockDialog, setOpenBlockDialog] = React.useState(false);
  const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false);

  const handleCloseBlockDialog = ()=> {
    setOpenBlockDialog(false)
  }

  const handleCloseDeleteDialog = ()=> {
    setOpenDeleteDialog(false)
  }
  return (
    <Box sx={{width: 320, height: "100vh"}}>
      <Stack sx={{height: "100%"}}>
        {/*Header */}
        <Box
          sx={{
            boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
            width: "100%",
            backgroundColor: theme.palette.mode === "light" ? "#f8faff" : theme.palette.background.paper
          }}
        >
          <Stack
            sx={{height: "100%", p: 2}}
            direction={"row"} alignItems={"center"} justifyContent={"space-between"}
            spacing={3}
          >
            <Typography variant={"subtitle2"}>Contact Info</Typography>
            <Stack>
              <IconButton onClick={() => dispatch(ToggleSidebar())}>
                <Stack alignItems={"center"} justifyContent={"center"} sx={{borderRadius: "50%", border: "1px solid"}}
                       p={0.05}>
                  <X/>
                </Stack>
              </IconButton>
            </Stack>

          </Stack>
        </Box>
        {/*  contact Info Body */}
        <Stack
          p={3}
          spacing={3}
          sx={{
            height: "100%",
            position: "relative",
            flexGrow: 1,
            overflowY: "scroll",
            backgroundColor: ""
          }}>
          <Stack
            alignItems={"center"}
            direction={"row"}
            spacing={2}
          >
            <Avatar src={faker.image.avatar()} alt={faker.person.firstName()} sx={{height: 64, width: 64}}/>
            <Stack spacing={0.5}>
              <Typography variant={"article"} fontWeight={600}>{faker.person.fullName()}</Typography>
              <Typography variant={"caption"} fontWeight={500}>{faker.phone.number()}</Typography>
            </Stack>
          </Stack>
          <Stack
            direction={"row"}
            alignItems={"center"}
            justifyContent={"space-evenly"}
          >
            <Stack spacing={1} alignItems={"center"}>
              <IconButton>
                <VideoCamera/>
              </IconButton>
              <Typography variant={"overline"} fontWeight={600}>video</Typography>
            </Stack>
            <Stack spacing={1} alignItems={"center"}>
              <IconButton>
                <Phone/>
              </IconButton>
              <Typography variant={"overline"} fontWeight={600}>Call</Typography>
            </Stack>
          </Stack>
          <Divider/>
          <Stack spacing={0.5}>
            <Typography variant={"article"}>About</Typography>
            <Typography variant={"body2"}>{faker.lorem.words(5, 10)}</Typography>
          </Stack>
          <Divider/>
          <Stack direction={"row"} alignItems={"center"} justifyContent={"space-between"}>
            <Typography onClick={() => dispatch(UpdateSidebarType({type: "SHARED"}))} variant={"subtitle2"}>Media, Links & Docs</Typography>
            <Button
              onClick={() => dispatch(UpdateSidebarType({type: "SHARED"}))}
              endIcon={<CaretRight/>}
            >
              401
            </Button>
          </Stack>
          <Grid container spacing={1.5}>
            {[1, 2, 3, 4, 5].slice(0, 3).map((item) => (
              <Grid item xs={4}>
                <img src={faker.image.urlLoremFlickr({category: 'cats'})} alt={faker.person.firstName()}/>
              </Grid>
            ))
            }
          </Grid>
          <Divider/>
          <Stack direction={"row"} alignItems={"center"} justifyContent={"space-between"}>
            <Stack
              onClick={() => dispatch(UpdateSidebarType({type: "STARRED"}))}
              direction={"row"} alignItems={"center"} spacing={2}>
              <Star size={21}/>
              <Typography variant={"subtitle2"}>Starred Messages</Typography>
            </Stack>
            <IconButton onClick={() => dispatch(UpdateSidebarType({type: "STARRED"}))}>
              <CaretRight/>
            </IconButton>
          </Stack>
          <Divider/>
          <Stack direction={"row"} alignItems={"center"} justifyContent={"space-between"}>
            <Stack direction={"row"} alignItems={"center"} spacing={2}>
              <Bell size={21}/>
              <Typography variant={"subtitle2"}>Mute Notifications</Typography>
            </Stack>
            <AntSwitch/>
          </Stack>
          <Divider/>
          <Typography>1 group in common</Typography>
          <Stack
            alignItems={"center"}
            direction={"row"}
            spacing={2}>
            <Avatar src={faker.image.avatar()} alt={faker.person.fullName()}/>
            <Stack spacing={0.5}>
              <Typography variant={"subtitle2"}>Hmak</Typography>
              <Typography variant={"caption"}>{`${faker.company.name()}, You`}</Typography>
            </Stack>
          </Stack>
          <Stack
            alignItems={"center"}
            direction={"row"}
            spacing={2}
            justifyContent={"space-between"}
          >
            <Button
              fullWidth variant={"outlined"}
              startIcon={<Prohibit/>}
              onClick={() => setOpenBlockDialog(true)}
            >
              Block
            </Button>
            <Button
              fullWidth variant={"outlined"}
              startIcon={<Trash/>}
              onClick={() => setOpenDeleteDialog(true)}

            >
              Delette
            </Button>
          </Stack>
        </Stack>
      </Stack>
      {openBlockDialog && <BlockDialog open={openBlockDialog} handleClose={handleCloseBlockDialog} />}
      {openDeleteDialog && <DeleteDialog open={openDeleteDialog} handleClose={handleCloseDeleteDialog} />}
    </Box>
  );
};

export default Contact;


Листинг А.52 – файл Dialogs.js

import React from "react";
import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Slide} from "@mui/material";

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});
const BlockDialog = ({open, handleClose}) => {

  return (
    <Dialog
      open={open}
      TransitionComponent={Transition}
      keepMounted
      onClose={handleClose}
      aria-describedby="alert-dialog-slide-description"
    >
      <DialogTitle>Block this contact</DialogTitle>
      <DialogContent>
        <DialogContentText id="alert-dialog-slide-description">
          Are you sure you want to block this contact?
        </DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>Cancel</Button>
        <Button onClick={handleClose}>Block</Button>
      </DialogActions>
    </Dialog>
  )

}

const DeleteDialog = ({open, handleClose}) => {

  return (
    <Dialog
      open={open}
      TransitionComponent={Transition}
      keepMounted
      onClose={handleClose}
      aria-describedby="alert-dialog-slide-description"
    >
      <DialogTitle>Delete this contact</DialogTitle>
      <DialogContent>
        <DialogContentText id="alert-dialog-slide-description">
          Are you sure you want to delete this contact?
        </DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>Cancel</Button>
        <Button onClick={handleClose}>Delete</Button>
      </DialogActions>
    </Dialog>
  )
}

export {BlockDialog, DeleteDialog}


Листинг А.53 – файл index.js

export { default as ContactInfo } from './Contact'
export { default as SharedMessage } from './SharedMessages'
export { default as StarredMessage } from './StarredMessages'


Листинг А.54 – файл SharedMessages.js

import React from 'react';
import {Box, Grid, IconButton, Stack, Tab, Tabs} from "@mui/material";
import {UpdateSidebarType} from "../../redux/slices/appSlice";
import {ArrowLeft} from "phosphor-react";
import {useTheme} from "@mui/material/styles";
import {useDispatch} from "react-redux";
import {faker} from "@faker-js/faker";
import {SHARED_DOCS, SHARED_LINKS} from "../../_data";
import {DocMsg, LinkMsg} from "../Conversation/MsgTypes";

const SharedMessages = () => {
  const theme = useTheme();
  const dispatch = useDispatch();

  const [value, setValue] = React.useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };
  return (
    <Box sx={{width: 320, height: "100vh"}}>
      <Stack sx={{height: "100%", backgroundColor: theme.palette.mode === "light" ? "#f8faff" : theme.palette.background.paper}}>
        {/*Header */}
        <Box
          sx={{
            boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
            width: "100%",
            backgroundColor: theme.palette.mode === "light" ? "#f8faff" : theme.palette.background.paper
          }}
        >
          <Stack
            sx={{height: "100%", p: 2}}
            direction={"row"} alignItems={"center"}
            spacing={3}
          >
            <IconButton onClick={() => dispatch(UpdateSidebarType({type: "CONTACT"}))}>
              <ArrowLeft/>
            </IconButton>
          </Stack>
        </Box>
        <Tabs sx={{px: 2, pt: 1}} value={value} onChange={handleChange} centered>
          <Tab label="Media"/>
          <Tab label="Link"/>
          <Tab label="Docs"/>
        </Tabs>
        {/*  end header */}
        {/*  body */}
        <Stack
          p={3}
          spacing={value === 1 ? 3 : 1}
          alignItems={"center"}
          sx={{
            height: "100%",
            position: "relative",
            flexGrow: 1,
            overflowY: "scroll",
          }}>
          {(() => {
            switch (value) {
              case 0:
                //render media
                return (
                  <Grid container spacing={2}>
                    {[0,1,2,3,4,5,6].map((item)=>(
                      <Grid item xs={4}>
                        <img src={faker.image.avatar()} alt=""/>
                      </Grid>
                    ))}
                  </Grid>
                )
              case 1:
                //render links
                return (
                  SHARED_LINKS.map((item)=>(
                    <LinkMsg content={item}/>
                  ))
                )
              case 2:
                //render Docs
                return SHARED_DOCS.map((item)=> <DocMsg content={item} />)
              default:
                break;
            }
          })()}
        </Stack>
      </Stack>
    </Box>
  );
};

export default SharedMessages;


Листинг А.55 – файл StarredMessages.js

import React from 'react';
import {Box, IconButton, Stack, Typography} from "@mui/material";
import { UpdateSidebarType} from "../../redux/slices/appSlice";
import {ArrowLeft} from "phosphor-react";
import {useTheme} from "@mui/material/styles";
import {useDispatch} from "react-redux";
import Message from "../Conversation/Message";

const StarredMessages = () => {
  const theme = useTheme();
  const dispatch = useDispatch();

  return (
    <Box sx={{width: 320, height: "100vh"}}>
      <Stack sx={{height: "100%", backgroundColor: theme.palette.mode === "light" ? "#f8faff" : theme.palette.background.paper}}>
        {/*Header */}
        <Box
          sx={{
            boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
            width: "100%",
            backgroundColor: theme.palette.mode === "light" ? "#f8faff" : theme.palette.background.paper
          }}
        >
          <Stack
            sx={{height: "100%", p: 2}}
            direction={"row"} alignItems={"center"}
            spacing={3}
          >
            <IconButton onClick={() => dispatch(UpdateSidebarType({type: "CONTACT"}))}>
              <ArrowLeft/>
            </IconButton>
            <Typography variant={"body2"}>Starred Messages</Typography>
          </Stack>
        </Box>
        {/*  end header */}
        {/*  body */}
        <Stack
          p={3}
          spacing={3}
          alignItems={"center"}
          sx={{
            height: "100%",
            position: "relative",
            flexGrow: 1,
            overflowY: "scroll",
          }}>
          <Stack width={320}>
            <Message showMessageOptions={false} />
          </Stack>
        </Stack>
      </Stack>
    </Box>
  );
};

export default StarredMessages;


Листинг А.56 – файл index.js

import React from 'react';
import { Box, Stack,} from "@mui/material";
import Header from "../Chat/Header";
import Footer from "../Chat/Footer";
import Message from "./Message";



const ConversionComponent = () => {
  return (
    <Stack height={"100%"} maxHeight={"100vh"} width={"auto"}>
      {/*chat header*/}
      <Header />
      {/*messages*/}
      <Box width={"100%"} sx={{flexGrow: 1, height: "100%", overflowY: "scroll"}}>
        <Message showMessageOptions />
      </Box>
      {/*chat footer*/}
      <Footer />
    </Stack>
  );
};

export default ConversionComponent;


Листинг А.57 – файл Message.js

import React from 'react';
import {Box, Stack} from "@mui/material";
import {Chat_History} from "../../_data";
import {DocMsg, ImgMsg, LinkMsg, ReplyMsg, TextMsg, Timeline} from "./MsgTypes";

const Message = ({showMessageOptions}) => {
  return (
    <Box p={3} sx={{height: "100%"}}>
      <Stack spacing={3}>
        {Chat_History.map((item) => {
          // console.log(item)
          switch (item.type) {
            case "divider":
              // TimeLine
              return <Timeline content={item} />;
            case "msg":
              switch (item.subtype) {
                case "img":
                  // Image msg
                  return <ImgMsg content={item} showMessageOptions={showMessageOptions}/>
                case "doc":
                  // Doc msg
                  return <DocMsg content={item} showMessageOptions={showMessageOptions}/>;
                case "link":
                  // Link msg
                  return <LinkMsg content={item} showMessageOptions={showMessageOptions}/>
                case "reply":
                  // reply msg
                  return <ReplyMsg content={item} showMessageOptions={showMessageOptions}/>

                default:
                  return <TextMsg content={item} showMessageOptions={showMessageOptions}/>
              }
            default:
              return <></>
          }
        })}
      </Stack>

    </Box>
  );
};

export default Message;


Листинг А.58 – файл MsgTypes.js

import React from 'react';
import {Box, Divider, Stack, Typography, Link, IconButton, MenuItem, Menu} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {DotsThreeVertical, DownloadSimple, Image} from "phosphor-react";
import {Message_options} from "../../_data";



const DocMsg = ({content, showMessageOptions}) => {
  const theme = useTheme();
  return (
    <Stack width={"100%"} direction={"row"} justifyContent={content.incoming ? "start" : "end"}>
      <Box
        p={1.5}
        sx={{
          backgroundColor: content.incoming
            ? theme.palette.background.default
            : theme.palette.primary.main,
          borderRadius: 1.5,
          width: "max-content"
        }}>
        <Stack spacing={2}>
          <Stack
            direction={"row"}
            p={2}
            spacing={3} alignItems={"center"}
            sx={{
              backgroundColor: theme.palette.background.paper,
              borderRadius: 1,
            }}
          >
            <Image size={32}/>
            <Typography variant={"caption"}>filename.png</Typography>
            <IconButton><DownloadSimple/></IconButton>
          </Stack>
          <Typography
            variant={"body2"} sx={{color: content.incoming ? theme.palette.text : "#fff"}}
          >
            {content.message}
          </Typography>
        </Stack>
      </Box>
      {/*message options*/}
      {showMessageOptions && <MessageOptions />}

    </Stack>
  );
};

const LinkMsg = ({content, showMessageOptions}) => {
  const theme = useTheme();
  return (
    <Stack width={"100%"} direction={"row"} justifyContent={content.incoming ? "start" : "end"}>
      <Box
        p={1.5}
        sx={{
          backgroundColor: content.incoming
            ? theme.palette.background.default
            : theme.palette.primary.main,
          borderRadius: 1.5,
          width: "max-content"
        }}>
        <Stack spacing={2}>
          <Stack
            spacing={3}
            p={2} direction="column"
            alignItems={"start"}
            sx={{
              backgroundColor: theme.palette.background.paper,
              borderRadius: 1,
            }}
          >
            <img
              src={content.preview} alt={content.message}
              style={{maxHeight: 210, borderRadius: "1px"}}
            />
            <Stack spacing={2}>
              <Typography variant={"subtitle2"}>Writing diploma</Typography>
              <Typography
                variant={"subtitle2"} sx={{color: theme.palette.primary.main}}
                component={Link}
                to={"//https://www.youtube.com"}
              >
                www.youtube.com
              </Typography>
            </Stack>
            <Typography variant={"body2"} color={content.incoming}>
              {content.message}
            </Typography>
          </Stack>
        </Stack>
      </Box>
      {/*message options*/}
      {showMessageOptions && <MessageOptions />}
    </Stack>
  )
}

const ReplyMsg = ({content, showMessageOptions}) => {
  const theme = useTheme()
  return (
    <Stack direction={"row"} justifyContent={content.incoming ? "start" : "end"}>
      <Box
        p={1.5}
        sx={{
          backgroundColor: content.incoming
            ? theme.palette.background.default
            : theme.palette.primary.main,
          borderRadius: 1.5,
          width: "max-content"
        }}>
        <Stack spacing={2}>
          <Stack
            p={2} direction="column"
            spacing={3} alignItems={"center"}
            sx={{
              backgroundColor: theme.palette.background.paper,
              borderRadius: 1,
            }}
          >
            <Typography variant={"body2"} color={theme.palette.text}>
              {content.message}
            </Typography>
          </Stack>
          <Typography variant={"body2"} color={content.incoming ? theme.palette.text : "#fff"}>
            {content.reply}
          </Typography>
        </Stack>
      </Box>
      {/*message options*/}
      {showMessageOptions && <MessageOptions />}
    </Stack>
  );
};

const ImgMsg = ({content, showMessageOptions}) => {
  const theme = useTheme()
  return (
    <Stack direction={"row"} justifyContent={content.incoming ? "start" : "end"}>
      <Box
        p={1.5}
        sx={{
          backgroundColor: content.incoming
            ? theme.palette.background.paper
            : theme.palette.primary.main,
          borderRadius: 1.5,
          width: "max-content"
        }}>
        <Stack spacing={1}>
          <img
            src={content.img}
            alt={content.message}
            style={{maxHeight: 210, borderRadius: "10px"}}
          />
          <Typography variant={"body2"} color={content.incoming ? theme.palette.text : "#fff"}>
            {content.message}
          </Typography>
        </Stack>
      </Box>
      {/*message options*/}
      {showMessageOptions && <MessageOptions />}
    </Stack>
  )
}
const TextMsg = ({content, showMessageOptions}) => {
  const theme = useTheme()
  return (
    <Stack direction={"row"} justifyContent={content.incoming ? "start" : "end"}>
      <Box
        p={1.5}
        sx={{
          backgroundColor: content.incoming
            ? theme.palette.background.paper
            : theme.palette.primary.main,
          borderRadius: 1.5,
          width: "max-content"
        }}>
        <Typography variant={"body2"} color={content.incoming ? theme.palette.text : "#fff"}>
          {content.message}
        </Typography>
      </Box>
      {/*message options*/}
      {showMessageOptions && <MessageOptions />}
    </Stack>
  );
};

const Timeline = ({content}) => {
  const theme = useTheme();

  return (
    <Stack direction={'row'} alignItems={"center"} justifyContent={"space-between"}>
      <Divider width={"46%"}/>
      <Typography variant={"caption"} sx={{color: theme.palette.text}}>{content.text}</Typography>
      <Divider width={"46%"}/>

    </Stack>
  );
};

const MessageOptions = () => {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const open = Boolean(anchorEl);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  return (
    <>
      <DotsThreeVertical
        id="message-options"
        aria-controls={open ? 'basic-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        onClick={handleClick}
        size={20}
      />
      <Menu
        id="basic-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        MenuListProps={{
          'aria-labelledby': 'message-options',
        }}
      >
        <Stack spacing={1} px={1}>
          {Message_options.map((item)=>(
            <MenuItem onClick={handleClick}>
              {item.title}
            </MenuItem>
          ))}

        </Stack>
      </Menu>

    </>
  )
}

export {Timeline, TextMsg, ImgMsg, ReplyMsg, LinkMsg,  DocMsg};


Листинг А.59 – файл DialogBody.js

import React from 'react';
import {Stack} from "@mui/material";
import CLoseDialogIcon from "../CLoseDialogIcon";

const DialogBody = ({header, content, handleClose}) => {
    return (
        <>
            <Stack>
                <Stack direction={"row"} sx={{width: "100%"}}>
                    {/*  header */}
                    {header}
                    <CLoseDialogIcon handleCloseDialog={handleClose}/>
                </Stack>
                <Stack
                    mt={5}
                    direction="column"
                    sx={{flexGrow: 1, height: "100%", overflowX: "hidden", overflowY: "scroll",}}
                >
                    {/*  content */}
                    {content}
                </Stack>
            </Stack>

        </>
    );
};

export default DialogBody;


Листинг А.60 – файл DialogContainer.js

import React from 'react';
import {Dialog, DialogActions, DialogContent, DialogTitle, Slide} from "@mui/material";
import {useTheme} from "@mui/material/styles";

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});
const DialogContainer = ({openDialog, handleCloseDialog,title, Action, children,maxWidth, ...other}) => {
  const theme = useTheme();
  return (
    <Dialog
      fullWidth
      maxWidth={maxWidth ? maxWidth : "md"}
      open={openDialog}
      TransitionComponent={Transition}
      keepMounted
      onClose={handleCloseDialog}
      sx={{backgroundColor: theme.palette.mode === 'light'
          ? '#fff'
          : theme.palette.background,}}
      {...other}
    >
      {title && <DialogTitle>{title}</DialogTitle>}
      <DialogContent>
        {children}
      </DialogContent>
      {Action && <DialogActions></DialogActions>}
    </Dialog>
  );
};

export default DialogContainer;


Листинг А.61 – файл ShowDialog.js

import React from 'react';
import DialogContainer from "./DialogContainer";
import DialogBody from "./DialogBody";


const ShowDialog = ({open, handleClose, header, content}) => {
    return (
        <>
            <DialogContainer
                openDialog={open}
                maxWidth={"xs"}
                handleCloseDialog={handleClose}
            >
                <DialogBody content={content} handleClose={handleClose} header={header} />
            </DialogContainer>

        </>
    );
};

export default ShowDialog;


Листинг А.62 – файл FormProvider.js

import React from 'react';
import {FormProvider as Form} from 'react-hook-form'

const FormProvider = ({children, onSubmit, methods}) => {
  return (
    <Form {...methods}>
      <form onSubmit={onSubmit}>{children}</form>
    </Form>
  );
};

export default FormProvider;


Листинг А.63 – файл index.js

export { default as RHFTextField}  from "./RHFTextField";
export { default } from "./FormProvider";



Листинг А.64 – файл RHFAutocomplete.js

import PropTypes from "prop-types";

//form
import {Controller, useFormContext} from "react-hook-form";

// @mui
import {Autocomplete, TextField} from "@mui/material";

RHFAutocomplete.prototype = {
  name: PropTypes.string,
  label: PropTypes.string,
  helpText: PropTypes.node,
};

export default function RHFAutocomplete({name, label, helperText, ...other}) {
  const {control, setValue} = useFormContext();
  return (
    <Controller
      name={name}
      control={control}
      render={({field, fieldState: {error}}) => (
        <Autocomplete
          {...field}
          fullWidth
          value={
            typeof field.value === "number" && field.value === 0
              ? ""
              : field.value
          }
          onChange={(event, newValue) =>
            setValue(name, newValue, {shouldValidate: true})
        }
          error={!!error}
          helperText={error ? error.message : helperText}
          {...other}
          renderInput={(params)=>(
            <TextField
              label={label}
              error={!!error}
              helperText={error ? error.message : helperText}
              {...params}
            />
          )}
        />
      )}/>
  )
}


Листинг А.65 – файл RHFOtpCodes.js

import React from 'react';
import {Stack, TextField} from "@mui/material";
import {Controller, useFormContext} from "react-hook-form";

const RHFOtpCodes = ({keyName = "", inputs = [], ...other}) => {
    const codesRef = React.useRef(null);
    const {control} = useFormContext();
    const handleChangeWithNextField = (e, handleChange) => {
        const {maxLength, value, name} = e.target;
        const fieldIntIndex = Number(name.replace(keyName, ""));
        const nextField = document.querySelector(`input[name=${keyName}${fieldIntIndex + 1}]`);

        if (value.length > maxLength) {
            e.target.value = value[0];
        }
        if (value.length >= maxLength && fieldIntIndex < 6 && nextField !== null) {
            nextField.focus();
        }
        handleChange(e);
    }
    return (
        <Stack direction="row" spacing={2} justifyContent={"center"} ref={codesRef}>
            {inputs.map((name, index) => (
                <Controller
                    key={name}
                    control={control}
                    name={`${keyName}${index + 1}`}
                    render={({field, fieldState: {error}}) => (
                        <TextField
                            {...field}
                            fullWidth
                            error={!!error} autoFocus={index===0} placeholder={"-"}
                            onChange={(e)=> handleChangeWithNextField(e, field.onChange)}
                            onFocus={(e)=> e.currentTarget.select()}
                            InputProps={{
                                sx: {
                                    // width: {xs: "inherit", sm: "inherit"},
                                    height: {xs: 36, sm: 56},
                                    "& input" : {p: 0, textAlign: "center"}
                                }
                            }}
                            inputProps={{
                                maxLength: 1,
                                type: "number",
                            }}
                            {...other}
                        />
                    )}
                >

                </Controller>
            ))}
        </Stack>
    );
};

export default RHFOtpCodes;


Листинг А.66 – файл RHFTextField.js

import PropTypes from "prop-types";

//form
import {Controller, useFormContext} from "react-hook-form";

// @mui
import {TextField} from "@mui/material";

RHFTextField.prototype = {
  name: PropTypes.string,
  helpText: PropTypes.node,
};

export default function RHFTextField({name, helperText, ...other}){
  const {control } = useFormContext();
  return (
    <Controller
      name={name}
      control={control}
      render={({field, fieldState: {error}})=> (
      <TextField
        {...field}
        fullWidth
        value={
        typeof  field.value === "number" && field.value === 0
          ? ""
          : field.value
        }
        error={!!error}
        helperText={error ? error.message : helperText}
        {...other}/>
    )} />
  )
}


Листинг А.67 – файл ButtonContainer.js

import {Box} from "@mui/material";
import {useTheme} from "@mui/material/styles";

const ButtonContainer = ({children, bgColor}) => {
    const theme = useTheme();
    return (
        <>
            <Box sx={{
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                width: "100%",
                p: 0.5,
                borderRadius: 4,
                backgroundColor: bgColor ? bgColor : theme.palette.grey[100]
            }}>
                {children}

            </Box>
        </>
    );
};

export default ButtonContainer;


Листинг А.68 – файл HangUpButton.js

import ButtonContainer from "./ButtonContainer";
import {useTheme} from "@mui/material/styles";
import {useNavigate} from "react-router-dom";
import {PhoneDisconnect} from "phosphor-react";
import {IconButton} from "@mui/material";

const HangUpButton = () => {
    const theme = useTheme();
    const navigation = useNavigate();
    const handleHangup = () => {
        navigation("/intro");
    }
    return (
        <ButtonContainer bgColor={theme.palette.error.main}>
            <IconButton onClick={handleHangup} sx={{color: theme.palette.common.white}}>
                <PhoneDisconnect />
            </IconButton>
        </ButtonContainer>
    );
};

export default HangUpButton;


Листинг А.69 – файл index.js

import MicrophoneButton from "./MicrophoneButton";
import VideoButton from "./VideoButton";
import ShareScreenButton from "./ShareScreenButton";
import HangUpButton from "./HangUpButton";


export {
    MicrophoneButton,
    VideoButton,
    ShareScreenButton,
    HangUpButton
}


Листинг А.70 – файл MicrophoneButton.js

import ButtonContainer from "./ButtonContainer";
import {Microphone, MicrophoneSlash} from "phosphor-react";
import {IconButton} from "@mui/material";
import {useState} from "react";

const MicrophoneButton = () => {
    const [microphoneEnabled, setMicrophoneEnabled] = useState(false);
    const handleToggleMicrophone = () => {
        setMicrophoneEnabled(prev => !prev);
    }
    return (
        <ButtonContainer>
            <IconButton onClick={handleToggleMicrophone} sx={{color: "black"}}>
                {microphoneEnabled ? <Microphone/> : <MicrophoneSlash/>}
            </IconButton>
        </ButtonContainer>
    );
};

export default MicrophoneButton;


Листинг А.71 – файл ShareScreenButton.js

import ButtonContainer from "./ButtonContainer";
import {Monitor, StopCircle} from "phosphor-react";
import {IconButton} from "@mui/material";
import {useState} from "react";

const ShareScreenButton = () => {
    const [shareScreen, setShareScreen] = useState(false);
    const handleToggleShareScreen = () => {
        setShareScreen(prev => !prev);
    }
    return (
        <ButtonContainer>
            <IconButton onClick={handleToggleShareScreen} sx={{color: "black"}}>
                {!shareScreen ? <Monitor /> : <StopCircle />}
            </IconButton>
        </ButtonContainer>
    );
};

export default ShareScreenButton;


Листинг А.72 – файл VideoButton.js

import ButtonContainer from "./ButtonContainer";
import {VideoCamera, VideoCameraSlash} from "phosphor-react";
import {IconButton} from "@mui/material";
import {useState} from "react";

const VideoButton = () => {
    const [videoEnabled, setVideoEnabled] = useState(false);
    const handleToggleVideo = () => {
        setVideoEnabled(prev => !prev);
    }
    return (
        <ButtonContainer>
            <IconButton onClick={handleToggleVideo} sx={{color: "black"}}>
                {videoEnabled ? <VideoCamera /> : <VideoCameraSlash />}
            </IconButton>
        </ButtonContainer>
    );
};

export default VideoButton;


Листинг А.73 – файл index.js

export { default as Search } from "./Search";
export { default as SearchIconWrapper } from "./SearchIconWrapper";
export { default as StyledInputBase } from "./StyledInputBase";


Листинг А.74 – файл Search.js

import { styled, alpha } from "@mui/material/styles";

const Search = styled("div")(({ theme, bgColor }) => ({
  position: "relative",
  borderRadius: 20,
  backgroundColor: bgColor ? bgColor : alpha(theme.palette.background.paper, 1),
  marginRight: theme.spacing(2),
  marginLeft: 0,
  width: "100%",
}));

export default Search;


Листинг А.75 – файл SearchIconWrapper.js

import { styled } from "@mui/material/styles";

const SearchIconWrapper = styled("div")(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: "100%",
  position: "absolute",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
}));

export default SearchIconWrapper;


Листинг А.76 – файл StyledInputBase.js

import { InputBase } from "@mui/material";
import {styled} from "@mui/material/styles";


const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: "inherit",
  "& .MuiInputBase-input": {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    width: "100%",
  },
}));

export default StyledInputBase;


Листинг А.77 – файл index.js

import PropTypes from 'prop-types';
//
import SettingsDrawer from './drawer';
//
import ThemeContrast from './ThemeContrast';
import ThemeRtlLayout from './ThemeRtlLayout';
import ThemeColorPresets from './ThemeColorPresets';
import ThemeLocalization from './ThemeLocalization';

// ----------------------------------------------------------------------

ThemeSettings.propTypes = {
  children: PropTypes.node.isRequired,
};

export default function ThemeSettings({ children }) {
  return (
    <ThemeColorPresets>
      <ThemeContrast>
        <ThemeLocalization>
          <ThemeRtlLayout>
            {children}
            <SettingsDrawer />
          </ThemeRtlLayout>
        </ThemeLocalization>
      </ThemeContrast>
    </ThemeColorPresets>
  );
}


Листинг А.78 – файл ThemeColorPresets.js

import PropTypes from 'prop-types';
import { useMemo } from 'react';
// @mui
import { alpha, ThemeProvider, createTheme, useTheme } from '@mui/material/styles';
// hooks
import useSettings from '../../hooks/useSettings';
//
import componentsOverride from '../../theme/overrides';

// ----------------------------------------------------------------------

ThemeColorPresets.propTypes = {
  children: PropTypes.node,
};

export default function ThemeColorPresets({ children }) {
  const defaultTheme = useTheme();

  const { setColor } = useSettings();

  const themeOptions = useMemo(
    () => ({
      ...defaultTheme,
      palette: {
        ...defaultTheme.palette,
        primary: setColor,
      },
      customShadows: {
        ...defaultTheme.customShadows,
        primary: `0 8px 16px 0 ${alpha(setColor.main, 0.24)}`,
      },
    }),
    [setColor, defaultTheme]
  );

  const theme = createTheme(themeOptions);

  theme.components = componentsOverride(theme);

  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;
}


Листинг А.79 – файл ThemeContrast.js

import PropTypes from 'prop-types';
import { useMemo } from 'react';
// @mui
import { CssBaseline } from '@mui/material';
import { alpha, ThemeProvider, createTheme, useTheme } from '@mui/material/styles';
// hooks
import useSettings from '../../hooks/useSettings';
//
import componentsOverride from '../../theme/overrides';

// ----------------------------------------------------------------------

ThemeContrast.propTypes = {
  children: PropTypes.node,
};

export default function ThemeContrast({ children }) {
  const defaultTheme = useTheme();

  const { themeContrast } = useSettings();

  const isLight = defaultTheme.palette.mode === 'light';

  const shadowColor = isLight ? defaultTheme.palette.grey[500] : defaultTheme.palette.common.black;

  const styles = {
    bgDefault: defaultTheme.palette.background.default,
    bgBold: isLight ? defaultTheme.palette.grey[100] : defaultTheme.palette.grey[900],
    cardDefault: defaultTheme.components?.MuiCard?.styleOverrides?.root,
    cardBold: {
      zIndex: 0,
      position: 'relative',
      borderRadius: Number(defaultTheme.shape.borderRadius) * 2,
      boxShadow: `0 0 1px 0 ${alpha(shadowColor, 0.48)}, 0 2px 4px -1px ${alpha(shadowColor, 0.24)}`,
    },
  };

  const themeOptions = useMemo(
    () => ({
      ...defaultTheme,
      palette: {
        ...defaultTheme.palette,
        background: {
          ...defaultTheme.palette.background,
          default: themeContrast === 'bold' ? styles.bgBold : styles.bgDefault,
        },
      },
      components: {
        MuiCard: {
          styleOverrides: {
            root: themeContrast === 'bold' ? styles.cardBold : styles.cardDefault,
          },
        },
      },
    }),

    [defaultTheme, themeContrast, styles.bgBold, styles.bgDefault, styles.cardBold, styles.cardDefault]
  );

  const theme = createTheme(themeOptions);

  theme.components = {
    ...componentsOverride(theme),
    MuiCard: themeOptions.components?.MuiCard,
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      {children}
    </ThemeProvider>
  );
}


Листинг А.80 – файл ThemeLocalization.js

import PropTypes from 'prop-types';
// @mui
import { ThemeProvider, createTheme, useTheme } from '@mui/material/styles';
// hooks
import useLocales from '../../hooks/useLocales';

// ----------------------------------------------------------------------

ThemeLocalization.propTypes = {
  children: PropTypes.node.isRequired,
};

export default function ThemeLocalization({ children }) {
  const defaultTheme = useTheme();

  const { currentLang } = useLocales();

  const theme = createTheme(defaultTheme, currentLang.systemValue);

  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;
}


Листинг А.81 – файл ThemeRtlLayout.js

import PropTypes from 'prop-types';
import { useEffect } from 'react';
// rtl
import rtlPlugin from 'stylis-plugin-rtl';
// emotion
import createCache from '@emotion/cache';
import { CacheProvider } from '@emotion/react';
// @mui
import { useTheme } from '@mui/material/styles';

// ----------------------------------------------------------------------

ThemeRtlLayout.propTypes = {
  children: PropTypes.node,
};

export default function ThemeRtlLayout({ children }) {
  const theme = useTheme();

  useEffect(() => {
    document.dir = theme.direction;
  }, [theme.direction]);

  const cacheRtl = createCache({
    key: theme.direction === 'rtl' ? 'rtl' : 'css',
    stylisPlugins: theme.direction === 'rtl' ? [rtlPlugin] : [],
  });

  return <CacheProvider value={cacheRtl}>{children}</CacheProvider>;
}


Листинг А.82 – файл BoxMask.js

import PropTypes from 'prop-types';
// @mui
import { Radio, FormControlLabel } from '@mui/material';


BoxMask.propTypes = {
  value: PropTypes.string,
};

export default function BoxMask({ value }) {
  return (
    <FormControlLabel
      label=""
      value={value}
      control={<Radio sx={{ display: 'none' }} />}
      sx={{
        m: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        position: 'absolute',
      }}
    />
  );
}


Листинг А.83 – файл index.js

import { AnimatePresence, m } from "framer-motion";
import { useState, useEffect } from "react";
// @mui
import { alpha, styled } from "@mui/material/styles";
import {
  Stack,
  Divider,
  Backdrop,
  Typography,
  IconButton,
} from "@mui/material";
// hooks
import useSettings from "../../../hooks/useSettings";
// utils
import cssStyles from "../../../utils/cssStyles";
// config
import { NAVBAR, defaultSettings } from "../../../config";
//
import Iconify from "../../Iconify";
import Scrollbar from "../../Scrollbar";
//
import ToggleButton from "./ToggleButton";
import SettingDirection from "./SettingDirection";
import SettingFullscreen from "./SettingFullscreen";
import SettingColorPresets from "./SettingColorPresets";

// ----------------------------------------------------------------------

const RootStyle = styled(m.div)(({ theme }) => ({
  ...cssStyles(theme).bgBlur({
    color: theme.palette.background.paper,
    opacity: 0.92,
  }),
  top: 0,
  right: 0,
  bottom: 0,
  display: "flex",
  position: "fixed",
  overflow: "hidden",
  width: NAVBAR.BASE_WIDTH,
  flexDirection: "column",
  margin: theme.spacing(2),
  paddingBottom: theme.spacing(3),
  zIndex: theme.zIndex.drawer + 3,
  borderRadius: Number(theme.shape.borderRadius) * 1.5,
  boxShadow: `-24px 12px 32px -4px ${alpha(
    theme.palette.mode === "light"
      ? theme.palette.grey[500]
      : theme.palette.common.black,
    0.16
  )}`,
}));

// ----------------------------------------------------------------------

export default function SettingsDrawer() {
  const {
    themeMode,
    themeLayout,
    themeStretch,
    themeContrast,
    themeDirection,
    themeColorPresets,
    onResetSetting,
  } = useSettings();

  const [open, setOpen] = useState(false);

  const notDefault =
    themeMode !== defaultSettings.themeMode ||
    themeLayout !== defaultSettings.themeLayout ||
    themeStretch !== defaultSettings.themeStretch ||
    themeContrast !== defaultSettings.themeContrast ||
    themeDirection !== defaultSettings.themeDirection ||
    themeColorPresets !== defaultSettings.themeColorPresets;

  useEffect(() => {
    if (open) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
  }, [open]);

  const handleToggle = () => {
    setOpen((prev) => !prev);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Backdrop
        open={open}
        onClick={handleClose}
        sx={{
          background: "transparent",
          zIndex: (theme) => theme.zIndex.drawer + 1,
        }}
      />

      {!open && (
        <ToggleButton
          open={open}
          notDefault={notDefault}
          onToggle={handleToggle}
        />
      )}

      <AnimatePresence>
        {open && (
          <>
            <RootStyle>
              <Stack
                direction="row"
                alignItems="center"
                justifyContent="space-between"
                sx={{ py: 2, pr: 1, pl: 2.5 }}
              >
                <Typography variant="subtitle1" sx={{ flexGrow: 1 }}>
                  Settings
                </Typography>

                <IconButton onClick={onResetSetting}>
                  <Iconify icon={"ic:round-refresh"} width={20} height={20} />
                </IconButton>

                <IconButton onClick={handleClose}>
                  <Iconify icon={"eva:close-fill"} width={20} height={20} />
                </IconButton>
              </Stack>

              <Divider sx={{ borderStyle: "dashed" }} />

              <Scrollbar sx={{ flexGrow: 1 }}>
                <Stack spacing={3} sx={{ p: 3 }}>
                  <Stack spacing={1.5}>
                    <Typography variant="subtitle2">Direction</Typography>
                    <SettingDirection />
                  </Stack>

                  <Stack spacing={1.5}>
                    <Typography variant="subtitle2">Presets</Typography>
                    <SettingColorPresets />
                  </Stack>

                  <SettingFullscreen />
                </Stack>
              </Scrollbar>
            </RootStyle>
          </>
        )}
      </AnimatePresence>
    </>
  );
}


Листинг А.84 – файл SettingColorPresets.js

// @mui
import { alpha, styled } from '@mui/material/styles';
import { Box, Grid, RadioGroup, CardActionArea } from '@mui/material';
// hooks
import useSettings from '../../../hooks/useSettings';
//
import BoxMask from './BoxMask';

// ----------------------------------------------------------------------

const BoxStyle = styled(CardActionArea)(({ theme }) => ({
  height: 48,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  color: theme.palette.text.disabled,
  border: `solid 1px ${theme.palette.grey[500_12]}`,
  borderRadius: Number(theme.shape.borderRadius) * 1.25,
}));

// ----------------------------------------------------------------------

export default function SettingColorPresets() {
  const { themeColorPresets, onChangeColor, colorOption } = useSettings();

  return (
    <RadioGroup name="themeColorPresets" value={themeColorPresets} onChange={onChangeColor}>
      <Grid dir="ltr" container spacing={1.5}>
        {colorOption.map((color) => {
          const colorName = color.name;
          const colorValue = color.value;
          const isSelected = themeColorPresets === colorName;

          return (
            <Grid key={colorName} item xs={4}>
              <BoxStyle
                sx={{
                  ...(isSelected && {
                    bgcolor: alpha(colorValue, 0.08),
                    border: `solid 2px ${colorValue}`,
                    boxShadow: `inset 0 4px 8px 0 ${alpha(colorValue, 0.24)}`,
                  }),
                }}
              >
                <Box
                  sx={{
                    width: 24,
                    height: 14,
                    borderRadius: '50%',
                    bgcolor: colorValue,
                    transform: 'rotate(-45deg)',
                    transition: (theme) =>
                      theme.transitions.create('all', {
                        easing: theme.transitions.easing.easeInOut,
                        duration: theme.transitions.duration.shorter,
                      }),
                    ...(isSelected && { transform: 'none' }),
                  }}
                />

                <BoxMask value={colorName} />
              </BoxStyle>
            </Grid>
          );
        })}
      </Grid>
    </RadioGroup>
  );
}


Листинг А.85 – файл SettingContrast.js

// @mui
import { styled } from '@mui/material/styles';
import { Grid, RadioGroup, CardActionArea } from '@mui/material';
// hooks
import useSettings from '../../../hooks/useSettings';
//
import Iconify from '../../Iconify';
import BoxMask from './BoxMask';

// ----------------------------------------------------------------------

const BoxStyle = styled(CardActionArea)(({ theme }) => ({
  height: 72,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  color: theme.palette.text.disabled,
  border: `solid 1px ${theme.palette.grey[500_12]}`,
  borderRadius: Number(theme.shape.borderRadius) * 1.25,
}));

// ----------------------------------------------------------------------

export default function SettingContrast() {
  const { themeContrast, onChangeContrast } = useSettings();

  return (
    <RadioGroup name="themeContrast" value={themeContrast} onChange={onChangeContrast}>
      <Grid dir="ltr" container spacing={2.5}>
        {['default', 'bold'].map((contrast, index) => {
          const isSelected = themeContrast === contrast;

          return (
            <Grid key={contrast} item xs={6}>
              <BoxStyle
                sx={{
                  ...(isSelected && {
                    color: 'primary.main',
                    boxShadow: (theme) => theme.customShadows.z20,
                  }),
                }}
              >
                <Iconify icon={index === 0 ? 'cil:contrast' : 'ion:contrast-outline'} width={28} height={28} />
                <BoxMask value={contrast} />
              </BoxStyle>
            </Grid>
          );
        })}
      </Grid>
    </RadioGroup>
  );
}


Листинг А.86 – файл SettingDirection.js

// @mui
import { styled } from '@mui/material/styles';
import { Grid, RadioGroup, CardActionArea } from '@mui/material';
// hooks
import useSettings from '../../../hooks/useSettings';
//
import Iconify from '../../Iconify';
import BoxMask from './BoxMask';

// ----------------------------------------------------------------------

const BoxStyle = styled(CardActionArea)(({ theme }) => ({
  height: 72,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  color: theme.palette.text.disabled,
  border: `solid 1px ${theme.palette.grey[500_12]}`,
  borderRadius: Number(theme.shape.borderRadius) * 1.25,
}));

// ----------------------------------------------------------------------

export default function SettingDirection() {
  const { themeDirection, onChangeDirection } = useSettings();

  return (
    <RadioGroup name="themeDirection" value={themeDirection} onChange={onChangeDirection}>
      <Grid dir="ltr" container spacing={2.5}>
        {['ltr', 'rtl'].map((direction, index) => {
          const isSelected = themeDirection === direction;

          return (
            <Grid key={direction} item xs={6}>
              <BoxStyle
                sx={{
                  ...(isSelected && {
                    color: 'primary.main',
                    boxShadow: (theme) => theme.customShadows.z20,
                  }),
                }}
              >
                <Iconify
                  icon={index === 0 ? 'ph:align-left-duotone' : 'ph:align-right-duotone'}
                  width={28}
                  height={28}
                />
                <BoxMask value={direction} />
              </BoxStyle>
            </Grid>
          );
        })}
      </Grid>
    </RadioGroup>
  );
}


Листинг А.87 – файл SettingFullscreen.js

import { useState } from 'react';
// @mui
import { alpha } from '@mui/material/styles';
import { Button } from '@mui/material';
//
import Iconify from '../../Iconify';

// ----------------------------------------------------------------------

export default function SettingFullscreen() {
  const [fullscreen, setFullscreen] = useState(false);

  const toggleFullScreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
      setFullscreen(true);
    } else if (document.exitFullscreen) {
      document.exitFullscreen();
      setFullscreen(false);
    }
  };

  return (
    <Button
      fullWidth
      size="large"
      variant="outlined"
      color={fullscreen ? 'primary' : 'inherit'}
      startIcon={<Iconify icon={fullscreen ? 'ic:round-fullscreen-exit' : 'ic:round-fullscreen'} />}
      onClick={toggleFullScreen}
      sx={{
        fontSize: 14,
        ...(fullscreen && {
          bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        }),
      }}
    >
      {fullscreen ? 'Exit Fullscreen' : 'Fullscreen'}
    </Button>
  );
}


Листинг А.88 – файл SettingLayout.js

import PropTypes from 'prop-types';
// @mui
import { styled, alpha } from '@mui/material/styles';
import { Grid, RadioGroup, CardActionArea, Box, Stack } from '@mui/material';
// hooks
import useSettings from '../../../hooks/useSettings';
//
import BoxMask from './BoxMask';

// ----------------------------------------------------------------------

const BoxStyle = styled(CardActionArea)(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  padding: theme.spacing(1.5),
  color: theme.palette.text.disabled,
  border: `solid 1px ${theme.palette.grey[500_12]}`,
  borderRadius: Number(theme.shape.borderRadius) * 1.25,
}));

// ----------------------------------------------------------------------

export default function SettingLayout() {
  const { themeLayout, onChangeLayout } = useSettings();

  return (
    <RadioGroup name="themeLayout" value={themeLayout} onChange={onChangeLayout}>
      <Grid dir="ltr" container spacing={2.5}>
        {['horizontal', 'vertical'].map((layout) => {
          const isSelected = themeLayout === layout;
          const isVertical = layout === 'vertical';

          return (
            <Grid key={layout} item xs={6}>
              <BoxStyle
                sx={{
                  ...(isSelected && {
                    color: 'primary.main',
                    boxShadow: (theme) => theme.customShadows.z20,
                  }),
                }}
              >
                {isVertical ? <VerticalBox isSelected={isSelected} /> : <HorizontalBox isSelected={isSelected} />}
                <BoxMask value={layout} />
              </BoxStyle>
            </Grid>
          );
        })}
      </Grid>
    </RadioGroup>
  );
}

// ----------------------------------------------------------------------

VerticalBox.propTypes = {
  isSelected: PropTypes.bool,
};

const style = {
  width: 1,
  height: 32,
  borderRadius: 0.5,
};

function VerticalBox({ isSelected }) {
  return (
    <>
      <Box
        sx={{
          ...style,
          mb: 0.75,
          height: 12,
          bgcolor: (theme) => alpha(theme.palette.text.disabled, 0.72),
          ...(isSelected && {
            bgcolor: (theme) => alpha(theme.palette.primary.main, 0.72),
          }),
        }}
      />
      <Box
        sx={{
          ...style,
          border: (theme) => `dashed 1px ${theme.palette.divider}`,
          bgcolor: (theme) => alpha(theme.palette.text.disabled, 0.08),
          ...(isSelected && {
            border: (theme) => `dashed 1px ${theme.palette.primary.main}`,
            bgcolor: (theme) => alpha(theme.palette.primary.main, 0.16),
          }),
        }}
      />
    </>
  );
}

HorizontalBox.propTypes = {
  isSelected: PropTypes.bool,
};

function HorizontalBox({ isSelected }) {
  return (
    <>
      <Box
        sx={{
          ...style,
          mb: 0.75,
          height: 12,
          bgcolor: (theme) => alpha(theme.palette.text.disabled, 0.72),
          ...(isSelected && {
            bgcolor: (theme) => alpha(theme.palette.primary.main, 0.72),
          }),
        }}
      />
      <Stack width={1} direction="row" justifyContent="space-between">
        <Box
          sx={{
            ...style,
            width: 20,
            bgcolor: (theme) => alpha(theme.palette.text.disabled, 0.32),
            ...(isSelected && {
              bgcolor: (theme) => alpha(theme.palette.primary.main, 0.32),
            }),
          }}
        />
        <Box
          sx={{
            ...style,
            width: `calc(100% - 26px)`,
            border: (theme) => `dashed 1px ${theme.palette.divider}`,
            bgcolor: (theme) => alpha(theme.palette.text.disabled, 0.08),
            ...(isSelected && {
              border: (theme) => `dashed 1px ${theme.palette.primary.main}`,
              bgcolor: (theme) => alpha(theme.palette.primary.main, 0.16),
            }),
          }}
        />
      </Stack>
    </>
  );
}


Листинг А.89 – файл SettingMode.js

// @mui
import { styled } from '@mui/material/styles';
import { Grid, RadioGroup, CardActionArea } from '@mui/material';
// hooks
import useSettings from '../../../hooks/useSettings';
//
import Iconify from '../../Iconify';
import BoxMask from './BoxMask';

// ----------------------------------------------------------------------

const BoxStyle = styled(CardActionArea)(({ theme }) => ({
  height: 72,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  color: theme.palette.text.disabled,
  border: `solid 1px ${theme.palette.grey[500_12]}`,
  borderRadius: Number(theme.shape.borderRadius) * 1.25,
}));

// ----------------------------------------------------------------------

export default function SettingMode() {
  const { themeMode, onChangeMode } = useSettings();

  return (
    <RadioGroup name="themeMode" value={themeMode} onChange={onChangeMode}>
      <Grid dir="ltr" container spacing={2.5}>
        {['light', 'dark'].map((mode, index) => {
          const isSelected = themeMode === mode;

          return (
            <Grid key={mode} item xs={6}>
              <BoxStyle
                sx={{
                  bgcolor: mode === 'light' ? 'common.white' : 'grey.800',
                  ...(isSelected && {
                    color: 'primary.main',
                    boxShadow: (theme) => theme.customShadows.z20,
                  }),
                }}
              >
                <Iconify icon={index === 0 ? 'ph:sun-duotone' : 'ph:moon-duotone'} width={28} height={28} />
                <BoxMask value={mode} />
              </BoxStyle>
            </Grid>
          );
        })}
      </Grid>
    </RadioGroup>
  );
}


Листинг А.90 – файл SettingStretch.js

// @mui
import { styled } from '@mui/material/styles';
import { CardActionArea, Stack } from '@mui/material';
// hooks
import useSettings from '../../../hooks/useSettings';
//
import Iconify from '../../Iconify';

// ----------------------------------------------------------------------

const BoxStyle = styled(CardActionArea)(({ theme }) => ({
  padding: theme.spacing(2),
  color: theme.palette.text.disabled,
  border: `solid 1px ${theme.palette.grey[500_12]}`,
  backgroundColor: theme.palette.background.neutral,
  borderRadius: Number(theme.shape.borderRadius) * 1.25,
}));

// ----------------------------------------------------------------------

export default function SettingStretch() {
  const { themeStretch, onToggleStretch } = useSettings();

  const ICON_SIZE = {
    width: themeStretch ? 24 : 18,
    height: themeStretch ? 24 : 18,
  };

  return (
    <BoxStyle
      onClick={onToggleStretch}
      sx={{
        ...(themeStretch && {
          color: (theme) => theme.palette.primary.main,
        }),
      }}
    >
      <Stack
        direction="row"
        alignItems="center"
        justifyContent="space-between"
        sx={{
          px: 1,
          mx: 'auto',
          width: 0.5,
          height: 40,
          borderRadius: 1,
          color: 'action.active',
          bgcolor: 'background.default',
          boxShadow: (theme) => theme.customShadows.z12,
          transition: (theme) => theme.transitions.create('width'),
          ...(themeStretch && {
            width: 1,
            color: 'primary.main',
          }),
        }}
      >
        <Iconify icon={themeStretch ? 'eva:arrow-ios-back-fill' : 'eva:arrow-ios-forward-fill'} {...ICON_SIZE} />
        <Iconify icon={themeStretch ? 'eva:arrow-ios-forward-fill' : 'eva:arrow-ios-back-fill'} {...ICON_SIZE} />
      </Stack>
    </BoxStyle>
  );
}


Листинг А.91 – файл ToggleButton.js

import PropTypes from 'prop-types';
// @mui
import { alpha, styled } from '@mui/material/styles';
import { Tooltip } from '@mui/material';
// utils
import cssStyles from '../../../utils/cssStyles';
//
import Iconify from '../../Iconify';
import { IconButtonAnimate } from '../../animate';

// ----------------------------------------------------------------------

const RootStyle = styled('span')(({ theme }) => ({
  ...cssStyles(theme).bgBlur({ opacity: 0.64 }),
  right: 0,
  top: '50%',
  position: 'fixed',
  marginTop: theme.spacing(-3),
  padding: theme.spacing(0.5),
  zIndex: theme.zIndex.drawer + 2,
  borderRadius: '24px 0 20px 24px',
  boxShadow: `-12px 12px 32px -4px ${alpha(
    theme.palette.mode === 'light' ? theme.palette.grey[600] : theme.palette.common.black,
    0.36
  )}`,
}));

const DotStyle = styled('span')(({ theme }) => ({
  top: 8,
  width: 8,
  height: 8,
  right: 10,
  borderRadius: '50%',
  position: 'absolute',
  backgroundColor: theme.palette.error.main,
}));

// ----------------------------------------------------------------------

ToggleButton.propTypes = {
  notDefault: PropTypes.bool,
  onToggle: PropTypes.func,
  open: PropTypes.bool,
};

export default function ToggleButton({ notDefault, open, onToggle }) {
  return (
    <RootStyle>
      {notDefault && !open && <DotStyle />}

      <Tooltip title="Settings" placement="left">
        <IconButtonAnimate
          color="inherit"
          onClick={onToggle}
          sx={{
            p: 1.25,
            transition: (theme) => theme.transitions.create('all'),
            '&:hover': {
              color: 'primary.main',
              bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            },
          }}
        >
          <Iconify icon="eva:options-2-fill" width={20} height={20} />
        </IconButtonAnimate>
      </Tooltip>
    </RootStyle>
  );
}


Листинг А.92 – файл SettingsContext.js

// provider === component
import { createContext, useEffect } from "react";
import { defaultSettings } from "../config";
import useLocalStorage from "../hooks/useLocalStorage";
import getColorPresets, {
  defaultPreset,
  colorPresets,
} from "../utils/getColorPresets";

const initialState = {
  ...defaultSettings,

  // Mode
  onToggleMode: () => {},
  onChangeMode: () => {},

  // Direction
  onToggleDirection: () => {},
  onChangeDirection: () => {},
  onChangeDirectionByLang: () => {},

  // Layout
  onToggleLayout: () => {},
  onChangeLayout: () => {},

  // Contrast
  onToggleContrast: () => {},
  onChangeContrast: () => {},

  // Color
  onChangeColor: () => {},
  setColor: defaultPreset,
  colorOption: [],

  // Stretch
  onToggleStretch: () => {},

  // Reset
  onResetSetting: () => {},
};

const SettingsContext = createContext(initialState);

const SettingsProvider = ({ children }) => {
  const [settings, setSettings] = useLocalStorage("settings", {
    themeMode: initialState.themeMode,
    themeLayout: initialState.themeLayout,
    themeStretch: initialState.themeStretch,
    themeContrast: initialState.themeContrast,
    themeDirection: initialState.themeDirection,
    themeColorPresets: initialState.themeColorPresets,
  });

  const isArabic = localStorage.getItem("i18nextLng") === "ar";

  useEffect(() => {
    if (isArabic) {
      onChangeDirectionByLang("ar");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isArabic]);

  // Mode

  const onToggleMode = () => {
    setSettings({
      ...settings,
      themeMode: settings.themeMode === "light" ? "dark" : "light",
    });
  };

  const onChangeMode = (event) => {
    setSettings({
      ...settings,
      themeMode: event.target.value,
    });
  };

  // Direction

  const onToggleDirection = () => {
    setSettings({
      ...settings,
      themeDirection: settings.themeDirection === "rtl" ? "ltr" : "rtl",
    });
  };

  const onChangeDirection = (event) => {
    setSettings({
      ...settings,
      themeDirection: event.target.value,
    });
  };

  const onChangeDirectionByLang = (lang) => {
    setSettings({
      ...settings,
      themeDirection: lang === "ar" ? "rtl" : "ltr",
    });
  };

  // Layout

  const onToggleLayout = () => {
    setSettings({
      ...settings,
      themeLayout:
        settings.themeLayout === "vertical" ? "horizontal" : "vertical",
    });
  };

  const onChangeLayout = (event) => {
    setSettings({
      ...settings,
      themeLayout: event.target.value,
    });
  };

  // Contrast

  const onToggleContrast = () => {
    setSettings({
      ...settings,
      themeContrast: settings.themeContrast === "default" ? "bold" : "default",
    });
  };

  const onChangeContrast = (event) => {
    setSettings({
      ...settings,
      themeContrast: event.target.value,
    });
  };

  // Color

  const onChangeColor = (event) => {
    setSettings({
      ...settings,
      themeColorPresets: event.target.value,
    });
  };

  // Stretch

  const onToggleStretch = () => {
    setSettings({
      ...settings,
      themeStretch: !settings.themeStretch,
    });
  };

  // Reset

  const onResetSetting = () => {
    setSettings({
      themeMode: initialState.themeMode,
      themeLayout: initialState.themeLayout,
      themeStretch: initialState.themeStretch,
      themeContrast: initialState.themeContrast,
      themeDirection: initialState.themeDirection,
      themeColorPresets: initialState.themeColorPresets,
    });
  };

  return (
    <SettingsContext.Provider
      value={{
        ...settings, // Mode
        onToggleMode,
        onChangeMode,

        // Direction
        onToggleDirection,
        onChangeDirection,
        onChangeDirectionByLang,

        // Layout
        onToggleLayout,
        onChangeLayout,

        // Contrast
        onChangeContrast,
        onToggleContrast,

        // Stretch
        onToggleStretch,

        // Color
        onChangeColor,
        setColor: getColorPresets(settings.themeColorPresets),
        colorOption: colorPresets.map((color) => ({
          name: color.name,
          value: color.main,
        })),

        // Reset
        onResetSetting,
      }}
    >
      {children}
    </SettingsContext.Provider>
  );
};

export {SettingsContext};

export default SettingsProvider;


Листинг А.93 – файл useLocales.js

import { useTranslation } from 'react-i18next';
import useSettings from './useSettings';
// config
import { allLangs, defaultLang } from '../config';

// ----------------------------------------------------------------------

export default function useLocales() {
  const { i18n, t: translate } = useTranslation();

  const { onChangeDirectionByLang } = useSettings();

  const langStorage = localStorage.getItem('i18nextLng');

  const currentLang = allLangs.find((_lang) => _lang.value === langStorage) || defaultLang;

  const handleChangeLanguage = (newlang) => {
    i18n.changeLanguage(newlang);
    onChangeDirectionByLang(newlang);
  };

  return {
    onChangeLang: handleChangeLanguage,
    translate: (text, options) => translate(text, options),
    currentLang,
    allLangs,
  };
}


Листинг А.94 – файл useLocalStorage.js

import { useState, useEffect } from 'react';

export default function useLocalStorage(key, defaultValue) {
  const [value, setValue] = useState(() => {
    const storedValue = localStorage.getItem(key);

    return storedValue === null ? defaultValue : JSON.parse(storedValue);
  });

  useEffect(() => {
    const listener = (e) => {
      if (e.storageArea === localStorage && e.key === key) {
        setValue(JSON.parse(e.newValue));
      }
    };
    window.addEventListener('storage', listener);

    return () => {
      window.removeEventListener('storage', listener);
    };
  }, [key, defaultValue]);

  const setValueInLocalStorage = (newValue) => {
    setValue((currentValue) => {
      const result = typeof newValue === 'function' ? newValue(currentValue) : newValue;

      localStorage.setItem(key, JSON.stringify(result));

      return result;
    });
  };

  return [value, setValueInLocalStorage];
}


Листинг А.95 – файл useResponsive.js

// @mui
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';

export default function useResponsive(query, key, start, end) {
  const theme = useTheme();

  const mediaUp = useMediaQuery(theme.breakpoints.up(key));

  const mediaDown = useMediaQuery(theme.breakpoints.down(key));

  const mediaBetween = useMediaQuery(theme.breakpoints.between(start, end));

  const mediaOnly = useMediaQuery(theme.breakpoints.only(key));

  if (query === 'up') {
    return mediaUp;
  }

  if (query === 'down') {
    return mediaDown;
  }

  if (query === 'between') {
    return mediaBetween;
  }

  if (query === 'only') {
    return mediaOnly;
  }
  return null;
}


Листинг А.96 – файл useSettings.js

import { useContext } from 'react';
import {SettingsContext} from '../contexts/SettingsContext';

// ----------------------------------------------------------------------

const useSettings = () => useContext(SettingsContext);

export default useSettings;


Листинг А.97 – файл BottonNav.js

import React from "react";
import { useTheme } from "@mui/material/styles";
import { Box, IconButton, Stack } from "@mui/material";
import ProfileMenu from "./ProfileMenu";
import {Nav_Buttons} from "../../_data";


const BottomNav = () => {
    const theme = useTheme();

    const [selectedTab, setSelectedTab] = React.useState(0);

    const handleChangeTab = (index) => {
        setSelectedTab(index);
    };

    return (
        <Box
            sx={{
                zIndex: 10,
                position: "absolute",
                bottom: 0,
                width: "100vw",

                backgroundColor: theme.palette.background.paper,
                boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.25)",
            }}
        >
            <Stack
                sx={{ width: "100%" }}
                direction="row"
                alignItems={"center"}
                justifyContent="space-between"
                spacing={2}
                p={2}
            >
                {Nav_Buttons.map((el) => {
                    return el.index === selectedTab ? (
                        <Box sx={{ backgroundColor: theme.palette.primary.main, borderRadius: 1.5 }} p={1}>
                            <IconButton sx={{ width: "max-content", color: "#ffffff" }}>
                                {el.icon}
                            </IconButton>
                        </Box>
                    ) : (
                        <IconButton
                            onClick={() => {
                                handleChangeTab(el.index);
                            }}
                            sx={{
                                width: "max-content",
                                color:
                                    theme.palette.mode === "light"
                                        ? "#080707"
                                        : theme.palette.text.primary,
                            }}
                        >
                            {el.icon}
                        </IconButton>
                    );
                })}
                <ProfileMenu />
            </Stack>
        </Box>
    );
};

export default BottomNav;


Листинг А.98 – файл index.js

import React, {useEffect} from "react";
import {Navigate, Outlet} from "react-router-dom";
import {Box, Stack} from "@mui/material";
import SideBar from "./SideBar";
import {useDispatch, useSelector} from "react-redux";
import {connectSocket, socket} from "../../socket";
import {AddDirectConversation, UpdateDirectConversation} from "../../redux/slices/conversationSlice";
import {SelectConversation} from "../../redux/slices/appSlice";

const DashboardLayout = () => {
    const {isLoggedIn, token} = useSelector(store => store.auth);
    const dispatch = useDispatch();
    const { conversations, current_conversation } = useSelector(
        (state) => state.conversation.direct_chat
    );

    // const {id} = useSelector(store => store.auth.user);

    useEffect(() => {
        window.onload = function () {
            if (!window.location.hash) {
                window.location = window.location + '#loaded';
                window.location.reload();
            }
        }

        if (!socket){
            connectSocket(token);
        }

        socket.on("start_chat", (data) => {
            console.log(data);
            // add / update to conversation list
            const existing_conversation = conversations.find(
                (el) => el?.id === data._id
            );
            if (existing_conversation) {
                // update direct conversation
                dispatch(UpdateDirectConversation({ conversation: data }));
            } else {
                // add direct conversation
                dispatch(AddDirectConversation({ conversation: data }));
            }
            dispatch(SelectConversation({ room_id: data._id }));
        });

        return () =>{
            socket?.off("start_chat")
        }

    }, [isLoggedIn]);

    if (!isLoggedIn) {
        return <Navigate to={"/landing"}/>
    }
    return (
        <>
            <Stack
                direction="row"
            >
                {/*sidebar*/}
                <SideBar/>
                <Box>
                    <Outlet/>
                </Box>
            </Stack>
        </>
    );
};

export default DashboardLayout;


Листинг А.99 – файл ProfileMenu.js

import React from "react";
import { Avatar, Box, Fade, Menu, MenuItem, Stack } from "@mui/material";


import { Profile_Menu } from "../../_data";
import { useDispatch, useSelector } from "react-redux";
import { socket } from "../../socket";
import { useNavigate } from "react-router-dom";
import {logoutUser} from "../../redux/slices/authSlice";

const ProfileMenu = () => {
    const {user} = useSelector((state) => state.app);
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [anchorEl, setAnchorEl] = React.useState(null);
    const openMenu = Boolean(anchorEl);
    const handleClick = (event) => {
        setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
        setAnchorEl(null);
    };

    const user_id = window.localStorage.getItem("user_id");

    const user_name = user?.firstName;

    return (
        <>
            <Avatar
                id="profile-positioned-button"
                aria-controls={openMenu ? "profile-positioned-menu" : undefined}
                aria-haspopup="true"
                aria-expanded={openMenu ? "true" : undefined}
                alt={user_name}
                src={user?.image}
                onClick={handleClick}
            />
            <Menu
                MenuListProps={{
                    "aria-labelledby": "fade-button",
                }}
                TransitionComponent={Fade}
                id="profile-positioned-menu"
                aria-labelledby="profile-positioned-button"
                anchorEl={anchorEl}
                open={openMenu}
                onClose={handleClose}
                anchorOrigin={{
                    vertical: "bottom",
                    horizontal: "right",
                }}
                transformOrigin={{
                    vertical: "bottom",
                    horizontal: "left",
                }}
            >
                <Box p={1}>
                    <Stack spacing={1}>
                        {Profile_Menu.map((el, idx) => (
                            <MenuItem onClick={handleClose}>
                                <Stack
                                    onClick={() => {
                                        if(idx === 0) {
                                            navigate("/profile");
                                        }
                                        else if(idx === 1) {
                                            navigate("/settings");
                                        }
                                        else {
                                            dispatch(logoutUser());
                                            socket.emit("end", {user_id});
                                        }
                                    }}
                                    sx={{ width: 100 }}
                                    direction="row"
                                    alignItems={"center"}
                                    justifyContent="space-between"
                                >
                                    <span>{el.title}</span>
                                    {el.icon}
                                </Stack>{" "}
                            </MenuItem>
                        ))}
                    </Stack>
                </Box>
            </Menu>
        </>
    );
};

export default ProfileMenu;


Листинг А.100 – файл SideBar.js

import React from 'react';
import {Avatar, Box, Divider, IconButton, Menu, MenuItem, Stack} from "@mui/material";
import Logo from "../../assets/Images/logo.ico";
import {Nav_Buttons, Profile_Menu} from "../../_data";
import {Gear} from "phosphor-react";
import AntSwitch from "../../components/AntSwitch";
import {useDispatch, useSelector} from "react-redux";
import {UpdateSidebarLink} from "../../redux/slices/appSlice";
import {faker} from "@faker-js/faker";
import {useTheme} from "@mui/material/styles";
import useSettings from "../../hooks/useSettings";
import {useNavigate} from "react-router-dom";
import {logoutUser} from "../../redux/slices/authSlice";

const getPath = (index) => {
    switch (index) {
        case 0:
            return "/app";
        case 1:
            return "/group";
        case 2:
            return "/call";
        case 3:
            return "/settings";
        case 4:
            return "/intro";
        default:
            break;
    }
}

const getMenuPath = (index) => {
    switch (index) {
        case 0:
            return "/profile";
        case 1:
            return "/settings";
        case 2:
            return "/auth/login";
        case 4:
            return "/intro";
        default:
            break;
    }
}

const dispatchAvatarOptionsIndex = (index) => {
    switch (index) {
        case 2:
            return 0;
        default:
            return 3;
    }
}

const SideBar = () => {
    const theme = useTheme();
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const {sidebar} = useSelector((store) => store.app);
    const {user} = useSelector((store) => store.auth);

    const linkIndex = sidebar.linkSelected;
    // console.log(linkIndex, "selected link index")

    const [anchorEl, setAnchorEl] = React.useState(null);
    const open = Boolean(anchorEl);
    const handleClick = (event) => {
        setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
        setAnchorEl(null);
    };

    const {onToggleMode} = useSettings();

    return (
        <>
            <Box
                p={2}
                sx={{
                    backgroundColor: theme.palette.background.paper,
                    boxShadow: theme.palette.primary.shadow,
                    height: "100vh",
                    width: 100
                }}>
                <Stack
                    direction="column"
                    alignItems="center"
                    justifyContent="space-between"
                    sx={{width: "100%", height: "100%"}}
                >
                    <Stack alignItems={"center"} spacing={4}>
                        <Box
                            p={1}
                            sx={{
                                backgroundColor: theme.palette.primary.lighter,
                                height: 64,
                                width: 64,
                                borderRadius: 1.5,
                            }}
                        >
                            <img src={Logo} alt="Logo"/>
                        </Box>
                        <Stack
                            spacing={3}
                            direction="column"
                            alignItems="center"
                            sx={{width: "max-content"}}
                        >
                            {Nav_Buttons.map((item) => (
                                item.index === linkIndex ?
                                    <Box key={item.index}
                                         sx={{backgroundColor: theme.palette.primary.main, borderRadius: 1.5}}>
                                        <IconButton
                                            // onClick={() => navigate(getPath(item.index))}
                                            sx={{width: "max-content", color: "#fff"}}>{item.icon}</IconButton>
                                    </Box>
                                    :
                                    <IconButton
                                        onClick={() => {
                                            dispatch(UpdateSidebarLink({linkSelected: item.index}));
                                            navigate(getPath(item.index));
                                        }}
                                        sx={{width: "max-content"}} key={item.index}
                                    >
                                        {item.icon}
                                    </IconButton>
                            ))}
                            <Divider sx={{width: "48px"}}/>
                            {
                                linkIndex === 3 ?
                                    <Box sx={{backgroundColor: theme.palette.primary.main, borderRadius: 1.5}}>
                                        <IconButton
                                            sx={{width: "max-content", color: "#fff"}}
                                        >
                                            <Gear/>
                                        </IconButton>
                                    </Box>
                                    :
                                    <IconButton
                                        onClick={() => {
                                            dispatch(UpdateSidebarLink({linkSelected: 3}));
                                            navigate(getPath(3))
                                        }}
                                    >
                                        <Gear/>
                                    </IconButton>
                            }

                        </Stack>
                    </Stack>
                    <Stack
                        direction={"column"}
                        spacing={4}
                    >
                        <AntSwitch
                            onChange={() => onToggleMode()}
                        />
                        <Avatar
                            id="profile-options"
                            aria-controls={open ? 'basic-menu' : undefined}
                            aria-haspopup="true"
                            aria-expanded={open ? 'true' : undefined}
                            onClick={handleClick}
                            src={user.image}
                        />
                        <Menu
                            id="basic-menu"
                            anchorEl={anchorEl}
                            open={open}
                            onClose={handleClose}
                            MenuListProps={{
                                'aria-labelledby': 'profile-options',
                            }}
                            anchorOrigin={{
                                vertical: 'bottom',
                                horizontal: 'right'
                            }}
                            transformOrigin={{
                                vertical: 'bottom',
                                horizontal: 'left'
                            }}
                        >
                            <Stack spacing={1} px={1}>
                                {Profile_Menu.map((item, index) => (
                                    <MenuItem onClick={() => {
                                        handleClose();
                                        navigate(getMenuPath(index))
                                        dispatch(UpdateSidebarLink({linkSelected: dispatchAvatarOptionsIndex(index)}));
                                        if (index === 2) {
                                            dispatch(logoutUser())
                                        }
                                    }}>
                                        <Stack
                                            direction={"row"} sx={{width: 100}}
                                            alignItems={"center"}
                                            justifyContent={"space-between"}
                                        >
                                            <span>{item.title}</span>
                                            {item.icon}
                                        </Stack>
                                    </MenuItem>
                                ))}
                            </Stack>
                        </Menu>
                    </Stack>
                </Stack>
            </Box>
        </>
    );
};

export default SideBar;


Листинг А.101 – файл index.js

import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import { Container } from "@mui/material";
import { useSelector } from "react-redux";

const MainLayout = () => {
    const { isLoggedIn } = useSelector((store) => store.auth);
    if (isLoggedIn) {
        return <Navigate to={"/app"} />;
    }
    return (
        <Container sx={{ mt: 5 }}>
            <Outlet />
        </Container>
    );
};

export default MainLayout;


Листинг А.102 – файл LandingPage.js

import React from 'react';
import {Box, Button, Container, Link, Stack, Typography} from "@mui/material";
import { Link as RouterLink } from 'react-router-dom';


import Logo from '../assets/Images/logo512.png';
import bg from '../assets/Images/landingRight_bg.png';
import useResponsive from "../hooks/useResponsive";

const LandingPage = () => {
  const isDesktop = useResponsive("up", "md");
  // console.log(isDesktop)

  return (
    <Container sx={{mt:4, width: "100vw", maxHeight: "100vh", overflow: "hidden"}} >
      <Box>
        <Stack sx={{}} direction={"row"} alignItems={"center"} spacing={1}>
          <img src={Logo} style={{width: 50}} alt="Logo"/>
          <Typography variant={"h3"} color={"#3B34E0"}>Tech</Typography>
        </Stack>
        <Stack sx={{mt:4}} spacing={5} direction={isDesktop ? "row" : "column"} >
            {/*left side */}
            <Stack pt={16} sx={{width: isDesktop ? "40%" : "100%"}} spacing={2} alignItems={isDesktop ? "" : "center"}>
              <Typography variant={isDesktop ? "h2" : "h1"} color={"#407BFF"}>Instant Connect</Typography>
              <Typography variant={isDesktop ? "h4" : "h5"}>Seamless chat for teams on the go.</Typography>
              <Stack sx={{backgroundColor:"#407BFF",width: "max-content", borderRadius: 1}}>
                <Button size={"large"} variant={"contained"}>
                  <Link to={"/auth/login"} component={RouterLink} underline={"none"} color={"inherit"}>Login/Signup</Link>
                </Button>
              </Stack>
            </Stack>
            {/*right side*/}
          {isDesktop &&
            <Stack sx={{width: "60%"}}>
              <img src={bg} style={{objectFit: "fill"}} height={"75%"} alt="bg right"/>
            </Stack>
          }
        </Stack>
      </Box>
    </Container>
  );
};

export default LandingPage;


Листинг А.103 – файл Page404.js

import React from "react";

const Page404 = () => {
  return <>404</>;
};


export default Page404;


Листинг А.104 – файл Login.js

import React, {useState} from 'react';
import {Grid, Link, Stack, Typography} from "@mui/material";
import {Link as RouterLink, useNavigate} from 'react-router-dom';

import img_left from "../../assets/Images/login_left_img.png";
import LoginForm from "../../sections/auth/LoginForm";
import useResponsive from "../../hooks/useResponsive";
import DialogContainer from "../../components/dialog/DialogContainer";
import CLoseDialogIcon from "../../components/CLoseDialogIcon";

const Login = () => {
  const [openLoginDialog, setOpenLoginDialog] = useState(true);
  const navigate = useNavigate();
  const isDesktop = useResponsive("up", "md");

  const handleCloseLoginDialog = () =>{
    setOpenLoginDialog(false);
    navigate("/landing");
  }

  return (
    <DialogContainer
      openDialog={openLoginDialog}
      handleCloseDialog={handleCloseLoginDialog}
    >
        <Stack sx={{mt:0}} spacing={5} direction={isDesktop ? "row" : "column"} >
          {/*left side*/}
          {isDesktop &&
            <Stack sx={{width: "50%", borderRight: "1px solid rgba(0, 0, 0, 0.25)"}} spacing={2}>
              <Stack>
                <Typography variant={"h4"}>Welcome!</Typography>
              </Stack>
              <Stack>
                <img style={{height: "270px", width: "360px"}} src={img_left} alt=""/>
              </Stack>
              <Stack direction={"row"} spacing={0.5} alignItems={"center"}>
                <Typography variant={"body2"}>Not a member yet?</Typography>
                <Link to={"/auth/register"} component={RouterLink}>
                  Register now
                </Link>
              </Stack>
            </Stack>
          }

          {/*right side*/}
          <Stack sx={{flexGrow: 1}}>
            <Stack direction={"row"} justifyContent={"space-between"}>
              <Typography variant={"h4"}>Log In</Typography>
              <Stack sx={{ alignSelf: 'flex-end' }}>
                <CLoseDialogIcon handleCloseDialog={handleCloseLoginDialog} />
              </Stack>
            </Stack>
          {/*  Login form */}
            <Stack pt={5} spacing={5}>
              <LoginForm />
            </Stack>
          </Stack>
          {!isDesktop &&
            <Stack direction={"row"} spacing={0.5} alignItems={"center"} justifyContent={"center"}>
              <Typography variant={"body2"}>Not a member yet?</Typography>
              <Link to={"/auth/register"} component={RouterLink}>
                Register now
              </Link>
            </Stack>
          }
        </Stack>
    </DialogContainer>
  );
};

export default Login;


Листинг А.105 – файл Register.js

import React, {useState} from 'react';
import {Link, Stack, Typography} from "@mui/material";
import {Link as RouterLink, useNavigate} from "react-router-dom";
import useResponsive from "../../hooks/useResponsive";
import img_right from "../../assets/Images/register_img.png";
import RegisterForm from "../../sections/auth/RegisterForm";
import DialogContainer from "../../components/dialog/DialogContainer";
import CLoseDialogIcon from "../../components/CLoseDialogIcon";


const Register = () => {
    const [openRegisterDialog, setOpenRegisterDialog] = useState(true);
    const navigate = useNavigate();
    const isDesktop = useResponsive("up", "md");

    const handleCloseRegisterDialog = () => {
        setOpenRegisterDialog(false);
        navigate("/landing");
    }

    return (
        <DialogContainer
            openDialog={openRegisterDialog}
            handleCloseDialog={handleCloseRegisterDialog}
        >
            <Stack sx={{mt: 0}} spacing={5} direction={isDesktop ? "row" : "column"}>
                {/*right side*/}
                <Stack sx={{width: "50%"}}>
                    <Stack direction={"row"} justifyContent={"space-between"}>
                        <Typography variant={"h4"}>Register</Typography>
                        {!isDesktop &&
                            <Stack sx={{alignSelf: 'flex-end'}}>
                                <CLoseDialogIcon handleCloseDialog={handleCloseRegisterDialog}/>
                            </Stack>
                        }
                    </Stack>
                    {/*  Login form */}
                    <Stack pt={5} spacing={5}>
                        <RegisterForm/>
                    </Stack>
                    <Typography
                        component={"div"}
                        sx={{
                            color: "text.secondary",
                            mt: 3,
                            typography: "caption",
                            textAlign: "center"
                        }}
                    >
                        {"By signing up, I agree to "}
                        <Link underline={"always"} color={"text.primary"}>
                            Terms of Service
                        </Link>
                        {" and "}
                        <Link underline={"always"} color={"text.primary"}>
                            the Privacy Policy
                        </Link>
                    </Typography>
                </Stack>
                {/*left side*/}
                {isDesktop &&
                    <Stack pl={4} sx={{width: "50%", borderLeft: "1px solid rgba(0, 0, 0, 0.25)"}} spacing={2}>
                        <Stack direction={"row"} justifyContent={"space-between"}>
                            <Typography variant={"h4"}>Welcome!</Typography>
                            <Stack sx={{alignSelf: 'flex-end'}}>
                                <CLoseDialogIcon handleCloseDialog={handleCloseRegisterDialog}/>
                            </Stack>
                        </Stack>
                        <Stack pt={5}>
                            <img style={{height: "270px", width: "360px"}} src={img_right} alt=""/>
                        </Stack>
                        <Stack pt={3} direction={"row"} spacing={0.5} alignItems={"center"} justifyContent={"center"}>
                            <Typography variant={"body2"}>Already have an account?</Typography>
                            <Link to={"/auth/login"} component={RouterLink}>
                                log in now
                            </Link>
                        </Stack>
                    </Stack>
                }
                {!isDesktop &&
                    <Stack direction={"row"} spacing={0.5} alignItems={"center"} justifyContent={"center"}>
                        <Typography variant={"body2"}>Already have an account?</Typography>
                        <Link to={"/auth/login"}  component={RouterLink}>
                            log in now
                        </Link>
                    </Stack>
                }
            </Stack>
        </DialogContainer>
    );
};

export default Register;


Листинг А.106 – файл ResetPassword.js

import React, {useState} from 'react';
import {IconButton, Link, Stack, Typography} from "@mui/material";
import {useNavigate, Link as RouterLink} from "react-router-dom";

import DialogContainer from "../../components/dialog/DialogContainer";
import {CaretLeft, X} from "phosphor-react";
import ResetPasswordForm from "../../sections/auth/ResetPasswordForm";
import CLoseDialogIcon from "../../components/CLoseDialogIcon";

const ResetPassword = () => {
    const [openResetPasswordDialog, setOpenResetPasswordDialog] = useState(true);
    const navigate = useNavigate();
    // const isDesktop = useResponsive("up", "md");

    const handleCloseResetPasswordDialog = () => {
        setOpenResetPasswordDialog(false);
        navigate("/auth/login");
    }


    return (
        <DialogContainer
            openDialog={openResetPasswordDialog}
            handleCloseDialog={handleCloseResetPasswordDialog}
        >
            <Stack spacing={2} sx={{mb: 5, position: "relative"}}>
                <Stack direction={"row"} justifyContent={"space-between"} alignItems={"center"}>
                    <Typography variant={"h3"} paragraph>
                        Forgot Password?
                    </Typography>
                    <Stack>
                        <CLoseDialogIcon handleCloseDialog={handleCloseResetPasswordDialog}/>
                    </Stack>
                </Stack>
                <Typography sx={{color: "text.secondary", mb: 5}}>
                    Please enter your email address associated with your account and we will email you a link to reset
                    your
                    password.
                </Typography>
                {/*  reset password form */}
                <ResetPasswordForm/>
                <Link
                    component={RouterLink}
                    to="/auth/login"
                    color="inherit"
                    variant="subtitle2"
                    sx={{mt: 3, mx: "auto"}}
                >
                    <Stack direction={"row"} spacing={0.5} alignItems={"center"}>
                        <CaretLeft size={18}/>
                        Return to login
                    </Stack>
                </Link>
            </Stack>
        </DialogContainer>
    );
};

export default ResetPassword;


Листинг А.107 – файл Call.js

import React, {useState} from 'react';
import {Box, Divider, IconButton, Link, Stack, Typography} from "@mui/material";
import {Search, SearchIconWrapper, StyledInputBase} from "../../components/Search";
import {MagnifyingGlass, Phone, Plus} from "phosphor-react";
import {SimpleBarStyle} from "../../components/Scrollbar";
import {useTheme} from "@mui/material/styles";
import CreateCallDialog from "../../sections/main/CreateCallDialog";
import CallLogElement from "../../components/CallLogElement";
import {CALL_LOG} from "../../_data";

const Call = () => {
  const theme = useTheme();
  const [openDialog, setOpenDialog] = useState(false);

  const handleCloseDialog = () => {
    setOpenDialog(false);
  }
  return (
    <>
      <Stack direction={"row"} sx={{width: "100%"}}>
        {/*  left */}
        <Box
          sx={{
            height: "100vh",
            backgroundColor: (theme) => theme.palette.mode === "light" ? "#f8faff" : theme.palette.background,
            width: 320,
            boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)"
          }}
        >
          <Stack p={3} spacing={2} sx={{maxHeight: "100vh"}}>
            {/*  title, search */}
            <Stack>
              <Typography variant="h5">Call Log</Typography>
            </Stack>
            {/*  search */}
            <Stack sx={{width: "100%"}} spacing={2}>
              <Search>
                <SearchIconWrapper>
                  <MagnifyingGlass color="#709CE6"/>
                </SearchIconWrapper>
                <StyledInputBase
                  placeholder="Search…"
                  inputProps={{"aria-label": "search"}}
                />
              </Search>
              {/*group */}
              <Stack spacing={1}>
                <Stack
                  direction="row"
                  alignItems="center"
                  spacing={1.5}
                  justifyContent={"space-between"}
                >
                  <Typography
                    variant={"subtitle2"}
                    component={Link}
                  >
                    Start new conversation
                  </Typography>
                  <IconButton onClick={()=> setOpenDialog(true)}>
                    <Phone style={{color: theme.palette.primary.main}}/>
                  </IconButton>
                </Stack>
                <Divider/>
              </Stack>
            </Stack>
            <Stack
              direction="column"
              sx={{flexGrow: 1, height: "100%", overflowX: "hidden", overflowY: "scroll",}}
            >
              <SimpleBarStyle timeout={500} clickOnTrack={false}>
                {CALL_LOG.map((item)=>(
                  <CallLogElement {...item}/>
                ))}
              </SimpleBarStyle>
            </Stack>

          </Stack>
        </Box>

        {/*  right */}
        {/* // TODO => implement conversations component on the right side */}

      </Stack>
      {openDialog && <CreateCallDialog open={openDialog} handleClose={handleCloseDialog} />}
    </>
  );
};

export default Call;


Листинг А.108 – файл Chats.js

import React, {useEffect, useState} from 'react';
import {Box, Button, Divider, IconButton, Stack, Typography} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {ArchiveBox, CircleDashed, MagnifyingGlass, Users} from "phosphor-react";
import {Search, SearchIconWrapper, StyledInputBase} from "../../components/Search";
import {ChatList} from "../../_data";
import {SimpleBarStyle} from "../../components/Scrollbar";
import useResponsive from "../../hooks/useResponsive";
import {ChatElement} from "../../components/ChatElements";
import {useDispatch, useSelector} from "react-redux";
import {getUsers} from "../../redux/slices/authSlice";
import ListUsersDialog from "../../sections/main/ListUsersDialog";
import {socket} from "../../socket";
import {FetchDirectConversations} from "../../redux/slices/conversationSlice";
import BottomNav from "../../layouts/dashboard/BottonNav";


const user_id = window.localStorage.getItem("user_id");
const Chats = () => {
    const theme = useTheme();
    const dispatch = useDispatch();
    const isDesktop = useResponsive("up", "md");

    const {conversations} = useSelector(store => store.conversation.direct_chat);

    const {allUsers} = useSelector(store => store.auth);
    const usersArray = allUsers;

    const [openDialog, setOpenDialog] = useState(false);

    const handleCloseDialog = () => {
        setOpenDialog(false);
    }

    useEffect(() => {
        socket.emit('get_direct_conversation', {user_id}, (data) => {
            console.log(data);
            dispatch(FetchDirectConversations({conversations: data}));
        });
    }, [])


    return (
        <>
            <Box
                sx={{
                    position: "relative",
                    width: isDesktop ? 320 : "100vw",
                    backgroundColor: theme.palette.mode === 'light'
                        ? '#f8faff'
                        : theme.palette.background,
                    boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
                }}>
                {!isDesktop && (
                    <BottomNav />
                )}

                <Stack p={3} spacing={2} sx={{height: "100vh"}}>
                    <Stack
                        direction="row"
                        alignItems="center"
                        justifyContent="space-between"
                    >
                        <Typography variant="h5">
                            Chats
                        </Typography>
                        <Stack direction={"row"} spacing={1}>
                            {/* // TODO: put a conditional rendering */}
                            <IconButton onClick={() => {
                                if (!allUsers) {
                                    dispatch(getUsers());
                                }

                                setOpenDialog(true);
                            }}>
                                <Users/>
                            </IconButton>
                            <IconButton>
                                <CircleDashed/>
                            </IconButton>
                        </Stack>
                    </Stack>
                    <Stack sx={{width: "100%"}}>
                        <Search>
                            <SearchIconWrapper>
                                <MagnifyingGlass color="#709CE6"/>
                            </SearchIconWrapper>
                            <StyledInputBase
                                placeholder="Search…"
                                inputProps={{"aria-label": "search"}}
                            />
                        </Search>
                    </Stack>
                    <Stack spacing={1}>
                        <Stack
                            direction="row"
                            alignItems="center"
                            spacing={1.5}
                        >
                            <ArchiveBox size={24}/>
                            <Button>Archive</Button>
                        </Stack>
                        <Divider/>
                    </Stack>
                    <Stack
                        direction="column"
                        sx={{flexGrow: 1, overflowX: "hidden", overflowY: "scroll", height: "100%"}}>
                        <SimpleBarStyle timeout={500} clickOnTrack={false}>
                            <Stack spacing={2.4}>
                                {/*<Typography variant="subtitle2" sx={{color: "#676767"}}>*/}
                                {/*    Pinned*/}
                                {/*</Typography>*/}
                                {/*{ChatList.filter((item) => item.pinned).map((item) => {*/}
                                {/*    return <ChatElement {...item}/>*/}
                                {/*})}*/}
                            </Stack>
                            <Stack spacing={2.4}>
                                <Typography variant="subtitle2" sx={{color: "#676767"}}>
                                    All Chats
                                </Typography>
                                {ChatList.filter((item) => item.pinned).map((item) => {
                                    console.log(conversations)
                                    return <ChatElement {...item} />
                                })}
                            </Stack>
                        </SimpleBarStyle>
                    </Stack>
                </Stack>
            </Box>
            {openDialog && allUsers &&
                <ListUsersDialog
                    open={openDialog}
                    handleClose={handleCloseDialog}
                    usersList={usersArray}
                />
            }
        </>
    );
};

export default Chats;


Листинг А.109 – файл Conversation.js

import {Stack, Box } from "@mui/material";
import React, {useEffect, useRef} from "react";
import {useTheme} from "@mui/material/styles";
import useResponsive from "../../hooks/useResponsive";
import {
    DocMsg,
    LinkMsg,
    MediaMsg,
    ReplyMsg,
    TextMsg,
    Timeline,
} from "../../sections/dashboard/Conversation";
import {useDispatch, useSelector} from "react-redux";
import {
    FetchCurrentMessages,
    SetCurrentConversation,
} from "../../redux/slices/conversationSlice";
import {socket} from "../../socket";
import Chats from "./Chats";
import ConversionComponent from "../../components/Conversation";
import {ContactInfo, StarredMessage} from "../../components/ContactInfo";
import SharedMessages from "../../sections/dashboard/SharedMessages";
import {useLocation} from "react-router-dom";
import {SimpleBarStyle} from "../../components/Scrollbar";
import {ChatFooter, ChatHeader} from "../../components/Chat";

const Conversation = ({isMobile, menu}) => {
    const dispatch = useDispatch();

    const {conversations, current_messages} = useSelector(
        (state) => state.conversation.direct_chat
    );
    const {room_id} = useSelector((state) => state.app);

    useEffect(() => {
        const current = conversations.find((el) => el?.id === room_id);

        socket.emit("get_messages", {conversation_id: current?.id}, (data) => {
            // data => list of messages
            console.log(data, "List of messages");
            dispatch(FetchCurrentMessages({messages: data}));
        });

        dispatch(SetCurrentConversation(current));
    }, []);
    return (
        <Box p={isMobile ? 1 : 3} sx={{ height: "80vh"}}>
            <Stack spacing={3}>
                {current_messages.map((el, idx) => {
                    switch (el.type) {
                        case "divider":
                            return (
                                // Timeline
                                <Timeline el={el}/>
                            );

                        case "msg":
                            switch (el.subtype) {
                                case "img":
                                    return (
                                        // Media Message
                                        <MediaMsg el={el} menu={menu}/>
                                    );

                                case "doc":
                                    return (
                                        // Doc Message
                                        <DocMsg el={el} menu={menu}/>
                                    );
                                case "Link":
                                    return (
                                        //  Link Message
                                        <LinkMsg el={el} menu={menu}/>
                                    );

                                case "reply":
                                    return (
                                        //  ReplyMessage
                                        <ReplyMsg el={el} menu={menu}/>
                                    );

                                default:
                                    return (
                                        // Text Message
                                        <TextMsg el={el} menu={menu}/>
                                    );
                            }

                        default:
                            return <></>;
                    }
                })}
            </Stack>
        </Box>
    );
};

const ChatComponent = () => {
    const isMobile = useResponsive("between", "md", "xs", "sm");
    const theme = useTheme();
    const {sidebar} = useSelector((store) => store.app);

    const location = useLocation();
    const isApp = location.pathname === "/app"

    const messageListRef = useRef(null);

    const {current_messages} = useSelector(
        (state) => state.conversation.direct_chat
    );

    useEffect(() => {
        // Scroll to the bottom of the message list when new messages are added
        messageListRef.current.scrollTop = messageListRef.current.scrollHeight;
    }, [current_messages]);

    return (
        <Stack
            height={"100%"}
            maxHeight={"100vh"}
            width={isMobile ? "100vw" : "auto"}
        >
            {/*  */}
            <ChatHeader />
            <Box
                ref={messageListRef}
                width={"100%"}
                sx={{
                    position: "relative",
                    flexGrow: 1,
                    overflow: "scroll",

                    backgroundColor:
                        theme.palette.mode === "light"
                            ? "#F0F4FA"
                            : theme.palette.background,

                    boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.25)",
                }}
            >
                <SimpleBarStyle timeout={500} clickOnTrack={false}>
                    <Conversation menu={true} isMobile={isMobile} />
                </SimpleBarStyle>
            </Box>

            {/*  */}
            <ChatFooter />
        </Stack>
    );
};

export default ChatComponent;

export {Conversation};


Листинг А.110 – файл GeneralApp.js

import React, {useState} from "react";
import { useTheme } from "@mui/material/styles";
import {Box, Button, IconButton, Stack, Typography} from "@mui/material";

import { Link, useSearchParams } from "react-router-dom";
import ChatComponent from "./Conversation";
import Chats from "./Chats";
import Contact from "../../sections/dashboard/Contact";
import NoChat from "../../assets/Illustration/NoChat";
import { useSelector } from "react-redux";
import StarredMessages from "../../sections/dashboard/StarredMessages";
import Media from "../../sections/dashboard/SharedMessages";
import ListUsersDialog from "../../sections/main/ListUsersDialog";
import ConversionComponent from "../../components/Conversation";

const GeneralApp = () => {
    const [searchParams] = useSearchParams();

    const theme = useTheme();
    const {allUsers} = useSelector(store => store.auth);
    const usersArray = allUsers;
    console.log({usersArray})

    const [openDialog, setOpenDialog] = useState(false);
    const handleCloseDialog = () => {
        setOpenDialog(false);
    }

    const { sideBar, room_id, chat_type } = useSelector((state) => state.app);

    return (
        <>
            <Stack direction="row" sx={{ width: "100%" }}>
                <Chats />
                <Box
                    sx={{
                        height: "100%",
                        width: sideBar?.open
                            ? `calc(100vw - 740px )`
                            : "calc(100vw - 420px )",
                        backgroundColor:
                            theme.palette.mode === "light"
                                ? "#FFF"
                                : theme.palette.background.paper,
                        borderBottom:
                            searchParams.get("type") === "individual-chat" &&
                            searchParams.get("id")
                                ? "0px"
                                : "6px solid #0162C4",
                    }}
                >
                    {chat_type === "individual" &&
                    room_id !== null ? (
                        <ChatComponent />
                    ) : (
                        <Stack
                            spacing={2}
                            sx={{ height: "100vh", width: "100%" }}
                            alignItems="center"
                            justifyContent={"center"}
                        >
                            <NoChat />
                            <Typography variant="subtitle2">
                                Select a conversation or start a{" "}
                                <Button
                                    style={{
                                        color: theme.palette.primary.main,
                                        textDecoration: "none",
                                    }}
                                    onClick={() => setOpenDialog(true)}
                                >
                                    new one
                                </Button>
                            </Typography>
                        </Stack>
                    )}
                </Box>
                {sideBar?.open &&
                    (() => {
                        switch (sideBar.type) {
                            case "CONTACT":
                                return <Contact />;

                            case "STARRED":
                                return <StarredMessages />;

                            case "SHARED":
                                return <Media />;

                            default:
                                break;
                        }
                    })()}
            </Stack>
            {openDialog && allUsers &&
                <ListUsersDialog
                    open={openDialog}
                    handleClose={handleCloseDialog}
                    usersList={usersArray}
                />
            }
        </>
    );
};

export default GeneralApp;


Листинг А.111 – файл Group.js

import React, {useState} from 'react';
import {Box, Divider, IconButton, Link, Stack, Typography} from "@mui/material";
import {Search, SearchIconWrapper, StyledInputBase} from "../../components/Search";
import {MagnifyingGlass, Plus} from "phosphor-react";
import {useTheme} from "@mui/material/styles";
import {ChatList} from "../../_data";
import {SimpleBarStyle} from "../../components/Scrollbar";
import {ChatElement} from "../../components/ChatElements";
import CreateGroupDialog from "../../sections/main/CreateGroupDialog";
import NoChat from "../../assets/Illustration/NoChat";

const Group = () => {
  const theme = useTheme();
  const [openDialog, setOpenDialog] = useState(false);

  const handleCloseDialog = () => {
    setOpenDialog(false);
  }

  return (
    <>
      <Stack direction={"row"} sx={{width: "100%"}}>
        {/*  left */}
        <Box
          sx={{
            height: "100vh",
            backgroundColor: (theme) => theme.palette.mode === "light" ? "#f8faff" : theme.palette.background,
            width: 320,
            boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)"
          }}
        >
          <Stack p={3} spacing={2} sx={{maxHeight: "100vh"}}>
            {/*  title, search */}
            <Stack>
              <Typography variant="h5">Groups</Typography>
            </Stack>
            {/*  search */}
            <Stack sx={{width: "100%"}} spacing={2}>
              <Search>
                <SearchIconWrapper>
                  <MagnifyingGlass color="#709CE6"/>
                </SearchIconWrapper>
                <StyledInputBase
                  placeholder="Search…"
                  inputProps={{"aria-label": "search"}}
                />
              </Search>
              {/*group */}
              <Stack spacing={1}>
                <Stack
                  direction="row"
                  alignItems="center"
                  spacing={1.5}
                  justifyContent={"space-between"}
                >
                  <Typography
                    variant={"subtitle2"}
                    component={Link}
                  >
                    Create New Group
                  </Typography>
                  <IconButton onClick={()=> setOpenDialog(true)}>
                    <Plus style={{color: theme.palette.primary.main}}/>
                  </IconButton>
                </Stack>
                <Divider/>
              </Stack>
            </Stack>
            <Stack
              direction="column"
              sx={{flexGrow: 1, height: "100%", overflowX: "hidden", overflowY: "scroll",}}
            >
              <SimpleBarStyle timeout={500} clickOnTrack={false}>
                <Stack spacing={2.4}>
                  <Typography variant="subtitle2" sx={{color: "#676767"}}>
                    Pinned
                  </Typography>
                  {ChatList.filter((item) => item.pinned).map((item) => {
                    return <ChatElement {...item}/>
                  })}
                </Stack>
                <Stack spacing={2.4}>
                  <Typography variant="subtitle2" sx={{color: "#676767"}}>
                    All Groups
                  </Typography>
                  {ChatList.filter((item) => !item.pinned).map((item) => {
                    return <ChatElement {...item}/>
                  })}
                </Stack>
              </SimpleBarStyle>
            </Stack>

          </Stack>
        </Box>

        {/*  right */}
        {/* // TODO => implement conversations component on the right side */}
      </Stack>
      {openDialog && <CreateGroupDialog open={openDialog} handleClose={handleCloseDialog}/>}

    </>
  );
};

export default Group;


Листинг А.112 – файл Intro.js

import {Button, Stack} from "@mui/material";
import CardContainer from "../../sections/meeting/CardContainer";
import MeetingContainer from "../../sections/meeting/MeetingContainer";
import {useNavigate} from "react-router-dom";

const Intro = () => {
    const navigate = useNavigate();
    const pushToJoinRoomPageAsHost = () => {
        navigate("/join-room?host=true")
    }
    const pushToJoinRoomPage = () => {
        navigate("/join-room")
    }

    return (
        <MeetingContainer>
            <CardContainer>
                <Stack
                    spacing={2}
                    sx={{width: 1}}
                >
                    <Button
                        fullWidth
                        variant="contained"
                        onClick={pushToJoinRoomPage}
                    >
                        Join Meeting
                    </Button>
                    <Button
                        fullWidth
                        variant="outlined"
                        onClick={pushToJoinRoomPageAsHost}
                    >
                        Host Meeting
                    </Button>
                </Stack>
            </CardContainer>
        </MeetingContainer>
    );
};

export default Intro;


Листинг А.113 – файл Join.js

import {Stack, Typography} from "@mui/material";
import JoinForm from "../../sections/meeting/JoinForm";
import MeetingContainer from "../../sections/meeting/MeetingContainer";
import CardContainer from "../../sections/meeting/CardContainer";
import {useSelector} from "react-redux";

const Join = () => {
    const {isRoomHost} = useSelector(store => store.app);
    const titleText = isRoomHost ? "Host Meeting" : "Join Meeting";

    return (
        <>
            <MeetingContainer>
                <CardContainer>
                    <Stack
                        spacing={3}
                        sx={{width: 1}}
                    >
                        <Typography
                            textAlign="center"
                            variant="h3"
                        >
                            {titleText}
                        </Typography>
                        <JoinForm/>
                    </Stack>
                </CardContainer>
            </MeetingContainer>
        </>
    );
};

export default Join;


Листинг А.114 – файл Profile.js

import React from 'react';
import {Avatar, Box, IconButton, Stack, Typography} from "@mui/material";
import {CaretLeft} from "phosphor-react";
import {faker} from "@faker-js/faker";
import {useTheme} from "@mui/material/styles";
import ProfileForm from "../../sections/settings/ProfileForm";
import {useNavigate} from "react-router-dom";

const Profile = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  return (
    <>
      <Stack direction="row" sx={{width: "100%", height: "100%"}}>
        <Box
          sx={{
            position: "relative",
            width: 320,
            backgroundColor: theme.palette.mode === 'light'
              ? '#f8faff'
              : theme.palette.background,
            boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
            overflowY: "scroll",
            height: "100vh",
          }}>
          <Stack p={3} spacing={4}>
            {/*Header */}
            <Stack direction={"row"} spacing={3} alignItems={"center"}>
              <IconButton onClick={() => navigate("/app")}>
                <CaretLeft size={24} color={"#4b4b4b"}/>
              </IconButton>
              <Typography variant={"h5"}>Profile</Typography>
            </Stack>
            {/*profile*/}
            <Stack direction={"row"} spacing={3} alignItems={"center"} justifyContent={"center"}>
              <Avatar sx={{width: "7.5rem", height: "7.5rem"}} src={faker.image.avatar()}
                      alt={faker.person.fullName()}/>
            </Stack>
            {/* profile Info */}
            <Stack>
              <ProfileForm />
            </Stack>
          </Stack>
        </Box>
      </Stack>

    </>
  );
};

export default Profile;


Листинг А.115 – файл Room.js

import {Stack} from "@mui/material";
import Label from "../../sections/room/Label";
import Participants from "../../sections/room/Participants";
import GroupChat from "../../sections/room/GroupChat";
import Video from "../../sections/room/Video";
import {useEffect} from "react";
import * as webRTCHandler from "../../utils/webRTCHandler";
import {useSelector} from "react-redux";
import Overlay from "../../sections/room/Overlay";

const Room = () => {
    const {identity, isRoomHost, roomId, showOverlay} = useSelector(store=>store.app)

    useEffect(() => {
        webRTCHandler.getLocalPreviewAndInitRoomConnection(isRoomHost,identity, roomId)
    }, []);


    return (
        <>
            <Stack
                direction="row"
                align="center"
                sx={{position: "relative", width: "92vw", height: "100vh"}}
            >
                {/*    Participants*/}
                <Participants/>
                {/*    video section*/}
                <Video/>
                {/*    Group chat section*/}
                <GroupChat/>
                {/*    Label*/}
                <Label/>
                {showOverlay && <Overlay />}
            </Stack>
        </>
    );
};

export default Room;


Листинг А.116 – файл Settings.js

import React, {useState} from 'react';
import {Avatar, Box, Divider, IconButton, Stack, Typography} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import useResponsive from "../../hooks/useResponsive";
import {faker} from "@faker-js/faker";
import {CaretLeft } from "phosphor-react";
import Shortcuts from "../../sections/settings/Shortcuts";
import {useNavigate} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {UpdateSidebarLink} from "../../redux/slices/appSlice";
import {Settings_Menu} from "../../_data/_settings";


const Settings = () => {
    const theme = useTheme();
    const navigate = useNavigate();
    const {user} = useSelector(store =>store.auth);
    const dispatch = useDispatch();
    const isDesktop = useResponsive("up", "md");
    const [openShortcuts, setOpenShortcuts] = useState(false);

    const handleOpenShortcuts = () => {
        setOpenShortcuts(true);
        // console.log("clicked")
    }

    const handleCloseShortcuts = () => {
        setOpenShortcuts(false)
    }

    const eventHandlers = {
        1: ()=>{},
        2: ()=>{},
        3: ()=>{},
        4: ()=>{},
        5: ()=>{},
        6: ()=>{},
        7: handleOpenShortcuts,
        8: ()=>{},
    }


    return (
        <>
            <Stack direction="row" sx={{width: "100%", height: "100%"}}>
                {/*  Profile */}
                <Box
                    sx={{
                        position: "relative",
                        width: isDesktop ? 320 : "100vw",
                        backgroundColor: theme.palette.mode === 'light'
                            ? '#f8faff'
                            : theme.palette.background,
                        boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
                        overflowY: "scroll",
                        height: "100vh",
                    }}>
                    <Stack p={3} spacing={5}>
                        {/*Header */}
                        <Stack direction={"row"} spacing={3} alignItems={"center"}>
                            <IconButton onClick={() => {
                                navigate("/app");
                                dispatch(UpdateSidebarLink({linkSelected: 0}))
                            }}>
                                <CaretLeft/>
                            </IconButton>
                            <Typography variant={"h6"}>Настройки</Typography>
                        </Stack>
                        {/*profile*/}
                        <Stack direction="row" spacing={3} alignItems={"center"}>
                            <Avatar sx={{width: 56, height: 56}} src={user.image}
                                    alt={faker.person.fullName()}/>
                            <Stack spacing={0.5}>
                                <Typography variant="article">{user.first_name} {" "}{user.last_name}</Typography>
                                <Typography variant="body2">{user.about.substring(0,25)}...</Typography>
                            </Stack>
                        </Stack>
                        {/* settings section*/}
                        <Stack spacing={2}>
                            {Settings_Menu.map(({icon, text, key, onclick}) => (
                                <>
                                    <Stack
                                        sx={{cursor: 'pointer'}}
                                        direction="row"
                                        spacing={1}
                                        alignItems={"center"}
                                        onClick={eventHandlers[key]}
                                    >
                                        {icon}
                                        <Typography variant="body2">{text}</Typography>
                                    </Stack>
                                    {key !== 8 && <Divider/>}
                                </>
                            ))}
                        </Stack>
                    </Stack>
                </Box>
                {/*  setting right side */}
            </Stack>
            {openShortcuts && <Shortcuts open={openShortcuts} handleClose={handleCloseShortcuts}/>}
        </>)
};


export default Settings;


Листинг А.117 – файл rootReducer.js

import {combineReducers} from "redux";
import storage from "redux-persist/lib/storage";
import appReducer from "./slices/appSlice"
import authReducer from "./slices/authSlice";
import conversionReducer from "./slices/conversationSlice";

// slices

const rootPersistConfig = {
    key: 'root',
    storage,
    keyPrefix: "redux-",
    // whitelist [],
    // blacklist [],
}

const rootReducer = combineReducers({
    app: appReducer,
    auth: authReducer,
    conversation: conversionReducer,
});

export {rootPersistConfig, rootReducer}



Листинг А.118 – файл store.js

import {configureStore} from "@reduxjs/toolkit";
import {useDispatch as useAppDispatch, useSelector as useAppSelector } from "react-redux";
import { persistStore, persistReducer} from "redux-persist";
import {rootPersistConfig, rootReducer} from "./rootReducer";

const store = configureStore({
  reducer: persistReducer(rootPersistConfig, rootReducer),
  middleware: (getDefaultMiddleware)=>getDefaultMiddleware({
    serializableCheck: false,
    immutableCheck: false
  }),
});

const persistor = persistStore(store);

const {dispatch} = store;

const useSelector = useAppSelector;
const useDispatch = ()=> useAppDispatch();

export { store, persistor, dispatch, useDispatch, useSelector}


Листинг А.119 – файл confirmEmailBuilder.js

import {toast} from "react-toastify";
import {confirmEmail} from "../slices/authSlice";

const confirmEmailBuilder = (builder) => {
    return (
        builder
            .addCase(confirmEmail.pending, state => {
                state.isLoading = true;
                state.confirmEmailToast = toast.loading("Confirming email...");
            })
            .addCase(confirmEmail.fulfilled, (state, {payload} )=> {
                state.isLoading = false;
                toast.update(state.confirmEmailToast, {render: "Email confirmed", isLoading: false, type: "success"});
                setTimeout(()=> { toast.dismiss()},2000);
            })
            .addCase(confirmEmail.rejected, (state, {payload} )=> {
                state.isLoading = false;
                toast.update(state.confirmEmailToast, {render: "Email confirmation failed", isLoading: false, type: "error"});
                setTimeout(()=> { toast.dismiss()},2000);
                console.log(payload)
            })
    )
}

export default confirmEmailBuilder;


Листинг А.120 – файл forgotPasswordBuilder.js

import {toast} from "react-toastify";
import {forgotPassword} from "../slices/authSlice";

const ForgotPasswordBuilder = (builder) => {
    return (
        builder
            .addCase(forgotPassword.pending, (state, {payload}) => {
                state.isLoading = true;
                state.forgotPasswordToast = toast.loading("Sending the reset code...");
            })
            .addCase(forgotPassword.fulfilled, (state, {payload}) => {
                state.isLoading = false;
                toast.update(state.forgotPasswordToast, {
                    render: "Reset code sent check your email",
                    isLoading: false,
                    type: "success"
                });
                setTimeout(() => {
                    toast.dismiss()
                }, 2000);
            })
            .addCase(forgotPassword.rejected, (state, {payload}) => {
                state.isLoading = false;
                toast.update(state.forgotPasswordToast, {
                    render: "User email not registered yet",
                    isLoading: false,
                    type: "error"
                });
                setTimeout(() => {
                    toast.dismiss()
                }, 2000);
            })
    );
};

export default ForgotPasswordBuilder;


Листинг А.121 – файл index.js

export { default as confirmEmailBuilder } from "./confirmEmailBuilder";
export { default as loginBuilder } from "./loginBuilder";
export { default as logoutBuilder } from "./logoutBuilder";
export { default as registerBuilder } from "./registerBuilder";
export { default as forgotPasswordBuilder } from "./forgotPasswordBuilder";


Листинг А.122 – файл loginBuilder.js

import {toast} from "react-toastify";
import {loginUser} from "../slices/authSlice";

const loginBuilder = (builder) =>{
    return (
        builder
            .addCase(loginUser.pending, state => {
                state.isLoading = true;
                state.isLoggedIn = false;
                state.loginToast = toast.loading("Logging in...");
            })
            .addCase(loginUser.fulfilled, (state, { payload }) => {
                state.isLoading = false;
                state.isLoggedIn = true;
                state.token = payload.token;
                state.user = payload.user;
                toast.update(state.loginToast, { render: "Login successful", isLoading: false, type: "success" });
                setTimeout(()=> { toast.dismiss()},2000);
            })
            .addCase(loginUser.rejected, state => {
                state.isLoading = false;
                state.isLoggedIn = false;
                toast.update(state.loginToast, { render: "Login failed", isLoading: false, type: "error" });
                setTimeout(()=> { toast.dismiss()},3000);
            })
    )
}

export default loginBuilder;


Листинг А.123 – файл logoutBuilder.js

import {toast} from "react-toastify";
import {logoutUser} from "../slices/authSlice";

const logoutBuilder = (builder) => {
    return (
        builder
            .addCase(logoutUser.pending, state => {
                state.isLoading = true;
                state.isLoggedIn = true;
                state.logoutToast = toast.loading("Logging out...");
            })
            .addCase(logoutUser.fulfilled, state => {
                state.isLoading = false;
                state.isLoggedIn = false;
                state.token = "";
                state.user = null;
                state.allUsers = null;
                toast.update(state.logoutToast, {render: "Logout successful", isLoading: false, type: "success"});
                setTimeout(()=> { toast.dismiss()},2000);
            })
            .addCase(logoutUser.rejected, state => {
                state.isLoading = true;
                state.isLoggedIn = true;
                toast.update(state.logoutToast, {render: "Logout failed", isLoading: false, type: "error"});
                setTimeout(()=> { toast.dismiss()},2000);
            })
    )
}

export default logoutBuilder;


Листинг А.124 – файл registerBuilder.js

import {toast} from "react-toastify";
import {registerUser} from "../slices/authSlice";

const registerBuilder = (builder) => {
    return (
        builder
            .addCase(registerUser.pending, state => {
                state.isLoading = true;
                state.registerToast = toast.loading("Registration...");
            })
            .addCase(registerUser.fulfilled, (state, {payload} )=> {
                state.isLoading = false;
                state.token = payload.token;
                toast.update(state.logoutToast, {render: "Registration successful confirm your email", isLoading: false, type: "success"});
                setTimeout(()=> { toast.dismiss()},2000);
                // console.log(payload)
            })
            .addCase(registerUser.rejected, (state, {payload} )=> {
                state.isLoading = false;
                state.token = "";
                toast.update(state.logoutToast, {render: "Registration failed", isLoading: false, type: "error"});
                setTimeout(()=> { toast.dismiss()},2000);
                console.log(payload)
            })
    )
}

export default registerBuilder;


Листинг А.125 – файл resetUserPasswordBuilder.js

import {toast} from "react-toastify";
import {resetUserPassword} from "../slices/authSlice";

const ResetUserPasswordBuilder = (builder) => {
    return (
        builder
            .addCase(resetUserPassword.pending, state => {
                state.isLoading = true;
                state.resetPasswordToast = toast.loading("Sending the reset code email...");
            })
            .addCase(resetUserPassword.fulfilled, (state, {payload}) => {
                state.isLoading = false;
                toast.update(state.resetPasswordToast, {
                    render: "Reset password successful login please",
                    isLoading: false,
                    type: "success"
                });
                setTimeout(() => {
                    toast.dismiss()
                }, 2000);
            })
            .addCase(resetUserPassword.rejected, (state, {payload}) => {
                state.isLoading = false;
                toast.update(state.resetPasswordToast, {
                    render: "Reset password failed",
                    isLoading: false,
                    type: "error"
                });
                setTimeout(() => {
                    toast.dismiss()
                }, 2000);
                console.log(payload)
            })
    );
};

export default ResetUserPasswordBuilder;


Листинг А.126 – файл appSlice.js

import {createSlice} from "@reduxjs/toolkit";

// import {dispatch} from "../store";

const initialState = {
    sidebar: {
        open: false,
        type: "CONTACT", // can be CONTACT, STARRED MESSAGE, SHARED DATA
        linkSelected: 0,
    },
    identity: "",
    roomId: "",
    chat_type: null,
    isRoomHost: false,
    connectionOnlyWithAudio: false,
    showOverlay: true,
    participants : [],
}

//actions
export function UpdateIsRoomHost(value) {
    return async (dispatch) => {
        dispatch(updateIsRoomHost(value));
    }
}

export function SetIdentity(value) {
    return async (dispatch) => {
        dispatch(updateIdentity(value));
    }
}

export function SetRoomId(value) {
    return async (dispatch) => {
        dispatch(updateRoomId(value));
    }
}

export function SetConnectionOnlyWithAudio(value) {
    return async (dispatch) => {
        dispatch(updateConnectOnlyWithAudio(value));
    }
}

export function SetOverlay(value) {
    return async (dispatch) => {
        dispatch(updateShowOverlay(value));
    }
}

export function SetParticipants(value) {
    return async (dispatch) => {
        dispatch(updateParticipants(value));
    }
}

export const SelectConversation = ({ room_id }) => {
    return async (dispatch, getState) => {
        dispatch(slice.actions.selectConversation({ room_id }));
    };
};

const slice = createSlice({
    name: "app",
    initialState,
    reducers: {
        // Toggle Sidebar
        ToggleSidebar(state, action) {
            state.sidebar.open = !state.sidebar.open;
        },
        UpdateSidebarType(state, action) {
            state.sidebar.type = action.payload.type;
        },
        UpdateSidebarLink(state, action) {
            state.sidebar.linkSelected = action.payload.linkSelected;
        },
        updateIsRoomHost(state, action) {
            state.isRoomHost = action.payload
        },
        updateIdentity(state, action) {
            state.identity = action.payload
        },
        updateRoomId(state, action) {
            state.roomId = action.payload
        },
        updateConnectOnlyWithAudio(state, action) {
            state.connectionOnlyWithAudio = action.payload
        },
        updateShowOverlay(state, action) {
            state.showOverlay = action.payload
        },
        updateParticipants(state, action) {
            state.participants = action.payload
        },
        selectConversation(state, action) {
            state.chat_type = "individual";
            state.room_id = action.payload.room_id;
        },
    }
});

export const {ToggleSidebar, updateParticipants, updateShowOverlay, updateConnectOnlyWithAudio,updateRoomId, updateIdentity, updateIsRoomHost, UpdateSidebarLink, UpdateSidebarType} = slice.actions;

export default slice.reducer;





Листинг А.127 – файл authSlice.js

import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import {
    confirmEmailThunk, createEventThunk,
    forgotPasswordThunk, getAllUsersThunk,
    logInThunk,
    logOutThunk,
    resetPasswordThunk,
    signUpThunk
} from "../thunks/authThunks";
import {toast} from "react-toastify";
import {confirmEmailBuilder, forgotPasswordBuilder, loginBuilder, logoutBuilder, registerBuilder} from "../builders";
import resetUserPasswordBuilder from "../builders/resetUserPasswordBuilder";


const initialState = {
    isLoggedIn: false,
    token: "",
    isLoading: false,
    user: null,
    loginToast: null,
    logoutToast: null,
    registerToast: null,
    confirmEmailToast: null,
    forgotPasswordToast: null,
    resetPasswordToast: null,
    allUsers: null,
}

export const loginUser = createAsyncThunk(
    "user/login",
    async (user, thunkAPI) => {
        return logInThunk(user, thunkAPI);
    }
)

export const logoutUser = createAsyncThunk(
    "user/logout",
    async (_, thunkAPI) => {
        return logOutThunk(_, thunkAPI);
    }
)

export const registerUser = createAsyncThunk(
    "user/register",
    async (user, thunkAPI) => {
        return signUpThunk(user, thunkAPI);
    }
)

export const forgotPassword = createAsyncThunk(
    "user/forgot-password",
    async (data, thunkAPI) => {
        return forgotPasswordThunk(data, thunkAPI);
    }
)

export const resetUserPassword = createAsyncThunk(
    "user/reset-password",
    async (data, thunkAPI) => {
        return resetPasswordThunk(data, thunkAPI);
    }
)

export const confirmEmail = createAsyncThunk(
    "user/confirm-email",
    async (data, thunkAPI) => {
        return confirmEmailThunk(data, thunkAPI);
    }
)

export const createEvent = createAsyncThunk(
    "event/create",
    async (_, thunkAPI) => {
        return createEventThunk(_, thunkAPI);
    }
)

export const getUsers = createAsyncThunk(
    "users/getUsers",
    async (_, thunkAPI) => {
        return getAllUsersThunk(_, thunkAPI);
    }
)

const slice = createSlice({
    name: "auth",
    initialState,
    reducers: {},
    extraReducers: builder => {
        loginBuilder(builder);
        logoutBuilder(builder);
        registerBuilder(builder);
        confirmEmailBuilder(builder);
        forgotPasswordBuilder(builder);
        resetUserPasswordBuilder(builder);
        builder
            .addCase(createEvent.pending, state => {
                state.isLoading = true;
            })
            .addCase(createEvent.fulfilled, (state, {payload}) => {
                state.isLoading = false;
                toast.success(payload.message);
                console.log({payload})
            })
            .addCase(createEvent.rejected, state => {
                state.isLoading = false;
                toast.error("Failed to create event");
                console.log("create Event rejected")
            });
        builder
            .addCase(getUsers.pending, state => {
                state.isLoading = true;
            })
            .addCase(getUsers.fulfilled, (state, {payload})=> {
                state.isLoading = false;
                state.allUsers = payload;
            })
            .addCase(getUsers.rejected, state =>{
                state.isLoading = false;
                state.allUsers = null;
                console.log("get all users rejected")
            })

    }
})

export default slice.reducer;


Листинг А.128 – файл conversationSlice.js

import {createSlice} from "@reduxjs/toolkit";
import {faker} from "@faker-js/faker";

const user_id = window.localStorage.getItem("user_id");

const initialState = {
    direct_chat: {
        conversations: [],
        current_conversation: null,
        current_messages: []
    },
    group_chat: {},
}

const slice = createSlice({
    name: "conversation",
    initialState,
    reducers: {
        fetchDirectConversations(state, action) {
            state.direct_chat.conversations = action.payload.conversations.map((el) => {
                    const this_user = el.participants.find(
                        (elm) => elm._id !== user_id);
                    return {
                        id: el._id,
                        user_id: this_user._id,
                        name: `${this_user.first_name}  ${this_user.last_name}`,
                        online: this_user.status === 'online',
                        image: this_user.image,
                        msg: faker.music.songName(),
                        time: "9:36",
                        unread: 0,
                        pinned: this_user.pinned,
                    }
                }
            );
        },

        updateDirectConversation(state, action) {
            const this_conversation = action.payload.conversation;
            state.direct_chat.conversations = state.direct_chat.conversations.map(
                (el) => {
                    if (el?.id !== this_conversation._id) {
                        return el;
                    } else {
                        const user = this_conversation.participants.find(
                            (elm) => elm._id.toString() !== user_id
                        );
                        return {
                            id: this_conversation._id,
                            user_id: user?._id,
                            name: `${user?.firstName} ${user?.lastName}`,
                            online: user?.status === "Online",
                            img: faker.image.avatar(),
                            msg: faker.music.songName(),
                            time: "9:36",
                            unread: 0,
                            pinned: false,
                        };
                    }
                }
            );
        },
        addDirectConversation(state, action) {
            const this_conversation = action.payload.conversation;
            const user = this_conversation.participants.find(
                (elm) => elm._id.toString() !== user_id
            );
            state.direct_chat.conversations = state.direct_chat.conversations.filter(
                (el) => el?.id !== this_conversation._id
            );
            state.direct_chat.conversations.push({
                id: this_conversation._id._id,
                user_id: user?._id,
                name: `${user?.firstName} ${user?.lastName}`,
                online: user?.status === "Online",
                img: faker.image.avatar(),
                msg: faker.music.songName(),
                time: "9:36",
                unread: 0,
                pinned: false,
            });
        },
        setCurrentConversation(state, action) {
            state.direct_chat.current_conversation = action.payload;
        },
        fetchCurrentMessages(state, action) {
            const messages = action.payload.messages;
            const formatted_messages = messages.map((el) => ({
                id: el._id,
                type: "msg",
                subtype: el.type,
                message: el.text,
                incoming: el.to === user_id,
                outgoing: el.from === user_id,
            }));
            state.direct_chat.current_messages = formatted_messages;
        },
        addDirectMessage(state, action) {
            state.direct_chat.current_messages.push(action.payload.message);
        }
    }
})


export default slice.reducer;

export const FetchDirectConversations = ({conversations}) => {
    return async (dispatch, getState) => {
        dispatch(slice.actions.fetchDirectConversations({conversations}))
    }
}

export const AddDirectConversation = ({conversation }) => {
    return async (dispatch, getState) => {
        dispatch(slice.actions.addDirectConversation({conversation}))
    }
}

export const UpdateDirectConversation = ({conversation}) => {
    return async (dispatch, getState) => {
        dispatch(slice.actions.updateDirectConversation({conversation}))
    }
}

export const SetCurrentConversation = (current_conversation) => {
    return async (dispatch, getState) => {
        dispatch(slice.actions.setCurrentConversation(current_conversation));
    };
};


export const FetchCurrentMessages = ({messages}) => {
    return async(dispatch, getState) => {
        dispatch(slice.actions.fetchCurrentMessages({messages}));
    }
}

export const AddDirectMessage = (message) => {
    return async (dispatch, getState) => {
        dispatch(slice.actions.addDirectMessage({message}));
    }
}


Листинг А.129 – файл authThunks.js

import createAxiosInstance from "../../utils/axios";


export const logInThunk = async (data, thunkAPI) => {
    const axiosInstance = createAxiosInstance();
    const {email, password} = data;
    try {
        const response = await axiosInstance
            .post("/login", {email, password});
        return response.data.data;
    } catch (error) {
        console.error("Login error", error);
        return thunkAPI.rejectWithValue(error.message);
    }
}

export const signUpThunk = async (data, thunkAPI) => {
    const axiosInstance = createAxiosInstance();
    try {
        const response = await axiosInstance.post("/register", {...data});
        // console.log(response._data._data);
        return response.data.data;
    } catch (error) {
        console.error("Signup error", error);
        return thunkAPI.rejectWithValue(error.message);
    }
}

export const confirmEmailThunk = async (data, thunkAPI) => {
    try {
        const state = thunkAPI.getState();
        const token = state.auth.token;
        const axiosInstance = createAxiosInstance(token);
        const response = await axiosInstance.post("/email-verification", {...data});
        // console.log(response);
        if (response.status === 200) {
            return true
        }
    } catch (error) {
        console.error("Signup error", error);
        return thunkAPI.rejectWithValue(error.message);
    }
}

export const forgotPasswordThunk = async (data, thunkAPI) => {
    const axiosInstance = createAxiosInstance();
    const {email} = data;
    try {
        const response = await axiosInstance.post("/forgot-password", {email});
        return response.data.data.success;
    } catch (error) {
        console.error("forgot password error", error);
        return thunkAPI.rejectWithValue("User email not registered yet");
    }
}

export const resetPasswordThunk = async (data, thunkAPI) => {
    const axiosInstance = createAxiosInstance();
    try {
        const response = await axiosInstance.post("/reset-password", {...data});
        return response.data.data.success;
    } catch (error) {
        console.error("Reset password error", error);
        return thunkAPI.rejectWithValue("Failed to reset password");
    }
}
export const logOutThunk = async (_, thunkAPI) => {
    try {
        const state = thunkAPI.getState();
        const token = state.auth.token;
        const axiosInstance = createAxiosInstance(token);
        await axiosInstance.get(`/logout`);
        window.localStorage.removeItem("user_id");
        return true
    } catch (error) {
        console.error("Logout error", error);
        return thunkAPI.rejectWithValue(error.message);
    }
}

export const createEventThunk = async (_, thunkAPI) => {
    try {
        const state = thunkAPI.getState();
        const token = state.auth.token;
        const axiosInstance = createAxiosInstance(token);
        const response = await axiosInstance.get(`/test`);
        console.log(response)
        return response
    } catch (error) {
        console.error("get event", error);
        return thunkAPI.rejectWithValue(error.message);
    }
}

export const getAllUsersThunk = async (_, thunkAPI) => {
    try {
        const state = thunkAPI.getState();
        const token = state.auth.token;
        const axiosInstance = createAxiosInstance(token);
        const response = await axiosInstance.get(`/users`);
        return response.data.data
    } catch (error) {
        console.error("get users", error);
        return thunkAPI.rejectWithValue(error.message);
    }
}




Листинг А.130 – файл reducerFeatures.js



Листинг А.131 – файл index.js

import { Suspense, lazy } from "react";
import { Navigate, useRoutes } from "react-router-dom";

// layouts
import DashboardLayout from "../layouts/dashboard";
import MainLayout from "../layouts/main";

// config
import { DEFAULT_PATH } from "../config";
import LoadingScreen from "../components/LoadingScreen";

const Loadable = (Component) => (props) => {
  return (
    <Suspense fallback={<LoadingScreen />}>
      <Component {...props} />
    </Suspense>
  );
};

export default function Router() {
  return useRoutes([
    {
      path: "/auth",
      element: <MainLayout />,
      children: [
        {path: "login", index: true, element: <LoginPage /> },
        {path: "register", element: <RegisterPage /> },
        {path: "reset-password", element: <ResetPasswordPage /> },
      ]
    },
    {
      path: "/",
      element: <DashboardLayout />,
      children: [
        { element: <Navigate to={DEFAULT_PATH} replace />, index: true },
        { path: "app", element: <GeneralApp /> },
        { path: "settings", element: <Settings /> },
        { path: "group", element: <GroupPage /> },
        { path: "call", element: <CallPage /> },
        { path: "profile", element: <ProfilePage /> },
        { path: "conversation", element: <Conversation /> },
        { path: "intro", element: <Intro /> },
        { path: "join-room", element: <Join /> },
        { path: "room", element: <Room /> },

        { path: "404", element: <Page404 /> },
        { path: "*", element: <Navigate to="/404" replace /> },
      ],
    },
    { path: "*", element: <Navigate to="/404" replace /> },
    { path: "/landing", element: <LandingPage /> },
  ]);
}

const GeneralApp = Loadable(
  lazy(() => import("../pages/dashboard/GeneralApp")),
);
const LandingPage = Loadable(lazy(() => import("../pages/LandingPage")));
const LoginPage = Loadable(lazy(() => import("../pages/auth/Login")));
const RegisterPage = Loadable(lazy(() => import("../pages/auth/Register")));
const ResetPasswordPage = Loadable(lazy(() => import("../pages/auth/ResetPassword")));


const Page404 = Loadable(lazy(() => import("../pages/Page404")));
const Settings = Loadable(lazy(() => import("../pages/dashboard/Settings")));
const GroupPage = Loadable(lazy(() => import("../pages/dashboard/Group")));
const CallPage = Loadable(lazy(() => import("../pages/dashboard/Call")));
const ProfilePage = Loadable(lazy(() => import("../pages/dashboard/Profile")));
const Intro = Loadable(lazy(() => import("../pages/dashboard/Intro")));
const Join = Loadable(lazy(() => import("../pages/dashboard/Join")));
const Room = Loadable(lazy(() => import("../pages/dashboard/Room")));
const Conversation = Loadable(lazy(() => import("../pages/dashboard/Conversation")));


Листинг А.132 – файл paths.js

function path(root, sublink) {
    return `${root}${sublink}`;
}

const ROOTS_DASHBOARD = "/";

export const PATH_DASHBOARD = {
    root: ROOTS_DASHBOARD,
    general: {
        app: path(ROOTS_DASHBOARD, "app"),
    },
};


Листинг А.133 – файл LoginForm.js

import React, {useState} from 'react';
import * as Yup from 'yup';
import {useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";
import {useNavigate, Link as RouterLink} from "react-router-dom";
import {Alert, Button, IconButton, InputAdornment, Link, Stack} from "@mui/material";
import {Eye, EyeSlash} from "phosphor-react";
import {useTheme} from "@mui/material/styles";
import {useDispatch, useSelector} from "react-redux";

import FormProvider, {RHFTextField} from "../../components/hook-form";
import {loginUser} from "../../redux/slices/authSlice";
import SubmittingLoader from "../../components/SubmittingLoader";

const LoginForm = () => {
    const theme = useTheme();
    const dispatch = useDispatch();
    const {isLoading} = useSelector(store => store.auth);
    const navigate = useNavigate();
    const [showPassword, setShowPassword] = useState(false);
    const LoginSchema = Yup.object().shape({
        email: Yup.string().required("Email is required").email("Email must be a valid email address"),
        password: Yup.string().required("Password is required"),
    });

    const defaultValues = {
        email: "makiese@yandex.ru",
        password: "demo1234"
    }
    const methods = useForm({
        resolver: yupResolver(LoginSchema),
        defaultValues,
    });

    const {
        reset,
        setError,
        handleSubmit,
        formState: {errors, isSubmitting, isSubmitSuccessful}
    } = methods;

    const onSubmit = async (data) => {
        try {
            // submit _data to server api
            const response = await dispatch(loginUser(data))
            console.log(response)
            console.log(response)
            if (response.type === "user/login/fulfilled"){
                setTimeout(() => {
                    navigate("/app");
                    reset();
                }, 1000);
            }else{
                setError("afterSubmit", {
                    message: response.payload,
                })
            }
        } catch (error) {
            reset();
            setError("afterSubmit", {
                ...error,
                message: error.message,
            })
        }
    }

    return (
        <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
            <Stack spacing={3}>
                {!!errors.afterSubmit && <Alert severity="error">{errors.afterSubmit.message}</Alert>}
                {isSubmitting && <SubmittingLoader />}
                {isSubmitSuccessful && <Alert severity="success">{"form submitted successfully"}</Alert>}

                <RHFTextField name={"email"} label="Email address"/>
                <RHFTextField
                    name={"password"}
                    label="Password"
                    type={showPassword ? 'text' : "password"}
                    InputProps={{
                        endAdornment: (
                            <InputAdornment position={"end"}>
                                <IconButton onClick={() => setShowPassword((prev) => !prev)}>
                                    {showPassword ? <Eye/> : <EyeSlash/>}
                                </IconButton>
                            </InputAdornment>
                        )
                    }}
                />
            </Stack>
            <Stack alignItems={"flex-end"} sx={{my: 2}}>
                <Link
                    to={"/auth/reset-password"}
                    component={RouterLink}
                    variant={"body2"}
                    color={"inherit"}
                    underline={"always"}
                >
                    Forgot Password?
                </Link>
            </Stack>
            <Button
                fullWidth
                color={"inherit"}
                size={"large"}
                type={"submit"}
                variant={"contained"}
                disabled={isLoading}
                sx={{
                    backgroundColor: theme.palette.primary.main,
                    color: (theme) => theme.palette.mode === "light" ? "common.white" : "grey.800",
                    '&:hover': {
                        backgroundColor: "text.primary",
                        color: (theme) => theme.palette.mode === "light" ? "common.white" : "grey.800"
                    }
                }}
            >
                Log in now
            < /Button>
        </FormProvider>
    );
};

export default LoginForm;


Листинг А.134 – файл RegisterForm.js

import React, {useState} from 'react';
import * as Yup from 'yup';
import {useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";
import {Alert, Button, IconButton, InputAdornment, Stack} from "@mui/material";
import {Eye, EyeSlash} from "phosphor-react";
import {useTheme} from "@mui/material/styles";
import {useNavigate} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";

import {confirmEmail, registerUser} from "../../redux/slices/authSlice";
import SubmittingLoader from "../../components/SubmittingLoader";
import FormProvider, {RHFTextField} from "../../components/hook-form";
import RHFOtpCodes from "../../components/hook-form/RHFOtpCodes";

const RegisterForm = () => {
    const theme = useTheme();
    const dispatch = useDispatch();
    const {isLoading} = useSelector(store => store.auth);
    const [isSucceed, setIsSucceed] = useState(false);
    const inputs = ["code1", "code2", "code3", "code4", "code5", "code6"];
    const [isOtpSucceed, setOtpIsSucceed] = useState(false);
    const navigate = useNavigate();
    const [showPassword, setShowPassword] = useState(false);
    const RegisterSchema = Yup.object().shape({
        first_name: Yup.string().required("First Name is required"),
        last_name: Yup.string().required("Last Name is required"),
        email: Yup.string()
            .required("Email is required")
            .email("Email must be a valid email address"),
        password: Yup.string().required("Password is required"),
        password_confirmation: Yup.string()
            .required('Confirm password is required')
            .oneOf([Yup.ref('password'), null], 'Passwords must match')
    });

    const registerSchema_with_otp = Yup.object().shape({
        email: Yup.string().required("Email is required").email("Email must be a valid email address"),
        code1: Yup.string().required("OTP is required"),
        code2: Yup.string().required("OTP is required"),
        code3: Yup.string().required("OTP is required"),
        code4: Yup.string().required("OTP is required"),
        code5: Yup.string().required("OTP is required"),
        code6: Yup.string().required("OTP is required"),
    });

    const defaultValues = {
        first_name: "",
        last_name: "",
        email: "demo@htech-cloud.com",
        password: "demo12345",
        password_confirmation: "demo12345"
    }
    const methods = useForm({
        resolver: yupResolver(isSucceed ? registerSchema_with_otp : RegisterSchema),
        defaultValues,
    });

    const {
        reset,
        setError,
        handleSubmit,
        formState: {errors, isSubmitting, isSubmitSuccessful}
    } = methods;

    const onSubmit = async (data) => {
        try {
            // submit _data to server api
            console.log(data)
            if (isSucceed) {
                const codeOtp = data.code1 + "" + data.code2 + "" + data.code3 + "" + data.code4 + "" + data.code5 + "" + data.code6;
                const {email} = data;
                const confirmationData = {
                    email: email,
                    otp: codeOtp
                }
                setOtpIsSucceed(true)
                const confirmResponse = await dispatch(confirmEmail(confirmationData))
                if (confirmResponse.type === "user/confirm-email/fulfilled") {
                    setTimeout(() => {
                        navigate("/auth/login");
                        reset();
                    }, 2000);
                }
            } else {
                const response = await dispatch(registerUser(data));
                if (response.type === "user/register/fulfilled") {
                    setIsSucceed(true);
                }
            }
        } catch (error) {
            console.log(error);
            reset();
            setError("afterSubmit", {
                ...error,
                message: error.message,
            })
        }
    }

    return (
        <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
            <Stack spacing={3}>
                {!!errors.afterSubmit && <Alert severity="error">{errors.afterSubmit.message}</Alert>}
                {isSubmitting && <SubmittingLoader/>}
                {!isOtpSucceed &&
                    isSubmitSuccessful &&
                    <Alert security="success">
                        {isSucceed ? "check your email and provide the otp code" : "form submitted successfully"}
                    </Alert>
                }

                {!isSucceed &&
                    <Stack direction={{xs: "column", sm: "row"}} spacing={2}>
                        <RHFTextField name={"first_name"} label={"First Name"}/>
                        <RHFTextField name={"last_name"} label={"Last Name"}/>
                    </Stack>
                }

                <RHFTextField name={"email"} label="Email address"/>
                {!isSucceed ?
                    <>
                        <RHFTextField
                            name={"password"}
                            label="Password"
                            type={showPassword ? 'text' : "password"}
                            InputProps={{
                                endAdornment: (
                                    <InputAdornment position={"end"}>
                                        <IconButton onClick={() => setShowPassword((prev) => !prev)}>
                                            {showPassword ? <Eye/> : <EyeSlash/>}
                                        </IconButton>
                                    </InputAdornment>
                                )
                            }}
                        />
                        <RHFTextField
                            name={"password_confirmation"}
                            label="Confirm Password"
                            type={showPassword ? 'text' : "password"}
                            InputProps={{
                                endAdornment: (
                                    <InputAdornment position={"end"}>
                                        <IconButton onClick={() => setShowPassword((prev) => !prev)}>
                                            {showPassword ? <Eye/> : <EyeSlash/>}
                                        </IconButton>
                                    </InputAdornment>
                                )
                            }}
                        />
                    </> :
                    // <RHFTextField name={"otp"} label="Provide the email code confirmation"/>
                    <RHFOtpCodes keyName={"code"} inputs={inputs}/>
                }
            </Stack>
            <Button
                fullWidth
                color="inherit"
                size="large"
                type={"submit"}
                variant="contained"
                disabled={isLoading}
                sx={{
                    mt: 5,
                    backgroundColor: theme.palette.primary.main,
                    color: (theme) => theme.palette.mode === "light" ? "common.white" : "grey.800",
                    '&:hover': {
                        backgroundColor: "text.primary",
                        color: (theme) => theme.palette.mode === "light" ? "common.white" : "grey.800"
                    }
                }}
            >
                {isSucceed ? "Confirm Email" : "Create Account"}
            < /Button>
        </FormProvider>
    );
};

export default RegisterForm;


Листинг А.135 – файл ResetPasswordForm.js

import React, {useState} from 'react';
import * as Yup from 'yup';
import {useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";

import FormProvider, {RHFTextField} from "../../components/hook-form";
import {Alert, Button, IconButton, InputAdornment, Stack} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {Eye, EyeSlash} from "phosphor-react";
import SubmittingLoader from "../../components/SubmittingLoader";
import {useDispatch, useSelector} from "react-redux";
import {forgotPassword, resetUserPassword} from "../../redux/slices/authSlice";
import {useNavigate} from "react-router-dom";
import RHFOtpCodes from "../../components/hook-form/RHFOtpCodes";
// import {useNavigate} from "react-router-dom";

const ResetPasswordForm = () => {
    const theme = useTheme();
    const dispatch = useDispatch();
    const {isLoading} = useSelector(store => store.auth);
    const navigate = useNavigate();
    const inputs = ["code1", "code2", "code3", "code4", "code5", "code6"];
    const [isSucceed, setIsSucceed] = useState(false);
    const [showNewPassword, setShowNewPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    // const navigate = useNavigate();
    const ResetSchema = Yup.object().shape({
        email: Yup.string().required("Email is required").email("Email must be a valid email address"),
    });

    const ResetSchema_with_password = Yup.object().shape({
        email: Yup.string().required("Email is required").email("Email must be a valid email address"),
        password: Yup.string().required("New password is required"),
        code1: Yup.string().required("OTP is required"),
        code2: Yup.string().required("OTP is required"),
        code3: Yup.string().required("OTP is required"),
        code4: Yup.string().required("OTP is required"),
        code5: Yup.string().required("OTP is required"),
        code6: Yup.string().required("OTP is required"),
        password_confirmation: Yup.string().required("Confirm Password is required").oneOf([Yup.ref("password"), null], "Confirm Password not match with password"),
    });

    const defaultValues = {
        email: "demo@htech-cloud.com",
    }

    const methods = useForm({
        resolver: yupResolver(isSucceed ? ResetSchema_with_password : ResetSchema),
        defaultValues,
    });


    const {
        reset,
        setError,
        handleSubmit,
        formState: {errors, isSubmitting, isSubmitSuccessful}
    } = methods;

    const onSubmit = async (data) => {
        try {
            // submit _data to server api
            if (isSucceed) {
                const codeOtp = data.code1+""+data.code2+""+data.code3+""+data.code4+""+data.code5+""+data.code6;
                const dataToSend = {
                    email: data.email,
                    password: data.password,
                    password_confirmation: data.password_confirmation,
                    otp: codeOtp
                }
                const response = await dispatch(resetUserPassword(dataToSend));
                if (response.type === "user/reset-password/rejected") {
                    setError("afterSubmit", {
                        message: response.payload ? response.payload : "Email not registered yet",
                    })
                }
                if (response.type === "user/reset-password/fulfilled") {
                    setTimeout(() => {
                        navigate("/auth/login");
                        reset();
                    }, 1300);
                }

            } else {
                // console.log("form submitted second", _data);
                const response = await dispatch(forgotPassword(data));
                if (response.type === "user/forgot-password/rejected") {
                    setError("afterSubmit", {
                        message: response.payload,
                    })
                }
                if (response.type === "user/forgot-password/fulfilled") {
                    setIsSucceed(true);
                }
            }

            // navigate("/app");
            // reset();

        } catch (error) {
            console.log(error);
            reset();
            setError("afterSubmit", {
                ...error,
                message: error.message,
            })
        }
    }

    return (
        <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
            <Stack spacing={3}>
                {!!errors.afterSubmit && <Alert severity="error">{errors.afterSubmit.message}</Alert>}
                {isSubmitting && <SubmittingLoader/>}
                {isSubmitSuccessful &&
                    <Alert security="success">
                        {isSucceed ? "check your email and provide the otp code" : "form submitted successfully"}
                    </Alert>
                }

                <RHFTextField name={"email"} label="Email address"/>
                {isSucceed &&
                    <>
                        {/*  TODO: remplace this Otp by 6 digits like RHFCodes */}
                        {/*<RHFTextField name={"otp"} label="Provide the email code confirmation"/>*/}
                        <RHFOtpCodes keyName={"code"} inputs={inputs} />
                        <RHFTextField
                            name={"password"}
                            label="New Password"
                            type={showNewPassword ? 'text' : "password"}
                            InputProps={{
                                endAdornment: (
                                    <InputAdornment position={"end"}>
                                        <IconButton onClick={() => setShowNewPassword((prev) => !prev)}>
                                            {showNewPassword ? <Eye/> : <EyeSlash/>}
                                        </IconButton>
                                    </InputAdornment>
                                )
                            }}
                        />

                        <RHFTextField
                            name={"password_confirmation"}
                            label="Confirm Password"
                            type={showConfirmPassword ? 'text' : "password"}
                            InputProps={{
                                endAdornment: (
                                    <InputAdornment position={"end"}>
                                        <IconButton onClick={() => setShowConfirmPassword((prev) => !prev)}>
                                            {showConfirmPassword ? <Eye/> : <EyeSlash/>}
                                        </IconButton>
                                    </InputAdornment>
                                )
                            }}
                        />
                    </>
                }

                <Button
                    fullWidth
                    color={"inherit"}
                    size={"large"}
                    type={"submit"}
                    variant={"contained"}
                    disabled={isLoading}
                    sx={{
                        backgroundColor: theme.palette.primary.main,
                        color: (theme) => theme.palette.mode === "light" ? "common.white" : "grey.800",
                        '&:hover': {
                            backgroundColor: "text.primary",
                            color: (theme) => theme.palette.mode === "light" ? "common.white" : "grey.800"
                        }
                    }}
                >
                    {!isSucceed ? "Send Request" : "Reset Password"}
                < /Button>
            </Stack>
        </FormProvider>
    );
};

export default ResetPasswordForm;


Листинг А.136 – файл Contact.js

import React, { useState } from "react";
import { useTheme } from "@mui/material/styles";
import {
    Avatar,
    Box,
    Button,
    Divider,
    IconButton,
    Stack,
    Typography,
    Slide,
    Dialog,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
} from "@mui/material";
import { faker } from "@faker-js/faker";
import {
    Bell,
    CaretRight,
    Phone,
    Prohibit,
    Star,
    Trash,
    VideoCamera,
    X,
} from "phosphor-react";
import useResponsive from "../../hooks/useResponsive";
import AntSwitch from "../../components/AntSwitch";
import { useDispatch, useSelector } from "react-redux";
import { ToggleSidebar, UpdateSidebarType } from "../../redux/slices/appSlice";

const Transition = React.forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});

const BlockDialog = ({ open, handleClose }) => {
    return (
        <Dialog
            open={open}
            TransitionComponent={Transition}
            keepMounted
            onClose={handleClose}
            aria-describedby="alert-dialog-slide-description"
        >
            <DialogTitle>Block this contact</DialogTitle>
            <DialogContent>
                <DialogContentText id="alert-dialog-slide-description">
                    Are you sure you want to block this Contact?
                </DialogContentText>
            </DialogContent>
            <DialogActions>
                <Button onClick={handleClose}>Cancel</Button>
                <Button onClick={handleClose}>Yes</Button>
            </DialogActions>
        </Dialog>
    );
};

const DeleteChatDialog = ({ open, handleClose }) => {
    return (
        <Dialog
            open={open}
            TransitionComponent={Transition}
            keepMounted
            onClose={handleClose}
            aria-describedby="alert-dialog-slide-description"
        >
            <DialogTitle>Delete this chat</DialogTitle>
            <DialogContent>
                <DialogContentText id="alert-dialog-slide-description">
                    Are you sure you want to delete this chat?
                </DialogContentText>
            </DialogContent>
            <DialogActions>
                <Button onClick={handleClose}>Cancel</Button>
                <Button onClick={handleClose}>Yes</Button>
            </DialogActions>
        </Dialog>
    );
};

const Contact = () => {
    const dispatch = useDispatch();

    const {current_conversation} = useSelector((state) => state.conversation.direct_chat);

    const theme = useTheme();

    const isDesktop = useResponsive("up", "md");

    const [openBlock, setOpenBlock] = useState(false);
    const [openDelete, setOpenDelete] = useState(false);

    const handleCloseBlock = () => {
        setOpenBlock(false);
    }
    const handleCloseDelete = () => {
        setOpenDelete(false);
    }

    return (
        <Box sx={{ width: !isDesktop ? "100vw" : 320, maxHeight: "100vh" }}>
            <Stack sx={{ height: "100%" }}>
                <Box
                    sx={{
                        boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.25)",
                        width: "100%",
                        backgroundColor:
                            theme.palette.mode === "light"
                                ? "#F8FAFF"
                                : theme.palette.background,
                    }}
                >
                    <Stack
                        sx={{ height: "100%", p: 2 }}
                        direction="row"
                        alignItems={"center"}
                        justifyContent="space-between"
                        spacing={3}
                    >
                        <Typography variant="subtitle2">Contact Info</Typography>
                        <IconButton
                            onClick={() => {
                                dispatch(ToggleSidebar());
                            }}
                        >
                            <X />
                        </IconButton>
                    </Stack>
                </Box>
                <Stack
                    sx={{
                        height: "100%",
                        position: "relative",
                        flexGrow: 1,
                        overflow: "scroll",
                    }}
                    p={3}
                    spacing={3}
                >
                    <Stack alignItems="center" direction="row" spacing={2}>
                        <Avatar
                            src={current_conversation?.img}
                            alt={current_conversation?.name}
                            sx={{ height: 64, width: 64 }}
                        />
                        <Stack spacing={0.5}>
                            <Typography variant="article" fontWeight={600}>
                                {current_conversation?.name}
                            </Typography>
                            <Typography variant="body2" fontWeight={500}>
                                {"+91 62543 28 739"}
                            </Typography>
                        </Stack>
                    </Stack>
                    <Stack
                        direction="row"
                        alignItems="center"
                        justifyContent={"space-evenly"}
                    >
                        <Stack alignItems={"center"} spacing={1}>
                            <IconButton>
                                <Phone />
                            </IconButton>

                            <Typography variant="overline">Voice</Typography>
                        </Stack>
                        <Stack alignItems={"center"} spacing={1}>
                            <IconButton>
                                <VideoCamera />
                            </IconButton>
                            <Typography variant="overline">Video</Typography>
                        </Stack>
                    </Stack>
                    <Divider />
                    <Stack spacing={0.5}>
                        <Typography variant="article" fontWeight={600}>
                            About
                        </Typography>
                        <Typography variant="body2" fontWeight={500}>
                            {current_conversation?.about}
                        </Typography>
                    </Stack>
                    <Divider />
                    <Stack
                        direction="row"
                        alignItems="center"
                        justifyContent={"space-between"}
                    >
                        <Typography variant="subtitle2">Media, Links & Docs</Typography>
                        <Button
                            onClick={() => {
                                dispatch(UpdateSidebarType("SHARED"));
                            }}
                            endIcon={<CaretRight />}
                        >
                            401
                        </Button>
                    </Stack>
                    <Stack direction={"row"} alignItems="center" spacing={2}>
                        {[1, 2, 3].map((el) => (
                            <Box>
                                <img src={faker.image.city()} alt={faker.internet.userName()} />
                            </Box>
                        ))}
                    </Stack>
                    <Divider />
                    <Stack
                        direction="row"
                        alignItems="center"
                        justifyContent={"space-between"}
                    >
                        <Stack direction="row" alignItems="center" spacing={2}>
                            <Star size={21} />
                            <Typography variant="subtitle2">Starred Messages</Typography>
                        </Stack>

                        <IconButton
                            onClick={() => {
                                dispatch(UpdateSidebarType("STARRED"));
                            }}
                        >
                            <CaretRight />
                        </IconButton>
                    </Stack>
                    <Divider />
                    <Stack
                        direction="row"
                        alignItems="center"
                        justifyContent={"space-between"}
                    >
                        <Stack direction="row" alignItems="center" spacing={2}>
                            <Bell size={21} />
                            <Typography variant="subtitle2">Mute Notifications</Typography>
                        </Stack>

                        <AntSwitch />
                    </Stack>
                    <Divider />
                    <Typography variant="body2">1 group in common</Typography>
                    <Stack direction="row" alignItems={"center"} spacing={2}>
                        <Avatar src={faker.image.imageUrl()} alt={faker.name.fullName()} />
                        <Stack direction="column" spacing={0.5}>
                            <Typography variant="subtitle2">Camel’s Gang</Typography>
                            <Typography variant="caption">
                                Owl, Parrot, Rabbit , You
                            </Typography>
                        </Stack>
                    </Stack>
                    <Divider />
                    <Stack direction="row" alignItems={"center"} spacing={2}>
                        <Button
                            onClick={() => {
                                setOpenBlock(true);
                            }}
                            fullWidth
                            startIcon={<Prohibit />}
                            variant="outlined"
                        >
                            Block
                        </Button>
                        <Button
                            onClick={() => {
                                setOpenDelete(true);
                            }}
                            fullWidth
                            startIcon={<Trash />}
                            variant="outlined"
                        >
                            Delete
                        </Button>
                    </Stack>
                </Stack>
            </Stack>
            {openBlock && <BlockDialog open={openBlock} handleClose={handleCloseBlock} />}
            {openDelete && <DeleteChatDialog open={openDelete} handleClose={handleCloseDelete} />}
        </Box>
    );
};

export default Contact;


Листинг А.137 – файл Conversation.js

import React from "react";
import {
    Stack,
    Box,
    Typography,
    Menu,
    MenuItem,
    IconButton,
    Divider,
} from "@mui/material";
import { useTheme, alpha } from "@mui/material/styles";
import { DotsThreeVertical, DownloadSimple, Image } from "phosphor-react";
import { Message_options } from "../../_data";
import { Link } from "react-router-dom";
import truncateString from "../../utils/truncate";
// import { LinkPreview } from "@dhaiwat10/react-link-preview";
import Embed from "react-embed";

const MessageOption = () => {
    const [anchorEl, setAnchorEl] = React.useState(null);
    const open = Boolean(anchorEl);
    const handleClick = (event) => {
        setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
        setAnchorEl(null);
    };
    return (
        <>
            <DotsThreeVertical
                size={20}
                id="basic-button"
                aria-controls={open ? "basic-menu" : undefined}
                aria-haspopup="true"
                aria-expanded={open ? "true" : undefined}
                onClick={handleClick}
            />
            <Menu
                id="basic-menu"
                anchorEl={anchorEl}
                open={open}
                onClose={handleClose}
                MenuListProps={{
                    "aria-labelledby": "basic-button",
                }}
            >
                <Stack spacing={1} px={1}>
                    {Message_options.map((el) => (
                        <MenuItem onClick={handleClose}>{el.title}</MenuItem>
                    ))}
                </Stack>
            </Menu>
        </>
    );
};

const TextMsg = ({ el, menu }) => {
    const theme = useTheme();
    return (
        <Stack direction="row" justifyContent={el.incoming ? "start" : "end"}>
            <Box
                px={1.5}
                py={1.5}
                sx={{
                    backgroundColor: el.incoming
                        ? alpha(theme.palette.background.default, 1)
                        : theme.palette.primary.main,
                    borderRadius: 1.5,
                    width: "max-content",
                }}
            >
                <Typography
                    variant="body2"
                    color={el.incoming ? theme.palette.text : "#fff"}
                >
                    {el.message}
                </Typography>
            </Box>
            {menu && <MessageOption />}
        </Stack>
    );
};
const MediaMsg = ({ el, menu }) => {
    const theme = useTheme();
    return (
        <Stack direction="row" justifyContent={el.incoming ? "start" : "end"}>
            <Box
                px={1.5}
                py={1.5}
                sx={{
                    backgroundColor: el.incoming
                        ? alpha(theme.palette.background.default, 1)
                        : theme.palette.primary.main,
                    borderRadius: 1.5,
                    width: "max-content",
                }}
            >
                <Stack spacing={1}>
                    <img
                        src={el.img}
                        alt={el.message}
                        style={{ maxHeight: 210, borderRadius: "10px" }}
                    />
                    <Typography
                        variant="body2"
                        color={el.incoming ? theme.palette.text : "#fff"}
                    >
                        {el.message}
                    </Typography>
                </Stack>
            </Box>
            {menu && <MessageOption />}
        </Stack>
    );
};
const DocMsg = ({ el, menu }) => {
    const theme = useTheme();
    return (
        <Stack direction="row" justifyContent={el.incoming ? "start" : "end"}>
            <Box
                px={1.5}
                py={1.5}
                sx={{
                    backgroundColor: el.incoming
                        ? alpha(theme.palette.background.default, 1)
                        : theme.palette.primary.main,
                    borderRadius: 1.5,
                    width: "max-content",
                }}
            >
                <Stack spacing={2}>
                    <Stack
                        p={2}
                        direction="row"
                        spacing={3}
                        alignItems="center"
                        sx={{
                            backgroundColor: theme.palette.background.paper,
                            borderRadius: 1,
                        }}
                    >
                        <Image size={48} />
                        <Typography variant="caption">Abstract.png</Typography>
                        <IconButton>
                            <DownloadSimple />
                        </IconButton>
                    </Stack>
                    <Typography
                        variant="body2"
                        color={el.incoming ? theme.palette.text : "#fff"}
                    >
                        {el.message}
                    </Typography>
                </Stack>
            </Box>
            {menu && <MessageOption />}
        </Stack>
    );
};
const LinkMsg = ({ el, menu }) => {
    const theme = useTheme();
    return (
        <Stack direction="row" justifyContent={el.incoming ? "start" : "end"}>
            <Box
                px={1.5}
                py={1.5}
                sx={{
                    backgroundColor: el.incoming
                        ? alpha(theme.palette.background.default, 1)
                        : theme.palette.primary.main,
                    borderRadius: 1.5,
                    width: "max-content",
                }}
            >
                <Stack spacing={2}>
                    <Stack
                        p={2}
                        direction="column"
                        spacing={3}
                        alignItems="start"
                        sx={{
                            backgroundColor: theme.palette.background.paper,
                            borderRadius: 1,
                        }}
                    >
                        <Stack direction={"column"} spacing={2}>
                            <Embed
                                width="300px"
                                isDark
                                url={`https://youtu.be/xoWxBR34qLE`}
                            />
                        </Stack>
                    </Stack>
                    <Typography
                        variant="body2"
                        color={el.incoming ? theme.palette.text : "#fff"}
                    >
                        <div dangerouslySetInnerHTML={{ __html: el.message }}></div>
                    </Typography>
                </Stack>
            </Box>
            {menu && <MessageOption />}
        </Stack>
    );
};
const ReplyMsg = ({ el, menu }) => {
    const theme = useTheme();
    return (
        <Stack direction="row" justifyContent={el.incoming ? "start" : "end"}>
            <Box
                px={1.5}
                py={1.5}
                sx={{
                    backgroundColor: el.incoming
                        ? alpha(theme.palette.background.paper, 1)
                        : theme.palette.primary.main,
                    borderRadius: 1.5,
                    width: "max-content",
                }}
            >
                <Stack spacing={2}>
                    <Stack
                        p={2}
                        direction="column"
                        spacing={3}
                        alignItems="center"
                        sx={{
                            backgroundColor: alpha(theme.palette.background.paper, 1),

                            borderRadius: 1,
                        }}
                    >
                        <Typography variant="body2" color={theme.palette.text}>
                            {el.message}
                        </Typography>
                    </Stack>
                    <Typography
                        variant="body2"
                        color={el.incoming ? theme.palette.text : "#fff"}
                    >
                        {el.reply}
                    </Typography>
                </Stack>
            </Box>
            {menu && <MessageOption />}
        </Stack>
    );
};
const Timeline = ({ el }) => {
    const theme = useTheme();
    return (
        <Stack direction="row" alignItems={"center"} justifyContent="space-between">
            <Divider width="46%" />
            <Typography variant="caption" sx={{ color: theme.palette.text }}>
                {el.text}
            </Typography>
            <Divider width="46%" />
        </Stack>
    );
};

export { Timeline, MediaMsg, LinkMsg, DocMsg, TextMsg, ReplyMsg };


Листинг А.138 – файл SharedMessages.js

import React from "react";
import { useTheme } from "@mui/material/styles";
import {
    Box,
    IconButton,
    Stack,
    Typography,
    Tabs,
    Tab,
    Grid,
} from "@mui/material";
import { ArrowLeft } from "phosphor-react";
import useResponsive from "../../hooks/useResponsive";
import { useDispatch } from "react-redux";
import { UpdateSidebarType } from "../../redux/slices/appSlice";
import { faker } from "@faker-js/faker";
import { DocMsg, LinkMsg } from "./Conversation";
import { SHARED_DOCS, SHARED_LINKS } from "../../_data";

const Media = () => {
    const dispatch = useDispatch();

    const theme = useTheme();

    const isDesktop = useResponsive("up", "md");

    const [value, setValue] = React.useState(0);

    const handleChange = (event, newValue) => {
        setValue(newValue);
    };

    return (
        <Box sx={{ width: !isDesktop ? "100vw" : 320, maxHeight: "100vh" }}>
            <Stack sx={{ height: "100%" }}>
                <Box
                    sx={{
                        boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.25)",
                        width: "100%",
                        backgroundColor:
                            theme.palette.mode === "light"
                                ? "#F8FAFF"
                                : theme.palette.background,
                    }}
                >
                    <Stack
                        sx={{ height: "100%", p: 2 }}
                        direction="row"
                        alignItems={"center"}
                        spacing={3}
                    >
                        <IconButton
                            onClick={() => {
                                dispatch(UpdateSidebarType("CONTACT"));
                            }}
                        >
                            <ArrowLeft />
                        </IconButton>
                        <Typography variant="subtitle2">Shared</Typography>
                    </Stack>
                </Box>

                <Tabs value={value} onChange={handleChange} centered>
                    <Tab label="Media" />
                    <Tab label="Links" />
                    <Tab label="Docs" />
                </Tabs>
                <Stack
                    sx={{
                        height: "100%",
                        position: "relative",
                        flexGrow: 1,
                        overflow: "scroll",
                    }}
                    spacing={3}
                    padding={value === 1 ? 1 : 3}
                >
                    {/* <Conversation starred={true} /> */}
                    {(() => {
                        switch (value) {
                            case 0:
                                return (
                                    <Grid container spacing={2}>
                                        {[0, 1, 2, 3, 4, 5, 6].map((el) => (
                                            <Grid item xs={4}>
                                                <img
                                                    src={faker.image.city()}
                                                    alt={faker.internet.userName()}
                                                />
                                            </Grid>
                                        ))}
                                    </Grid>
                                );
                            case 1:
                                return SHARED_LINKS.map((el) => <LinkMsg el={el} />);

                            case 2:
                                return SHARED_DOCS.map((el) => <DocMsg el={el} />);

                            default:
                                break;
                        }
                    })()}
                </Stack>
            </Stack>
        </Box>
    );
};

export default Media;


Листинг А.139 – файл StarredMessages.js

import React from "react";
import { useTheme } from "@mui/material/styles";
import { Box, IconButton, Stack, Typography } from "@mui/material";
import { ArrowLeft } from "phosphor-react";
import useResponsive from "../../hooks/useResponsive";
import { useDispatch } from "react-redux";
import { UpdateSidebarType } from "../../redux/slices/appSlice";
import { Conversation } from "../../pages/dashboard/Conversation";

const StarredMessages = () => {
    const dispatch = useDispatch();

    const theme = useTheme();

    const isDesktop = useResponsive("up", "md");

    return (
        <Box sx={{ width: !isDesktop ? "100vw" : 320, maxHeight: "100vh" }}>
            <Stack sx={{ height: "100%" }}>
                <Box
                    sx={{
                        boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.25)",
                        width: "100%",
                        backgroundColor:
                            theme.palette.mode === "light"
                                ? "#F8FAFF"
                                : theme.palette.background,
                    }}
                >
                    <Stack
                        sx={{ height: "100%", p: 2 }}
                        direction="row"
                        alignItems={"center"}
                        spacing={3}
                    >
                        <IconButton
                            onClick={() => {
                                dispatch(UpdateSidebarType("CONTACT"));
                            }}
                        >
                            <ArrowLeft />
                        </IconButton>
                        <Typography variant="subtitle2">Starred Messages</Typography>
                    </Stack>
                </Box>
                <Stack
                    sx={{
                        height: "100%",
                        position: "relative",
                        flexGrow: 1,
                        overflow: "scroll",
                    }}
                    spacing={3}
                >
                    <Conversation />
                </Stack>
            </Stack>
        </Box>
    );
};

export default StarredMessages;


Листинг А.140 – файл CreateCallDialog.js

import React from 'react';
import {Stack} from "@mui/material";
import {Search, SearchIconWrapper, StyledInputBase} from "../../components/Search";
import {MagnifyingGlass} from "phosphor-react";
import CallLogElement from "../../components/CallLogElement";
import {SimpleBarStyle} from "../../components/Scrollbar";
import {CALL_LOG} from "../../_data";
import ShowDialog from "../../components/dialog/ShowDialog";

const CreateCallDialogHeader = () =>(
    <Stack sx={{flexGrow: 1}}>
        <Search bgColor={"#EAF2FE"}>
            <SearchIconWrapper>
                <MagnifyingGlass color="#709CE6"/>
            </SearchIconWrapper>
            <StyledInputBase
                placeholder="Search…"
                inputProps={{"aria-label": "search"}}
            />
        </Search>
    </Stack>
)

const CreateCallDialogBody = () => {
    const appId = 510839379;
    const server = "wss://webliveroom510839379-api.coolzcloud.com/ws";
    return (
        <SimpleBarStyle timeout={500} clickOnTrack={false}>
            {CALL_LOG.map((item)=>(
                <CallLogElement isBordered={true} {...item} isDialogLog={true}/>
            ))}
        </SimpleBarStyle>
    )
}

const CreateCallDialog = ({open, handleClose}) => {
  return (
    <>
        <ShowDialog
            handleClose={handleClose}
            header={<CreateCallDialogHeader />}
            content={<CreateCallDialogBody />}
            open={open}
        />
    </>
  );
};

export default CreateCallDialog;


Листинг А.141 – файл CreateGroupDialog.js

import React from 'react';
import * as Yup from 'yup';

import DialogContainer from "../../components/dialog/DialogContainer";
import {useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";
import FormProvider, {RHFTextField} from "../../components/hook-form";
import {Button, Stack} from "@mui/material";
import RHFAutocomplete from "../../components/hook-form/RHFAutocomplete";

const MEMBERS = ["Member 1" , "Member 2" , "Member 3" , "Member 4"];

const CreateGroupForm = ({handleClose}) => {
  const NewGroupSchema = Yup.object().shape({
    title: Yup.string().required("Title is required"),
    members: Yup.array().min(2, "Must have at least 2 members"),
  })

  const defaultValues = {
    title: "",
    members: [],
  }

  const methods = useForm({
    resolver: yupResolver(NewGroupSchema),
    defaultValues,
  });

  const {
    reset,
    watch,
    setError,
    handleSubmit,
    formState: {errors, isSubmitting, isSubmitSuccessful, isValid}
  } = methods;
  const onSubmit = async (data) =>{
    try {
      // send to backend
      console.log("DATA", data)

    }catch (error){
      console.log("error",error);
      reset();
      setError("afterSubmit", {
        ...error,
        message: error.message,
      })
    }
  }

  return (
    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
      <Stack spacing={3} mt={3}>
        <RHFTextField name="title" label={"Group Name"} />
        <RHFAutocomplete
          name={"members"}
          label={"Members"}
          multiple
          freeSolo
          options={MEMBERS.map((option)=> option)}
          ChipProps={{size: "medium"}}
        />
        <Stack spacing={2} direction={"row"} alignItems={"center"} justifyContent={"end"}>
          <Button onClick={handleClose} >
            Cancel
          </Button>
          <Button type={"submit"} variant={"contained"}>
            Create
          </Button>
        </Stack>
      </Stack>
    </FormProvider>
  )
}
const CreateGroupDialog = ({open, handleClose}) => {
  return (
    <>
      <DialogContainer
        openDialog={open}
        maxWidth={"xs"}
        handleCloseDialog={handleClose}
        title={"Create New Group"}
      >
      {/*  form */}
        <CreateGroupForm handleClose={handleClose}/>


      </DialogContainer>
    </>

  );
};

export default CreateGroupDialog;


Листинг А.142 – файл ListUsersDialog.js

import React from 'react';
import {IconButton, Stack, Typography} from "@mui/material";
import {Search, SearchIconWrapper, StyledInputBase} from "../../components/Search";
import {Chat, MagnifyingGlass} from "phosphor-react";
import {SimpleBarStyle} from "../../components/Scrollbar";
import AvatarWithOnline from "../../components/ChatElements/AvatarWithOnline";
import ShowDialog from "../../components/dialog/ShowDialog";
import {socket} from "../../socket";
import {useNavigate} from "react-router-dom";

const user_id = window.localStorage.getItem("user_id");
const ListUsersDialogHeader = () => (
    <Stack sx={{flexGrow: 1}}>
        <Search bgColor={"#EAF2FE"}>
            <SearchIconWrapper>
                <MagnifyingGlass color="#709CE6"/>
            </SearchIconWrapper>
            <StyledInputBase
                placeholder="Search…"
                inputProps={{"aria-label": "search"}}
            />
        </Search>
    </Stack>
)

const CreateCallDialogBody = ({usersList}) => {
    const navigate = useNavigate();

    return (
        <SimpleBarStyle timeout={500} clickOnTrack={false}>
            {usersList.map((item) => (
                <Stack sx={{border: '1px solid primary.main'}} direction="row" justifyContent="space-between"
                       alignItems="center">
                    <Stack direction={"row"} alignItems={"center"} spacing={2} mt={2}>
                        <AvatarWithOnline image={item.image} online={false}/>
                        <Typography variant="subtitle2">
                            {item.first_name}{" "}{item.last_name}
                        </Typography>
                    </Stack>
                    <Stack>
                        <IconButton
                            onClick={() => {
                                socket.emit('start_conversation', {to: item.email, from: user_id});
                                console.log("start_conversation", {to: item.email, from: user_id});
                                navigate("/conversation")

                            }}
                        >
                            <Chat/>
                        </IconButton>
                    </Stack>
                </Stack>
            ))}
        </SimpleBarStyle>
    )
}
const ListUsersDialog = ({usersList, open, handleClose}) => {

    return (
        <>
            <ShowDialog
                handleClose={handleClose}
                header={<ListUsersDialogHeader/>}
                content={<CreateCallDialogBody usersList={usersList}/>}
                open={open}
            />
        </>
    );
};

export default ListUsersDialog;


Листинг А.143 – файл CardContainer.js

import {Button, Card, Stack} from "@mui/material";
import useResponsive from "../../hooks/useResponsive";

const CardContainer = ({children}) => {
    const isDesktop = useResponsive("up", "md");
    return (
        <>
            <Card
                sx={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    justifyContent: "center",
                    p: 4,
                    width: isDesktop ? 320 : "auto",
                    // py: 8,
                }}
            >
                {children}

            </Card>

        </>
    );
};

export default CardContainer;


Листинг А.144 – файл JoinForm.js

import * as Yup from 'yup';
import {useForm} from "react-hook-form";
import {yupResolver} from "@hookform/resolvers/yup";
import FormProvider, {RHFTextField} from "../../components/hook-form";
import {Alert, Button, Checkbox, Stack, Typography} from "@mui/material";
import SubmittingLoader from "../../components/SubmittingLoader";
import React, {useEffect} from "react";
import {useLocation, useNavigate} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {SetConnectionOnlyWithAudio, SetIdentity, SetRoomId, UpdateIsRoomHost} from "../../redux/slices/appSlice";
import {getRoomExists} from "../../utils/api";
const JoinForm = () => {
    const search = useLocation().search;
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const {isRoomHost, connectionOnlyWithAudio} = useSelector(store => store.app);
    const JoinSchema = Yup.object().shape({
        meeting_id: Yup.string().required("Meeting ID is required"),
        user_name: Yup.string().required("Username is required"),
    });
    const createRoomSchema = Yup.object().shape({
        user_name: Yup.string().required("Username is required"),
    })
    const defaultValues = {
        meeting_id: "",
        user_name: ""
    }
    const methods = useForm({
        resolver: yupResolver(isRoomHost ? createRoomSchema : JoinSchema),
        defaultValues,
    });

    const handleCancel= () => {
        navigate("/intro")
    }

    const {
        reset,
        setError,
        handleSubmit,
        formState: {errors, isSubmitting, isSubmitSuccessful}
    } = methods;

    useEffect(() => {
        const isRoomHost = new URLSearchParams(search).get("host");
        // TODO: set to the store that user is host
        dispatch(UpdateIsRoomHost(isRoomHost))

    }, [search, dispatch]);
    const onSubmit = async (data) => {
        try {
            await handleRoom(data);
        } catch (error) {
            reset();
            setError("afterSubmit", {
                ...error,
                message: "Meeting not found. Check your meeting ID and try again",
            })
        }
    }

    const handleRoom = async (data) => {

        dispatch(SetIdentity(data.user_name))
        if (isRoomHost){
            createRoom(data.user_name);
        }else{
            await joinRoom(data.meeting_id, data.user_name);
        }
    }

    const createRoom = (username) => {
        // navigate("/room")
        // console.log("createRoom");
        // console.log("username: " + username);
        navigate("/room");
    }

    const joinRoom = async (roomId, username) => {
        const response = await getRoomExists(roomId);
        // console.log("joinRoom ID: " + roomId)
        // console.log("Username: " + username)
        const {roomExists, full} = response;
        if (roomExists) {
            if (full) {
                // room full
                setError("afterSubmit", {
                    message: "Meeting is full. Please try again later",
                })
            }else {
                // join room
                dispatch(SetRoomId(roomId))
                navigate("/room");
            }
        }else {
            // room doesn't exist
            setError("afterSubmit", {
                message: "Meeting not found. Check your meeting ID and try again",
            })
        }

    }


    return (
        <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
            <Stack spacing={3}>
                {!!errors.afterSubmit && <Alert severity="error">{errors.afterSubmit.message}</Alert>}
                {isSubmitting && <SubmittingLoader />}
                {isSubmitSuccessful && <Alert severity="success">{"form submitted successfully"}</Alert>}

                {!isRoomHost &&
                    <RHFTextField name="meeting_id" label="Meeting ID"/>
                }
                <RHFTextField name="user_name" label="Enter your name"/>
                <Stack direction="row" alignItems="center" spacing={0.5}>
                    <Checkbox value={connectionOnlyWithAudio} onChange={(e)=> {
                        dispatch(SetConnectionOnlyWithAudio(e.target.checked))
                    }}/>
                    <Typography variant="subtitle2">Audio only</Typography>
                </Stack>
                <Stack direction="row" alignItems="center" spacing={2}>
                    <Button fullWidth variant="contained" type="submit">
                        {isRoomHost ? "Host" : "Join"}
                    </Button>
                    <Button fullWidth variant="outlined" color="error" onClick={handleCancel}>
                        Cancel
                    </Button>
                </Stack>
            </Stack>

        </FormProvider>
    );
};

export default JoinForm;


Листинг А.145 – файл MeetingContainer.js

import {useTheme} from "@mui/material/styles";
import useResponsive from "../../hooks/useResponsive";
import {Box,  Stack} from "@mui/material";

const MeetingContainer = ({children}) => {
    const theme = useTheme();
    const isDesktop = useResponsive("up", "md");
    return (
        <>
            <Box
                sx={{
                    position: "relative",
                    width: isDesktop ? "100vw" :  320,
                    minHeight: "100vh",
                    backgroundColor: theme.palette.mode === 'light'
                        ? '#f8faff'
                        : theme.palette.background,
                    boxShadow: "0 0 2px rgba(0, 0, 0, 0.25)",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                }}>
                <Stack
                    alignItems="center"
                    sx={{width: "100%", height: "100%"}}
                >
                    {children}
                </Stack>
            </Box>
        </>
    );
};

export default MeetingContainer;


Листинг А.146 – файл GroupChat.js

import {useTheme} from "@mui/material/styles";
import {Box, IconButton, InputAdornment, TextField, Typography} from "@mui/material";
import {PaperPlaneTilt} from "phosphor-react";

const GroupChat = () => {
    const theme = useTheme();
    return (
        <>
            <Box sx={{
                width: 320,
                height: 1,
                textAlign: "left",
                borderLeft: `1px solid ${theme.palette.divider}`,
                flexDirection: "column",
                display: "flex",
                p: 2
            }}>
                <Typography
                    variant="subtitle1"
                    sx={{color: "text.secondary"}}
                >
                    Group Chat
                </Typography>
                <Box sx={{flexGrow: 1}}>
                </Box>
                <TextField
                    placeholder="send a message..."
                    size="small"
                    InputProps={{
                        endAdornment: (
                            <InputAdornment position="end">
                                <IconButton>
                                    <PaperPlaneTilt />
                                </IconButton>
                            </InputAdornment>
                        ),
                    }}
                />
            </Box>
        </>
    );
};

export default GroupChat;


Листинг А.147 – файл Label.js

import {Box, Typography} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {useSelector} from "react-redux";

const Label = () => {
    const theme = useTheme();
    const {roomId} = useSelector(store =>store.app);
    return (
        <Box sx={{
            position: "absolute",
            top:2,
            py: 2,
            px:4,
            left: "50%",
            transform: "translateX(-50%)",
            backgroundColor: theme.palette.primary.main,
            borderRadius: 20,
            color: theme.palette.primary.contrastText
        }}>
            <Typography variant="subtitle1">
                ID: {roomId}
            </Typography>
        </Box>
    );
};

export default Label;


Листинг А.148 – файл Overlay.js

import {Box, CircularProgress} from "@mui/material";
import {alpha} from "@mui/material/styles";

const Overlay = () => {
    return (
        <Box sx={{
            position:"absolute",
            height: "100vh",
            width: "100vw",
            backgroundColor: (theme) => alpha(theme.palette.grey[700], 0.6),
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: "row"
        }}>
            <CircularProgress />
        </Box>
    );
};

export default Overlay;


Листинг А.149 – файл Participants.js

import {Box, Divider, Stack, Typography} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {useSelector} from "react-redux";

const Participants = () => {
    const theme = useTheme();
    const { participants } = useSelector(store => store.app)
    console.log(participants)
    return (
        <Box sx={{
            p: 2,
            width:320,
            display: 'flex',
            textAlign: 'left',
            flexDirection: "column",
            borderRight: `1px solid ${theme.palette.divider}`,
            borderLeft: `1px solid ${theme.palette.divider}`
        }}>
            <Box sx={{
                p:2,
                display: 'flex',
                flexDirection: "column",
                rowGap: 2,
            }}>
                <Typography variant="subtitle1" sx={{color: "text.secondary"}}>Participants Box</Typography>
                <Stack>
                    {participants?.map(({id, identity})=>(
                        <Stack key={id} spacing={0.5} justifyContent="center">
                            <Box sx={{
                                px:3,
                                py:1,
                                borderRadius:2,
                                '&:hover': {
                                    backgroundColor: theme.palette.grey[200],
                                }
                            }}>
                                <Typography variant="subtitle2" sx={{color: "#676767"}}>
                                    {identity}
                                </Typography>
                            </Box>
                            <Divider />
                        </Stack>
                    ))}
                </Stack>
            </Box>
        </Box>
    );
};

export default Participants;


Листинг А.150 – файл Video.js

import {Box, Stack} from "@mui/material";
import {useTheme} from "@mui/material/styles";
import {HangUpButton, MicrophoneButton, ShareScreenButton, VideoButton} from "../../components/room";


const Video = () => {
    const theme = useTheme();

    return (
        <Box sx={{
            flexGrow: 1,
            position: 'relative',
            height: 1,

        }}
        >
            {/* video elements   */}
            {/* video controls   */}
            <Box sx={{
                position: "absolute",
                bottom: 20,
                left: "50%",
                transform: "translateX(-50%)",
                width: "80%",
                backgroundColor: theme.palette.primary.light,
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "center",
                height: 80,
                borderRadius: 20,
            }}
            >
                <Stack direction="row" alignItems="center" justifyContent="center" spacing={1}
                       sx={{height: 1}}
                >
                    <MicrophoneButton/>
                    <VideoButton />
                    <ShareScreenButton />
                    <HangUpButton />
                </Stack>

            </Box>

        </Box>
    );
};

export default Video;


Листинг А.151 – файл ProfileForm.js

import React, {useCallback} from 'react';
import {useTheme} from "@mui/material/styles";
import * as Yup from 'yup';
import {yupResolver} from "@hookform/resolvers/yup";
import {useForm} from "react-hook-form";
import FormProvider, {RHFTextField} from "../../components/hook-form";
import {Alert, Button, Stack} from "@mui/material";
import {useSelector} from "react-redux";

const ProfileForm = () => {
  const theme = useTheme();
  const { user } = useSelector(store => store.auth);
  const [isFile, setIsFile] = React.useState(false);

  const ProfileSchema = Yup.object().shape({
    name: Yup.string().required("Name is required"),
    about: Yup.string().required("About is required"),
    avatarUrl: isFile ? Yup.string().required("Avatar is required").nullable() : Yup.string(),
  })

  const defaultValues = {
    name: user?.first_name + " " + user?.last_name,
    about: user?.about,
  }

  const methods = useForm({
    resolver: yupResolver(ProfileSchema),
    defaultValues,
  })

  const {
    reset,
    watch,
    control,
    setValue,
    setError,
    handleSubmit,
    formState: {errors, isSubmitting, isSubmitSuccessful}
  } = methods;

  const values = watch();

  const handleDrop = useCallback((acceptedFiles)=>{
    const file = acceptedFiles[0];
    const newFile = Object.assign(file, {
      preview: URL.createObjectURL(file)
    })

    if (file){
        setIsFile(true)
      setValue("avatarUrl", newFile, {shouldValidate: true})
    }

  }, [setValue])

  const onSubmit = async (data) => {
    try {
      // TODO : submit _data to backend server
      console.log("Profile Info", data)

    } catch (error) {
      console.log(error);
      setError("afterSubmit", {
        ...error,
        message: error.message,
      })
    }
  }
  return (
    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
      <Stack spacing={3}>
        {!!errors.afterSubmit && <Alert security="error">{errors.afterSubmit.message}</Alert>}
        {isSubmitting && <Alert security="info">{"form is submitting ..."}</Alert>}
        {isSubmitSuccessful && <Alert security="success">{"form submitted successfully"}</Alert>}
        <RHFTextField name={"name"} label={"Name"} helperText={"This name is visible to your contacts"}/>
        <RHFTextField multiline name={"about"} minRows={3} maxRows={5} label={"About"} />
        <Stack spacing={2} direction={"row"} alignItems={"center"} justifyContent={"end"}>
          <Button color={"primary"} size={"large"} type={"submit"} variant={"outlined"}>
            Save
          </Button>
        </Stack>

      </Stack>

    </FormProvider>
  );
};

export default ProfileForm;


Листинг А.152 – файл Shortcuts.js

import React from 'react';
import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Grid,
  Slide,
  Stack,
  Typography
} from "@mui/material";

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const list = [
  {
    key: 0,
    title: "Mark as unread",
    combination: ["Cmd", "Shift", "U"],
  },
  {
    key: 1,
    title: "Mute",
    combination: ["Cmd", "Shift", "M"],
  },
  {
    key: 2,
    title: "Archive Chat",
    combination: ["Cmd", "Shift", "E"],
  },
  {
    key: 3,
    title: "Delete Chat",
    combination: ["Cmd", "Shift", "D"],
  },
  {
    key: 4,
    title: "Pin Chat",
    combination: ["Cmd", "Shift", "P"],
  },
  {
    key: 5,
    title: "Search",
    combination: ["Cmd", "F"],
  },
  {
    key: 6,
    title: "Search Chat",
    combination: ["Cmd", "Shift", "F"],
  },
  {
    key: 7,
    title: "Next Chat",
    combination: ["Cmd", "N"],
  },
  {
    key: 8,
    title: "Next Step",
    combination: ["Ctrl", "Tab"],
  },
  {
    key: 9,
    title: "Previous Step",
    combination: ["Ctrl", "Shift", "Tab"],
  },
  {
    key: 10,
    title: "New Group",
    combination: ["Cmd", "Shift", "N"],
  },
  {
    key: 11,
    title: "Profile & About",
    combination: ["Cmd", "P"],
  },
  {
    key: 12,
    title: "Increase speed of voice message",
    combination: ["Shift", "."],
  },
  {
    key: 13,
    title: "Decrease speed of voice message",
    combination: ["Shift", ","],
  },
  {
    key: 14,
    title: "Settings",
    combination: ["Shift", "S"],
  },
  {
    key: 15,
    title: "Emoji Panel",
    combination: ["Cmd", "E"],
  },
  {
    key: 16,
    title: "Sticker Panel",
    combination: ["Cmd", "S"],
  },
];
const Shortcuts = ({open, handleClose}) => {
  return (
    <>
      <Dialog
        fullWidth
        maxWidth={"md"}
        open={open}
        TransitionComponent={Transition}
        keepMounted
        onClose={handleClose}
        sx={{p: 4}}
      >
        <DialogTitle>{"Keyboard shortcuts"}</DialogTitle>
        <DialogContent sx={{mt: 4}}>
          <Grid container spacing={3}>
            {list.map(({key, title, combination}) => (
                <Grid key={key} container item xs={6}>
                  <Stack sx={{width: "100%"}} justifyContent={"space-between"}
                         direction={"row"} spacing={3} alignItems={"center"}
                  >
                    <Typography variant={"caption"} fontSize={14}>{title}</Typography>
                    <Stack spacing={2} direction={"row"}>
                      {combination.map((item)=>(
                        <Button disabled variant={"contained"} sx={{color: "#212121"}}>
                          {item}
                        </Button>
                      ))}
                    </Stack>
                  </Stack>
                </Grid>
            ))}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button variant={"contained"} onClick={handleClose}>Ok</Button>
        </DialogActions>
      </Dialog>

    </>
  );
};

export default Shortcuts;


Листинг А.153 – файл ThemeDialog.js



Листинг А.154 – файл breakpoints.js

// ----------------------------------------------------------------------

const breakpoints = {
  values: {
    xs: 0,
    sm: 600,
    md: 900,
    lg: 1200,
    xl: 1536
  }
};

export default breakpoints;


Листинг А.155 – файл index.js

import PropTypes from "prop-types";
import { useMemo } from "react";
// @mui
import { CssBaseline } from "@mui/material";
import {
  createTheme,
  ThemeProvider as MUIThemeProvider,
  StyledEngineProvider,
} from "@mui/material/styles";
// hooks
import useSettings from "../hooks/useSettings.js";
//
import palette from "./palette";
import typography from "./typography";
import breakpoints from "./breakpoints";
import componentsOverride from "./overrides";
import shadows, { customShadows } from "./shadows";

// ----------------------------------------------------------------------

ThemeProvider.propTypes = {
  children: PropTypes.node,
};

export default function ThemeProvider({ children }) {
  const { themeMode, themeDirection } = useSettings();

  const isLight = themeMode === "light";

  const themeOptions = useMemo(
    () => ({
      palette: isLight ? palette.light : palette.dark,
      typography,
      breakpoints,
      shape: { borderRadius: 8 },
      direction: themeDirection,
      shadows: isLight ? shadows.light : shadows.dark,
      customShadows: isLight ? customShadows.light : customShadows.dark,
    }),
    [isLight, themeDirection]
  );

  const theme = createTheme(themeOptions);

  theme.components = componentsOverride(theme);

  return (
    <StyledEngineProvider injectFirst>
      <MUIThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </MUIThemeProvider>
    </StyledEngineProvider>
  );
}


Листинг А.156 – файл palette.js

import { alpha } from '@mui/material/styles';

// ----------------------------------------------------------------------

function createGradient(color1, color2) {
  return `linear-gradient(to bottom, ${color1}, ${color2})`;
}

// SETUP COLORS
const PRIMARY = {
  lighter: '#C8FACD',
  light: '#EBEEFE',
  main: '#6366F1',
  dark: '#4338CA',
  darker: '#312E81',
  shadow: '0 0 2px rgba(0, 0, 0, .25)',
};
const SECONDARY = {
  lighter: '#D6E4FF',
  light: '#84A9FF',
  main: '#3366FF',
  dark: '#1939B7',
  darker: '#091A7A',
};
const INFO = {
  lighter: '#D0F2FF',
  light: '#74CAFF',
  main: '#1890FF',
  dark: '#0C53B7',
  darker: '#04297A',
};
const SUCCESS = {
  lighter: '#E9FCD4',
  light: '#AAF27F',
  main: '#54D62C',
  dark: '#229A16',
  darker: '#08660D',
};
const WARNING = {
  lighter: '#FFF7CD',
  light: '#FFE16A',
  main: '#FFC107',
  dark: '#B78103',
  darker: '#7A4F01',
};
const ERROR = {
  lighter: '#FFE7D9',
  light: '#FFA48D',
  main: '#FF4842',
  dark: '#B72136',
  darker: '#7A0C2E',
};

const GREY = {
  0: '#FFFFFF',
  100: '#F9FAFB',
  200: '#F4F6F8',
  300: '#DFE3E8',
  400: '#C4CDD5',
  500: '#919EAB',
  600: '#637381',
  700: '#454F5B',
  800: '#212B36',
  900: '#161C24',
  500_8: alpha('#919EAB', 0.08),
  500_12: alpha('#919EAB', 0.12),
  500_16: alpha('#919EAB', 0.16),
  500_24: alpha('#919EAB', 0.24),
  500_32: alpha('#919EAB', 0.32),
  500_48: alpha('#919EAB', 0.48),
  500_56: alpha('#919EAB', 0.56),
  500_80: alpha('#919EAB', 0.8),
};


const GRADIENTS = {
  primary: createGradient(PRIMARY.light, PRIMARY.main),
  info: createGradient(INFO.light, INFO.main),
  success: createGradient(SUCCESS.light, SUCCESS.main),
  warning: createGradient(WARNING.light, WARNING.main),
  error: createGradient(ERROR.light, ERROR.main),
};

const CHART_COLORS = {
  violet: ['#826AF9', '#9E86FF', '#D0AEFF', '#F7D2FF'],
  blue: ['#2D99FF', '#83CFFF', '#A5F3FF', '#CCFAFF'],
  green: ['#2CD9C5', '#60F1C8', '#A4F7CC', '#C0F2DC'],
  yellow: ['#FFE700', '#FFEF5A', '#FFF7AE', '#FFF3D6'],
  red: ['#FF6C40', '#FF8F6D', '#FFBD98', '#FFF2D4'],
};

const COMMON = {
  common: { black: '#000', white: '#fff' },
  primary: { ...PRIMARY, contrastText: '#fff' },
  secondary: { ...SECONDARY, contrastText: '#fff' },
  info: { ...INFO, contrastText: '#fff' },
  success: { ...SUCCESS, contrastText: GREY[800] },
  warning: { ...WARNING, contrastText: GREY[800] },
  error: { ...ERROR, contrastText: '#fff' },
  grey: GREY,
  gradients: GRADIENTS,
  chart: CHART_COLORS,
  divider: GREY[500_24],
  action: {
    hover: GREY[500_8],
    selected: GREY[500_16],
    disabled: GREY[500_80],
    disabledBackground: GREY[500_24],
    focus: GREY[500_24],
    hoverOpacity: 0.08,
    disabledOpacity: 0.48,
  },
};

const palette = {
  light: {
    ...COMMON,
    mode: 'light',
    text: { primary: GREY[800], secondary: GREY[600], disabled: GREY[500] },
    background: { paper: '#fff', default: '#fff', neutral: GREY[200] },
    action: { active: GREY[600], ...COMMON.action },
  },
  dark: {
    ...COMMON,
    mode: 'dark',
    text: { primary: '#fff', secondary: GREY[500], disabled: GREY[600] },
    background: { paper: GREY[800], default: GREY[900], neutral: GREY[500_16] },
    action: { active: GREY[500], ...COMMON.action },
  },
};

export default palette;


Листинг А.157 – файл shadows.js

// @mui
import { alpha } from '@mui/material/styles';
//
import palette from './palette';

// ----------------------------------------------------------------------

const LIGHT_MODE = palette.light.grey[500];
const DARK_MODE = '#000000';

const createShadow = (color) => {
  const transparent1 = alpha(color, 0.2);
  const transparent2 = alpha(color, 0.14);
  const transparent3 = alpha(color, 0.12);
  return [
    'none',
    `0px 2px 1px -1px ${transparent1},0px 1px 1px 0px ${transparent2},0px 1px 3px 0px ${transparent3}`,
    `0px 3px 1px -2px ${transparent1},0px 2px 2px 0px ${transparent2},0px 1px 5px 0px ${transparent3}`,
    `0px 3px 3px -2px ${transparent1},0px 3px 4px 0px ${transparent2},0px 1px 8px 0px ${transparent3}`,
    `0px 2px 4px -1px ${transparent1},0px 4px 5px 0px ${transparent2},0px 1px 10px 0px ${transparent3}`,
    `0px 3px 5px -1px ${transparent1},0px 5px 8px 0px ${transparent2},0px 1px 14px 0px ${transparent3}`,
    `0px 3px 5px -1px ${transparent1},0px 6px 10px 0px ${transparent2},0px 1px 18px 0px ${transparent3}`,
    `0px 4px 5px -2px ${transparent1},0px 7px 10px 1px ${transparent2},0px 2px 16px 1px ${transparent3}`,
    `0px 5px 5px -3px ${transparent1},0px 8px 10px 1px ${transparent2},0px 3px 14px 2px ${transparent3}`,
    `0px 5px 6px -3px ${transparent1},0px 9px 12px 1px ${transparent2},0px 3px 16px 2px ${transparent3}`,
    `0px 6px 6px -3px ${transparent1},0px 10px 14px 1px ${transparent2},0px 4px 18px 3px ${transparent3}`,
    `0px 6px 7px -4px ${transparent1},0px 11px 15px 1px ${transparent2},0px 4px 20px 3px ${transparent3}`,
    `0px 7px 8px -4px ${transparent1},0px 12px 17px 2px ${transparent2},0px 5px 22px 4px ${transparent3}`,
    `0px 7px 8px -4px ${transparent1},0px 13px 19px 2px ${transparent2},0px 5px 24px 4px ${transparent3}`,
    `0px 7px 9px -4px ${transparent1},0px 14px 21px 2px ${transparent2},0px 5px 26px 4px ${transparent3}`,
    `0px 8px 9px -5px ${transparent1},0px 15px 22px 2px ${transparent2},0px 6px 28px 5px ${transparent3}`,
    `0px 8px 10px -5px ${transparent1},0px 16px 24px 2px ${transparent2},0px 6px 30px 5px ${transparent3}`,
    `0px 8px 11px -5px ${transparent1},0px 17px 26px 2px ${transparent2},0px 6px 32px 5px ${transparent3}`,
    `0px 9px 11px -5px ${transparent1},0px 18px 28px 2px ${transparent2},0px 7px 34px 6px ${transparent3}`,
    `0px 9px 12px -6px ${transparent1},0px 19px 29px 2px ${transparent2},0px 7px 36px 6px ${transparent3}`,
    `0px 10px 13px -6px ${transparent1},0px 20px 31px 3px ${transparent2},0px 8px 38px 7px ${transparent3}`,
    `0px 10px 13px -6px ${transparent1},0px 21px 33px 3px ${transparent2},0px 8px 40px 7px ${transparent3}`,
    `0px 10px 14px -6px ${transparent1},0px 22px 35px 3px ${transparent2},0px 8px 42px 7px ${transparent3}`,
    `0px 11px 14px -7px ${transparent1},0px 23px 36px 3px ${transparent2},0px 9px 44px 8px ${transparent3}`,
    `0px 11px 15px -7px ${transparent1},0px 24px 38px 3px ${transparent2},0px 9px 46px 8px ${transparent3}`,
  ];
};

const createCustomShadow = (color) => {
  const transparent = alpha(color, 0.16);
  return {
    z1: `0 1px 2px 0 ${transparent}`,
    z8: `0 8px 16px 0 ${transparent}`,
    z12: `0 12px 24px -4px ${transparent}`,
    z16: `0 16px 32px -4px ${transparent}`,
    z20: `0 20px 40px -4px ${transparent}`,
    z24: `0 24px 48px 0 ${transparent}`,
    //
    primary: `0 8px 16px 0 ${alpha(palette.light.primary.main, 0.24)}`,
    info: `0 8px 16px 0 ${alpha(palette.light.info.main, 0.24)}`,
    secondary: `0 8px 16px 0 ${alpha(palette.light.secondary.main, 0.24)}`,
    success: `0 8px 16px 0 ${alpha(palette.light.success.main, 0.24)}`,
    warning: `0 8px 16px 0 ${alpha(palette.light.warning.main, 0.24)}`,
    error: `0 8px 16px 0 ${alpha(palette.light.error.main, 0.24)}`,
    //
    card: `0 0 2px 0 ${alpha(color, 0.2)}, 0 12px 24px -4px ${alpha(color, 0.12)}`,
    dialog: `-40px 40px 80px -8px ${alpha(palette.light.common.black, 0.24)}`,
    dropdown: `0 0 2px 0 ${alpha(color, 0.24)}, -20px 20px 40px -4px ${alpha(color, 0.24)}`,
  };
};

export const customShadows = {
  light: createCustomShadow(LIGHT_MODE),
  dark: createCustomShadow(DARK_MODE),
};

const shadows = {
  light: createShadow(LIGHT_MODE),
  dark: createShadow(DARK_MODE),
};

export default shadows;


Листинг А.158 – файл typography.js

import { pxToRem, responsiveFontSizes } from '../utils/getFontValue';

// ----------------------------------------------------------------------

const FONT_PRIMARY = 'Manrope, Public Sans, sans-serif'; // Google Font
// const FONT_SECONDARY = 'CircularStd, sans-serif'; // Local Font

const typography = {
  fontFamily: FONT_PRIMARY,
  fontWeightRegular: 400,
  fontWeightMedium: 600,
  fontWeightBold: 700,
  h1: {
    fontWeight: 700,
    lineHeight: 80 / 64,
    fontSize: pxToRem(40),
    letterSpacing: 2,
    ...responsiveFontSizes({ sm: 52, md: 58, lg: 64 }),
  },
  h2: {
    fontWeight: 700,
    lineHeight: 64 / 48,
    fontSize: pxToRem(32),
    ...responsiveFontSizes({ sm: 40, md: 44, lg: 48 }),
  },
  h3: {
    fontWeight: 700,
    lineHeight: 1.5,
    fontSize: pxToRem(24),
    ...responsiveFontSizes({ sm: 26, md: 30, lg: 32 }),
  },
  h4: {
    fontWeight: 700,
    lineHeight: 1.5,
    fontSize: pxToRem(20),
    ...responsiveFontSizes({ sm: 20, md: 24, lg: 24 }),
  },
  h5: {
    fontWeight: 700,
    lineHeight: 1.5,
    fontSize: pxToRem(18),
    ...responsiveFontSizes({ sm: 19, md: 20, lg: 20 }),
  },
  h6: {
    fontWeight: 700,
    lineHeight: 28 / 18,
    fontSize: pxToRem(17),
    ...responsiveFontSizes({ sm: 18, md: 18, lg: 18 }),
  },
  subtitle1: {
    fontWeight: 600,
    lineHeight: 1.5,
    fontSize: pxToRem(16),
  },
  subtitle2: {
    fontWeight: 700,
    lineHeight: 22 / 14,
    fontSize: pxToRem(14),
  },
  body1: {
    lineHeight: 1.5,
    fontSize: pxToRem(16),
  },
  body2: {
    lineHeight: 22 / 14,
    fontSize: pxToRem(14),
    fontWeight: 600,
  },
  caption: {
    lineHeight: 1.5,
    fontSize: pxToRem(12),
    fontWeight: 600,
  },
  overline: {
    fontWeight: 700,
    lineHeight: 1.5,
    fontSize: pxToRem(12),
    textTransform: 'uppercase',
  },
  button: {
    fontWeight: 700,
    lineHeight: 24 / 14,
    fontSize: pxToRem(14),
    textTransform: 'capitalize',
  },
  article: {
    fontWeight: 700,
  }
};

export default typography;


Листинг А.159 – файл Accordion.js

// ----------------------------------------------------------------------

export default function Accordion(theme) {
  return {
    MuiAccordion: {
      styleOverrides: {
        root: {
          '&.Mui-expanded': {
            boxShadow: theme.customShadows.z8,
            borderRadius: theme.shape.borderRadius,
          },
          '&.Mui-disabled': {
            backgroundColor: 'transparent',
          },
        },
      },
    },
    MuiAccordionSummary: {
      styleOverrides: {
        root: {
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(1),
          '&.Mui-disabled': {
            opacity: 1,
            color: theme.palette.action.disabled,
            '& .MuiTypography-root': {
              color: 'inherit',
            },
          },
        },
        expandIconWrapper: {
          color: 'inherit',
        },
      },
    },
  };
}


Листинг А.160 – файл Alert.js

import { ErrorIcon, InfoIcon, SuccessIcon, WarningIcon } from './CustomIcons';

// ----------------------------------------------------------------------

export default function Alert(theme) {
  const isLight = theme.palette.mode === 'light';

  const standardStyle = (color) => ({
    color: theme.palette[color][isLight ? 'darker' : 'lighter'],
    backgroundColor: theme.palette[color][isLight ? 'lighter' : 'darker'],
    '& .MuiAlert-icon': {
      color: theme.palette[color][isLight ? 'main' : 'light'],
    },
  });

  const filledStyle = (color) => ({
    color: theme.palette[color].contrastText,
  });

  const outlinedStyle = (color) => ({
    color: theme.palette[color][isLight ? 'darker' : 'lighter'],
    border: `solid 1px ${theme.palette[color][isLight ? 'light' : 'dark']}`,
    backgroundColor: theme.palette[color][isLight ? 'lighter' : 'darker'],
    '& .MuiAlert-icon': {
      color: theme.palette[color][isLight ? 'main' : 'light'],
    },
  });

  return {
    MuiAlert: {
      defaultProps: {
        iconMapping: {
          info: <InfoIcon />,
          success: <SuccessIcon />,
          warning: <WarningIcon />,
          error: <ErrorIcon />,
        },
      },

      styleOverrides: {
        message: {
          '& .MuiAlertTitle-root': {
            marginBottom: theme.spacing(0.5),
          },
        },
        action: {
          '& button:not(:first-of-type)': {
            marginLeft: theme.spacing(1),
          },
        },

        standardInfo: standardStyle('info'),
        standardSuccess: standardStyle('success'),
        standardWarning: standardStyle('warning'),
        standardError: standardStyle('error'),

        filledInfo: filledStyle('info'),
        filledSuccess: filledStyle('success'),
        filledWarning: filledStyle('warning'),
        filledError: filledStyle('error'),

        outlinedInfo: outlinedStyle('info'),
        outlinedSuccess: outlinedStyle('success'),
        outlinedWarning: outlinedStyle('warning'),
        outlinedError: outlinedStyle('error'),
      },
    },
  };
}


Листинг А.161 – файл Autocomplete.js

// ----------------------------------------------------------------------

export default function Autocomplete(theme) {
  return {
    MuiAutocomplete: {
      styleOverrides: {
        paper: {
          boxShadow: theme.customShadows.dropdown,
        },
        listbox: {
          padding: theme.spacing(0, 1),
          '& .MuiAutocomplete-option': {
            padding: theme.spacing(1),
            margin: theme.spacing(1, 0),
            borderRadius: theme.shape.borderRadius,
          },
        },
      },
    },
  };
}


Листинг А.162 – файл Avatar.js

// ----------------------------------------------------------------------

export default function Avatar(theme) {
  return {
    MuiAvatar: {
      styleOverrides: {
        colorDefault: {
          color: theme.palette.text.secondary,
          backgroundColor: theme.palette.grey[400],
        },
      },
    },
    MuiAvatarGroup: {
      styleOverrides: {
        avatar: {
          fontSize: 16,
          fontWeight: theme.typography.fontWeightMedium,
          '&:first-of-type': {
            fontSize: 14,
            color: theme.palette.primary.main,
            backgroundColor: theme.palette.primary.lighter,
          },
        },
      },
    },
  };
}


Листинг А.163 – файл Backdrop.js

import { alpha } from '@mui/material/styles';

// ----------------------------------------------------------------------

export default function Backdrop(theme) {
  const varLow = alpha(theme.palette.grey[900], 0.48);
  const varHigh = alpha(theme.palette.grey[900], 1);

  return {
    MuiBackdrop: {
      styleOverrides: {
        root: {
          background: [
            `rgb(22,28,36)`,
            `-moz-linear-gradient(75deg, ${varLow} 0%, ${varHigh} 100%)`,
            `-webkit-linear-gradient(75deg, ${varLow} 0%, ${varHigh} 100%)`,
            `linear-gradient(75deg, ${varLow} 0%, ${varHigh} 100%)`,
          ],
          '&.MuiBackdrop-invisible': {
            background: 'transparent',
          },
        },
      },
    },
  };
}


Листинг А.164 – файл Badge.js

// ----------------------------------------------------------------------

export default function Badge() {
  return {
    MuiBadge: {
      styleOverrides: {
        dot: {
          width: 10,
          height: 10,
          borderRadius: '50%',
        },
      },
    },
  };
}


Листинг А.165 – файл Breadcrumbs.js


export default function Breadcrumbs(theme) {
  return {
    MuiBreadcrumbs: {
      styleOverrides: {
        separator: {
          marginLeft: theme.spacing(2),
          marginRight: theme.spacing(2),
        },
      },
    },
  };
}


Листинг А.166 – файл Button.js

// ----------------------------------------------------------------------

export default function Button(theme) {
  return {
    MuiButton: {
      styleOverrides: {
        root: {
          '&:hover': {
            boxShadow: 'none',
          },
        },
        sizeLarge: {
          height: 48,
        },
        // contained
        containedInherit: {
          color: theme.palette.grey[800],
          boxShadow: theme.customShadows.z8,
          '&:hover': {
            backgroundColor: theme.palette.grey[400],
          },
        },
        containedPrimary: {
          boxShadow: theme.customShadows.primary,
        },
        containedSecondary: {
          boxShadow: theme.customShadows.secondary,
        },
        containedInfo: {
          boxShadow: theme.customShadows.info,
        },
        containedSuccess: {
          boxShadow: theme.customShadows.success,
        },
        containedWarning: {
          boxShadow: theme.customShadows.warning,
        },
        containedError: {
          boxShadow: theme.customShadows.error,
        },
        // outlined
        outlinedInherit: {
          border: `1px solid ${theme.palette.grey[500_32]}`,
          '&:hover': {
            backgroundColor: theme.palette.action.hover,
          },
        },
        textInherit: {
          '&:hover': {
            backgroundColor: theme.palette.action.hover,
          },
        },
      },
    },
  };
}


Листинг А.167 – файл ButtonGroup.js

export default function ButtonGroup(theme) {
  const styleContained = (color) => ({
    props: { variant: 'contained', color },
    style: { boxShadow: theme.customShadows[color] },
  });

  return {
    MuiButtonGroup: {
      variants: [
        {
          props: { variant: 'contained', color: 'inherit' },
          style: { boxShadow: theme.customShadows.z8 },
        },
        styleContained('primary'),
        styleContained('secondary'),
        styleContained('info'),
        styleContained('success'),
        styleContained('warning'),
        styleContained('error'),

        {
          props: { disabled: true },
          style: {
            boxShadow: 'none',
            '& .MuiButtonGroup-grouped.Mui-disabled': {
              color: theme.palette.action.disabled,
              borderColor: `${theme.palette.action.disabledBackground} !important`,
              '&.MuiButton-contained': {
                backgroundColor: theme.palette.action.disabledBackground,
              },
            },
          },
        },
      ],

      styleOverrides: {
        root: {
          '&:hover': {
            boxShadow: 'none',
          },
        },
      },
    },
  };
}


Листинг А.168 – файл Card.js

export default function Card(theme) {
  return {
    MuiCard: {
      styleOverrides: {
        root: {
          position: 'relative',
          boxShadow: theme.customShadows.card,
          borderRadius: Number(theme.shape.borderRadius) * 2,
          zIndex: 0, // Fix Safari overflow: hidden with border radius
        },
      },
    },
    MuiCardHeader: {
      defaultProps: {
        titleTypographyProps: { variant: 'h6' },
        subheaderTypographyProps: { variant: 'body2', marginTop: theme.spacing(0.5) },
      },
      styleOverrides: {
        root: {
          padding: theme.spacing(3, 3, 0),
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          padding: theme.spacing(3),
        },
      },
    },
  };
}


Листинг А.169 – файл Checkbox.js

import { CheckboxIcon, CheckboxCheckedIcon, CheckboxIndeterminateIcon } from './CustomIcons';

// ----------------------------------------------------------------------

export default function Checkbox(theme) {
  return {
    MuiCheckbox: {
      defaultProps: {
        icon: <CheckboxIcon />,
        checkedIcon: <CheckboxCheckedIcon />,
        indeterminateIcon: <CheckboxIndeterminateIcon />,
      },

      styleOverrides: {
        root: {
          padding: theme.spacing(1),
          '&.Mui-checked.Mui-disabled, &.Mui-disabled': {
            color: theme.palette.action.disabled,
          },
          '& .MuiSvgIcon-fontSizeMedium': {
            width: 24,
            height: 24,
          },
          '& .MuiSvgIcon-fontSizeSmall': {
            width: 20,
            height: 20,
          },
          svg: {
            fontSize: 24,
            '&[font-size=small]': {
              fontSize: 20,
            },
          },
        },
      },
    },
  };
}


Листинг А.170 – файл Chip.js

import { CloseIcon } from './CustomIcons';

// ----------------------------------------------------------------------

export default function Chip(theme) {
  return {
    MuiChip: {
      defaultProps: {
        deleteIcon: <CloseIcon />,
      },

      styleOverrides: {
        colorDefault: {
          '& .MuiChip-avatarMedium, .MuiChip-avatarSmall': {
            color: theme.palette.text.secondary,
          },
        },
        outlined: {
          borderColor: theme.palette.grey[500_32],
          '&.MuiChip-colorPrimary': {
            borderColor: theme.palette.primary.main,
          },
          '&.MuiChip-colorSecondary': {
            borderColor: theme.palette.secondary.main,
          },
        },
        //
        avatarColorInfo: {
          color: theme.palette.info.contrastText,
          backgroundColor: theme.palette.info.dark,
        },
        avatarColorSuccess: {
          color: theme.palette.success.contrastText,
          backgroundColor: theme.palette.success.dark,
        },
        avatarColorWarning: {
          color: theme.palette.warning.contrastText,
          backgroundColor: theme.palette.warning.dark,
        },
        avatarColorError: {
          color: theme.palette.error.contrastText,
          backgroundColor: theme.palette.error.dark,
        },
      },
    },
  };
}


Листинг А.171 – файл ControlLabel.js

export default function ControlLabel(theme) {
  return {
    MuiFormControlLabel: {
      styleOverrides: {
        label: {
          ...theme.typography.body2,
        },
      },
    },
    MuiFormHelperText: {
      styleOverrides: {
        root: {
          marginTop: theme.spacing(1),
        },
      },
    },
    MuiFormLabel: {
      styleOverrides: {
        root: {
          color: theme.palette.text.disabled,
        },
      },
    },
  };
}


Листинг А.172 – файл CssBaseline.js


export default function CssBaseline() {
  return {
    MuiCssBaseline: {
      styleOverrides: {
        '*': {
          margin: 0,
          padding: 0,
          boxSizing: 'border-box',
        },
        html: {
          width: '100%',
          height: '100%',
          WebkitOverflowScrolling: 'touch',
        },
        body: {
          width: '100%',
          height: '100%',
        },
        '#root': {
          width: '100%',
          height: '100%',
        },
        input: {
          '&[type=number]': {
            MozAppearance: 'textfield',
            '&::-webkit-outer-spin-button': {
              margin: 0,
              WebkitAppearance: 'none',
            },
            '&::-webkit-inner-spin-button': {
              margin: 0,
              WebkitAppearance: 'none',
            },
          },
        },
        img: {
          display: 'block',
          maxWidth: '100%',
        },
      },
    },
  };
}


Листинг А.173 – файл CustomIcons.js

import { SvgIcon } from '@mui/material';

// ----------------------------------------------------------------------

// CloseIcon
export function CloseIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 C17.5228475,22 22,17.5228475 22,12 C22,9.3478351 20.9464316,6.80429597 19.0710678,4.92893219 C17.195704,3.0535684 14.6521649,2 12,2 Z M14.71,13.29 C14.8993127,13.4777666 15.0057983,13.7333625 15.0057983,14 C15.0057983,14.2666375 14.8993127,14.5222334 14.71,14.71 C14.5222334,14.8993127 14.2666375,15.0057983 14,15.0057983 C13.7333625,15.0057983 13.4777666,14.8993127 13.29,14.71 L12,13.41 L10.71,14.71 C10.5222334,14.8993127 10.2666375,15.0057983 10,15.0057983 C9.73336246,15.0057983 9.4777666,14.8993127 9.29,14.71 C9.10068735,14.5222334 8.99420168,14.2666375 8.99420168,14 C8.99420168,13.7333625 9.10068735,13.4777666 9.29,13.29 L10.59,12 L9.29,10.71 C8.89787783,10.3178778 8.89787783,9.68212217 9.29,9.29 C9.68212217,8.89787783 10.3178778,8.89787783 10.71,9.29 L12,10.59 L13.29,9.29 C13.6821222,8.89787783 14.3178778,8.89787783 14.71,9.29 C15.1021222,9.68212217 15.1021222,10.3178778 14.71,10.71 L13.41,12 L14.71,13.29 Z" />
    </SvgIcon>
  );
}

// StarIcon
export function StarIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M17.56,21 C17.4000767,21.0006435 17.2423316,20.9629218 17.1,20.89 L12,18.22 L6.9,20.89 C6.56213339,21.067663 6.15259539,21.0374771 5.8444287,20.8121966 C5.53626201,20.5869161 5.38323252,20.2058459 5.45,19.83 L6.45,14.2 L2.33,10.2 C2.06805623,9.93860108 1.9718844,9.55391377 2.08,9.2 C2.19824414,8.83742187 2.51242293,8.57366684 2.89,8.52 L8.59,7.69 L11.1,2.56 C11.2670864,2.21500967 11.6166774,1.99588989 12,1.99588989 C12.3833226,1.99588989 12.7329136,2.21500967 12.9,2.56 L15.44,7.68 L21.14,8.51 C21.5175771,8.56366684 21.8317559,8.82742187 21.95,9.19 C22.0581156,9.54391377 21.9619438,9.92860108 21.7,10.19 L17.58,14.19 L18.58,19.82 C18.652893,20.2027971 18.4967826,20.5930731 18.18,20.82 C17.9989179,20.9468967 17.7808835,21.010197 17.56,21 L17.56,21 Z" />
    </SvgIcon>
  );
}

// Using for Alert
export function InfoIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 C17.5228475,22 22,17.5228475 22,12 C22,9.3478351 20.9464316,6.80429597 19.0710678,4.92893219 C17.195704,3.0535684 14.6521649,2 12,2 Z M13,16 C13,16.5522847 12.5522847,17 12,17 C11.4477153,17 11,16.5522847 11,16 L11,11 C11,10.4477153 11.4477153,10 12,10 C12.5522847,10 13,10.4477153 13,11 L13,16 Z M12,9 C11.4477153,9 11,8.55228475 11,8 C11,7.44771525 11.4477153,7 12,7 C12.5522847,7 13,7.44771525 13,8 C13,8.55228475 12.5522847,9 12,9 Z" />
    </SvgIcon>
  );
}

export function WarningIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M22.56,16.3 L14.89,3.58 C14.2597186,2.59400001 13.1702353,1.99737652 12,1.99737652 C10.8297647,1.99737652 9.74028139,2.59400001 9.11,3.58 L1.44,16.3 C0.888546003,17.2192471 0.869485343,18.3628867 1.39,19.3 C1.99197363,20.3551378 3.11522982,21.0046397 4.33,21 L19.67,21 C20.8765042,21.0128744 21.9978314,20.3797441 22.61,19.34 C23.146086,18.3926382 23.1269508,17.2292197 22.56,16.3 L22.56,16.3 Z M12,17 C11.4477153,17 11,16.5522847 11,16 C11,15.4477153 11.4477153,15 12,15 C12.5522847,15 13,15.4477153 13,16 C13,16.5522847 12.5522847,17 12,17 Z M13,13 C13,13.5522847 12.5522847,14 12,14 C11.4477153,14 11,13.5522847 11,13 L11,9 C11,8.44771525 11.4477153,8 12,8 C12.5522847,8 13,8.44771525 13,9 L13,13 Z" />
    </SvgIcon>
  );
}

export function SuccessIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 C17.5228475,22 22,17.5228475 22,12 C22,9.3478351 20.9464316,6.80429597 19.0710678,4.92893219 C17.195704,3.0535684 14.6521649,2 12,2 Z M16.3,9.61 L11.73,15.61 C11.5412074,15.855247 11.2494966,15.9992561 10.94,16.0000145 C10.6322197,16.001658 10.3408221,15.861492 10.15,15.62 L7.71,12.51 C7.49028166,12.2277602 7.43782669,11.8497415 7.57239438,11.5183399 C7.70696206,11.1869384 8.00810836,10.9525017 8.36239438,10.9033399 C8.7166804,10.8541782 9.07028166,10.9977602 9.29,11.28 L10.92,13.36 L14.7,8.36 C14.917932,8.07418751 15.2717886,7.92635122 15.6282755,7.97217964 C15.9847624,8.01800806 16.2897207,8.25053875 16.4282755,8.58217966 C16.5668304,8.91382056 16.517932,9.29418753 16.3,9.58 L16.3,9.61 Z" />
    </SvgIcon>
  );
}

export function ErrorIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 C17.5228475,22 22,17.5228475 22,12 C22,9.3478351 20.9464316,6.80429597 19.0710678,4.92893219 C17.195704,3.0535684 14.6521649,2 12,2 Z M12,17 C11.4477153,17 11,16.5522847 11,16 C11,15.4477153 11.4477153,15 12,15 C12.5522847,15 13,15.4477153 13,16 C13,16.5522847 12.5522847,17 12,17 Z M13,13 C13,13.5522847 12.5522847,14 12,14 C11.4477153,14 11,13.5522847 11,13 L11,8 C11,7.44771525 11.4477153,7 12,7 C12.5522847,7 13,7.44771525 13,8 L13,13 Z" />
    </SvgIcon>
  );
}

// Using for Checkbox
export function CheckboxIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M17 3a4 4 0 014 4v10a4 4 0 01-4 4H7a4 4 0 01-4-4V7a4 4 0 014-4h10zm0 2H7a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2z" />
    </SvgIcon>
  );
}

export function CheckboxCheckedIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M17 3a4 4 0 014 4v10a4 4 0 01-4 4H7a4 4 0 01-4-4V7a4 4 0 014-4h10zm-1.372 4.972a1.006 1.006 0 00-.928.388l-3.78 5-1.63-2.08a1.001 1.001 0 00-1.58 1.23l2.44 3.11a1 1 0 001.58-.01l4.57-6v-.03a1.006 1.006 0 00-.672-1.608z" />
    </SvgIcon>
  );
}

export function CheckboxIndeterminateIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M17 3a4 4 0 014 4v10a4 4 0 01-4 4H7a4 4 0 01-4-4V7a4 4 0 014-4h10zm-1.75 8h-6.5a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75h6.5a.75.75 0 00.75-.75v-.5a.75.75 0 00-.75-.75z" />
    </SvgIcon>
  );
}

// Using for Select Input
export function InputSelectIcon(props) {
  return (
    <SvgIcon
      {...props}
      sx={{
        right: 12,
        fontSize: 16,
        position: 'absolute',
        pointerEvents: 'none',
      }}
    >
      <path d="M12,16 C11.7663478,16.0004565 11.5399121,15.9190812 11.36,15.77 L5.36,10.77 C4.93474074,10.4165378 4.87653776,9.78525926 5.23,9.36 C5.58346224,8.93474074 6.21474074,8.87653776 6.64,9.23 L12,13.71 L17.36,9.39 C17.5665934,9.2222295 17.8315409,9.14373108 18.0961825,9.17188444 C18.3608241,9.2000378 18.6033268,9.33252029 18.77,9.54 C18.9551341,9.74785947 19.0452548,10.0234772 19.0186853,10.3005589 C18.9921158,10.5776405 18.8512608,10.8311099 18.63,11 L12.63,15.83 C12.444916,15.955516 12.2231011,16.0153708 12,16 Z" />
    </SvgIcon>
  );
}

//  Using for TreeView
export function TreeViewCollapseIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M18,3 C19.6568542,3 21,4.34314575 21,6 L21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 L6,3 Z M18,5 L6,5 C5.44771525,5 5,5.44771525 5,6 L5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L18,5 Z M12,8 C12.5522847,8 13,8.44771525 13,9 L13,9 L13,11 L15,11 C15.5522847,11 16,11.4477153 16,12 C16,12.5522847 15.5522847,13 15,13 L15,13 L13,13 L13,15 C13,15.5522847 12.5522847,16 12,16 C11.4477153,16 11,15.5522847 11,15 L11,15 L11,13 L9,13 C8.44771525,13 8,12.5522847 8,12 C8,11.4477153 8.44771525,11 9,11 L9,11 L11,11 L11,9 C11,8.44771525 11.4477153,8 12,8 Z" />
    </SvgIcon>
  );
}

export function TreeViewExpandIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M18,3 C19.6568542,3 21,4.34314575 21,6 L21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 L6,3 Z M18,5 L6,5 C5.44771525,5 5,5.44771525 5,6 L5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L18,5 Z M15,11 C15.5522847,11 16,11.4477153 16,12 C16,12.5522847 15.5522847,13 15,13 L15,13 L9,13 C8.44771525,13 8,12.5522847 8,12 C8,11.4477153 8.44771525,11 9,11 L9,11 Z" />
    </SvgIcon>
  );
}

export function TreeViewEndIcon(props) {
  return (
    <SvgIcon {...props}>
      <path d="M18,3 C19.6568542,3 21,4.34314575 21,6 L21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 L6,3 Z M18,5 L6,5 C5.44771525,5 5,5.44771525 5,6 L5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L18,5 Z M14,8.99420168 C14.2666375,8.99420168 14.5222334,9.10068735 14.71,9.29 C14.8993127,9.4777666 15.0057983,9.73336246 15.0057983,10 C15.0057983,10.2666375 14.8993127,10.5222334 14.71,10.71 L14.71,10.71 L13.41,12 L14.71,13.29 C14.8993127,13.4777666 15.0057983,13.7333625 15.0057983,14 C15.0057983,14.2666375 14.8993127,14.5222334 14.71,14.71 C14.5222334,14.8993127 14.2666375,15.0057983 14,15.0057983 C13.7333625,15.0057983 13.4777666,14.8993127 13.29,14.71 L13.29,14.71 L12,13.41 L10.71,14.71 C10.5222334,14.8993127 10.2666375,15.0057983 10,15.0057983 C9.73336246,15.0057983 9.4777666,14.8993127 9.29,14.71 C9.10068735,14.5222334 8.99420168,14.2666375 8.99420168,14 C8.99420168,13.7333625 9.10068735,13.4777666 9.29,13.29 L9.29,13.29 L10.59,12 L9.29,10.71 C8.89787783,10.3178778 8.89787783,9.68212217 9.29,9.29 C9.68212217,8.89787783 10.3178778,8.89787783 10.71,9.29 L10.71,9.29 L12,10.59 L13.29,9.29 C13.4777666,9.10068735 13.7333625,8.99420168 14,8.99420168 Z" />
    </SvgIcon>
  );
}


Листинг А.174 – файл DataGrid.js

export default function DataGrid(theme) {
  return {
    MuiDataGrid: {
      styleOverrides: {
        root: {
          borderRadius: 0,
          border: `1px solid transparent`,
          '& .MuiTablePagination-root': {
            borderTop: 0,
          },
        },
        cell: {
          borderBottom: `1px solid ${theme.palette.divider}`,
        },
        columnSeparator: {
          color: theme.palette.divider,
        },
        toolbarContainer: {
          padding: theme.spacing(2),
          backgroundColor: theme.palette.background.neutral,
          '& .MuiButton-root': {
            marginRight: theme.spacing(1.5),
            color: theme.palette.text.primary,
            '&:hover': {
              backgroundColor: theme.palette.action.hover,
            },
          },
        },
        paper: {
          boxShadow: theme.customShadows.dropdown,
        },
        menu: {
          '& .MuiPaper-root': {
            boxShadow: theme.customShadows.dropdown,
          },
          '& .MuiMenuItem-root': {
            ...theme.typography.body2,
            '& .MuiListItemIcon-root': {
              minWidth: 'auto',
            },
          },
        },
        panelFooter: {
          padding: theme.spacing(2),
          justifyContent: 'flex-end',
          borderTop: `1px solid ${theme.palette.divider}`,
          '& .MuiButton-root': {
            '&:first-of-type': {
              marginRight: theme.spacing(1.5),
              color: theme.palette.text.primary,
              '&:hover': {
                backgroundColor: theme.palette.action.hover,
              },
            },
            '&:last-of-type': {
              color: theme.palette.common.white,
              backgroundColor: theme.palette.primary.main,
              '&:hover': {
                backgroundColor: theme.palette.primary.dark,
              },
            },
          },
        },
        filterForm: {
          padding: theme.spacing(1.5, 0),
          '& .MuiFormControl-root': {
            margin: theme.spacing(0, 0.5),
          },
          '& .MuiInput-root': {
            marginTop: theme.spacing(3),
            '&::before, &::after': {
              display: 'none',
            },
            '& .MuiNativeSelect-select, .MuiInput-input': {
              ...theme.typography.body2,
              padding: theme.spacing(0.75, 1),
              borderRadius: theme.shape.borderRadius,
              backgroundColor: theme.palette.background.neutral,
            },
            '& .MuiSvgIcon-root': {
              right: 4,
            },
          },
        },
      },
    },
  };
}


Листинг А.175 – файл Dialog.js

// ----------------------------------------------------------------------

export default function Dialog(theme) {
  return {
    MuiDialog: {
      styleOverrides: {
        paper: {
          boxShadow: theme.customShadows.dialog,
          '&.MuiPaper-rounded': {
            borderRadius: Number(theme.shape.borderRadius) * 2,
          },
          '&.MuiDialog-paperFullScreen': {
            borderRadius: 0,
          },
          '&.MuiDialog-paper .MuiDialogActions-root': {
            padding: theme.spacing(3),
          },
          '@media (max-width: 600px)': {
            margin: theme.spacing(2),
          },
          '@media (max-width: 663.95px)': {
            '&.MuiDialog-paperWidthSm.MuiDialog-paperScrollBody': {
              maxWidth: '100%',
            },
          },
        },
        paperFullWidth: {
          width: '100%',
        },
      },
    },
    MuiDialogTitle: {
      styleOverrides: {
        root: {
          padding: theme.spacing(3, 3, 0),
        },
      },
    },
    MuiDialogContent: {
      styleOverrides: {
        root: {
          borderTop: 0,
          borderBottom: 0,
          padding: theme.spacing(3),
        },
      },
    },
    MuiDialogActions: {
      styleOverrides: {
        root: {
          '& > :not(:first-of-type)': {
            marginLeft: theme.spacing(1.5),
          },
        },
      },
    },
  };
}


Листинг А.176 – файл Drawer.js

import { alpha } from '@mui/material';


export default function Drawer(theme) {
  const isLight = theme.palette.mode === 'light';

  return {
    MuiDrawer: {
      styleOverrides: {
        modal: {
          '&[role="presentation"]': {
            '& .MuiDrawer-paperAnchorLeft': {
              boxShadow: `8px 24px 24px 12px ${alpha(theme.palette.grey[900], isLight ? 0.16 : 0.48)}`,
            },
            '& .MuiDrawer-paperAnchorRight': {
              boxShadow: `-8px 24px 24px 12px ${alpha(theme.palette.grey[900], isLight ? 0.16 : 0.48)}`,
            },
          },
        },
      },
    },
  };
}


Листинг А.177 – файл Fab.js


export default function Fab(theme) {
  return {
    MuiFab: {
      defaultProps: {
        color: 'primary',
      },

      styleOverrides: {
        root: {
          boxShadow: theme.customShadows.z8,
          '&:hover': {
            boxShadow: 'none',
            backgroundColor: theme.palette.grey[400],
          },
        },
        primary: {
          boxShadow: theme.customShadows.primary,
          '&:hover': {
            backgroundColor: theme.palette.primary.dark,
          },
        },
        secondary: {
          boxShadow: theme.customShadows.secondary,
          '&:hover': {
            backgroundColor: theme.palette.secondary.dark,
          },
        },
        extended: {
          '& svg': {
            marginRight: theme.spacing(1),
          },
        },
      },
    },
  };
}


Листинг А.178 – файл index.js

import Accordion from './Accordion';
import Alert from './Alert';
import Avatar from './Avatar';
import Autocomplete from './Autocomplete';
import Badge from './Badge';
import Backdrop from './Backdrop';
import Button from './Button';
import Card from './Card';
import ControlLabel from './ControlLabel';
import CssBaseline from './CssBaseline';
import Chip from './Chip';
import Drawer from './Drawer';
import Dialog from './Dialog';
import Fab from './Fab';
import Tabs from './Tabs';
import Menu from './Menu';
import Link from './Link';
import Lists from './List';
import Table from './Table';
import Paper from './Paper';
import Input from './Input';
import Radio from './Radio';
import Rating from './Rating';
import Slider from './Slider';
import Switch from './Switch';
import Select from './Select';
import SvgIcon from './SvgIcon';
import Tooltip from './Tooltip';
import Popover from './Popover';
import Stepper from './Stepper';
import DataGrid from './DataGrid';
import Skeleton from './Skeleton';
import Progress from './Progress';
import Timeline from './Timeline';
import TreeView from './TreeView';
import Checkbox from './Checkbox';
import Typography from './Typography';
import Pagination from './Pagination';
import Breadcrumbs from './Breadcrumbs';
import ButtonGroup from './ButtonGroup';
import ToggleButton from './ToggleButton';
import LoadingButton from './LoadingButton';


export default function ComponentsOverrides(theme) {
  return Object.assign(
    Fab(theme),
    Tabs(theme),
    Chip(theme),
    Card(theme),
    Menu(theme),
    Link(theme),
    Input(theme),
    Radio(theme),
    Badge(theme),
    Lists(theme),
    Table(theme),
    Paper(theme),
    Alert(theme),
    Switch(theme),
    Select(theme),
    Button(theme),
    Rating(theme),
    Dialog(theme),
    Avatar(theme),
    Slider(theme),
    Drawer(theme),
    Stepper(theme),
    Tooltip(theme),
    Popover(theme),
    SvgIcon(theme),
    Checkbox(theme),
    DataGrid(theme),
    Skeleton(theme),
    Timeline(theme),
    TreeView(theme),
    Backdrop(theme),
    Progress(theme),
    Accordion(theme),
    Typography(theme),
    Pagination(theme),
    ButtonGroup(theme),
    Breadcrumbs(theme),
    CssBaseline(theme),
    Autocomplete(theme),
    ControlLabel(theme),
    ToggleButton(theme),
    LoadingButton(theme)
  );
}


Листинг А.179 – файл Input.js

export default function Input(theme) {
  return {
    MuiInputBase: {
      styleOverrides: {
        root: {
          '&.Mui-disabled': {
            '& svg': { color: theme.palette.text.disabled },
          },
        },
        input: {
          '&::placeholder': {
            opacity: 1,
            color: theme.palette.text.disabled,
          },
        },
      },
    },
    MuiInput: {
      styleOverrides: {
        underline: {
          '&:before': {
            borderBottomColor: theme.palette.grey[500_56],
          },
        },
      },
    },
    MuiFilledInput: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.grey[500_12],
          '&:hover': {
            backgroundColor: theme.palette.grey[500_16],
          },
          '&.Mui-focused': {
            backgroundColor: theme.palette.action.focus,
          },
          '&.Mui-disabled': {
            backgroundColor: theme.palette.action.disabledBackground,
          },
        },
        underline: {
          '&:before': {
            borderBottomColor: theme.palette.grey[500_56],
          },
        },
      },
    },
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-notchedOutline': {
            borderColor: theme.palette.grey[500_32],
          },
          '&.Mui-disabled': {
            '& .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.action.disabledBackground,
            },
          },
        },
      },
    },
  };
}


Листинг А.180 – файл Link.js


export default function Link() {
  return {
    MuiLink: {
      defaultProps: {
        underline: 'hover',
      },
    },
  };
}


Листинг А.181 – файл List.js

export default function List(theme) {
  return {
    MuiListItemIcon: {
      styleOverrides: {
        root: {
          color: 'inherit',
          minWidth: 'auto',
          marginRight: theme.spacing(2),
        },
      },
    },
    MuiListItemAvatar: {
      styleOverrides: {
        root: {
          minWidth: 'auto',
          marginRight: theme.spacing(2),
        },
      },
    },
    MuiListItemText: {
      styleOverrides: {
        root: {
          marginTop: 0,
          marginBottom: 0,
        },
        multiline: {
          marginTop: 0,
          marginBottom: 0,
        },
      },
    },
  };
}


Листинг А.182 – файл LoadingButton.js

export default function LoadingButton() {
  return {
    MuiLoadingButton: {
      styleOverrides: {
        root: {
          '&.MuiButton-text': {
            '& .MuiLoadingButton-startIconPendingStart': {
              marginLeft: 0,
            },
            '& .MuiLoadingButton-endIconPendingEnd': {
              marginRight: 0,
            },
          },
        },
      },
    },
  };
}


Листинг А.183 – файл Menu.js


export default function Menu(theme) {
  return {
    MuiMenuItem: {
      styleOverrides: {
        root: {
          fontSize: 14,
          fontWeight: 600,
          '&.Mui-selected': {
            backgroundColor: theme.palette.action.selected,
            '&:hover': {
              backgroundColor: theme.palette.action.hover,
            },
          },
        },
      },
    },
  };
}


Листинг А.184 – файл Pagination.js

import { alpha } from '@mui/material/styles';

export default function Pagination(theme) {
  return {
    MuiPaginationItem: {
      styleOverrides: {
        root: {
          '&.Mui-selected': {
            fontWeight: theme.typography.fontWeightBold,
          },
        },
        textPrimary: {
          '&.Mui-selected': {
            color: theme.palette.primary.main,
            backgroundColor: alpha(theme.palette.primary.main, 0.08),
            '&:hover, &.Mui-focusVisible': {
              backgroundColor: `${alpha(theme.palette.primary.main, 0.24)} !important`,
            },
          },
        },
        outlined: {
          border: `1px solid ${theme.palette.grey[500_32]}`,
        },
        outlinedPrimary: {
          '&.Mui-selected': {
            backgroundColor: alpha(theme.palette.primary.main, 0.08),
            border: `1px solid ${alpha(theme.palette.primary.main, 0.24)}`,
          },
        },
      },
    },
  };
}


Листинг А.185 – файл Paper.js

export default function Paper(theme) {
  return {
    MuiPaper: {
      defaultProps: {
        elevation: 0,
      },

      variants: [
        {
          props: { variant: 'outlined' },
          style: { borderColor: theme.palette.grey[500_12] },
        },
      ],

      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },
  };
}


Листинг А.186 – файл Popover.js

export default function Popover(theme) {
  return {
    MuiPopover: {
      styleOverrides: {
        paper: {
          boxShadow: theme.customShadows.dropdown,
          borderRadius: Number(theme.shape.borderRadius) * 1.5,
        },
      },
    },
  };
}


Листинг А.187 – файл Progress.js

export default function Progress(theme) {
  const isLight = theme.palette.mode === 'light';

  return {
    MuiLinearProgress: {
      styleOverrides: {
        root: {
          borderRadius: 4,
          overflow: 'hidden',
        },
        bar: {
          borderRadius: 4,
        },
        colorPrimary: {
          backgroundColor: theme.palette.primary[isLight ? 'lighter' : 'darker'],
        },
        buffer: {
          backgroundColor: 'transparent',
        },
      },
    },
  };
}


Листинг А.188 – файл Radio.js

export default function Radio(theme) {
  return {
    MuiRadio: {
      styleOverrides: {
        root: {
          padding: theme.spacing(1),
          svg: {
            fontSize: 24,
            '&[font-size=small]': {
              fontSize: 20,
            },
          },
        },
      },
    },
  };
}


Листинг А.189 – файл Rating.js

import { StarIcon } from './CustomIcons';

// ----------------------------------------------------------------------

const ICON_SMALL = { width: 20, height: 20 };
const ICON_LARGE = { width: 28, height: 28 };

export default function Rating(theme) {
  return {
    MuiRating: {
      defaultProps: {
        emptyIcon: <StarIcon />,
        icon: <StarIcon />,
      },

      styleOverrides: {
        root: {
          '&.Mui-disabled': {
            opacity: 0.48,
          },
        },
        iconEmpty: { color: theme.palette.grey[500_48] },
        sizeSmall: { '& svg': { ...ICON_SMALL } },
        sizeLarge: { '& svg': { ...ICON_LARGE } },
      },
    },
  };
}


Листинг А.190 – файл Select.js

import { InputSelectIcon } from './CustomIcons';

export default function Select() {
  return {
    MuiSelect: {
      defaultProps: {
        IconComponent: InputSelectIcon,
      },
    },
  };
}


Листинг А.191 – файл Skeleton.js

export default function Skeleton(theme) {
  return {
    MuiSkeleton: {
      defaultProps: {
        animation: 'wave',
      },

      styleOverrides: {
        root: {
          backgroundColor: theme.palette.background.neutral,
        },
      },
    },
  };
}


Листинг А.192 – файл Slider.js

export default function Slider(theme) {
  const isLight = theme.palette.mode === 'light';

  return {
    MuiSlider: {
      defaultProps: {
        size: 'small',
      },

      styleOverrides: {
        root: {
          '&.Mui-disabled': {
            color: theme.palette.action.disabled,
          },
        },
        markLabel: {
          fontSize: 13,
          color: theme.palette.text.disabled,
        },
        valueLabel: {
          borderRadius: 8,
          backgroundColor: theme.palette.grey[isLight ? 800 : 700],
        },
      },
    },
  };
}


Листинг А.193 – файл Stepper.js

export default function Stepper(theme) {
  return {
    MuiStepConnector: {
      styleOverrides: {
        line: {
          borderColor: theme.palette.divider,
        },
      },
    },
  };
}


Листинг А.194 – файл SvgIcon.js

export default function SvgIcon() {
  return {
    MuiSvgIcon: {
      styleOverrides: {
        fontSizeSmall: {
          width: 20,
          height: 20,
          fontSize: 'inherit',
        },
        fontSizeLarge: {
          width: 32,
          height: 32,
          fontSize: 'inherit',
        },
      },
    },
  };
}


Листинг А.195 – файл Switch.js

export default function Switch(theme) {
  const isLight = theme.palette.mode === 'light';

  return {
    MuiSwitch: {
      styleOverrides: {
        thumb: {
          boxShadow: theme.customShadows.z1,
        },
        track: {
          opacity: 1,
          backgroundColor: theme.palette.grey[500],
        },
        switchBase: {
          left: 0,
          right: 'auto',
          '&:not(:.Mui-checked)': {
            color: theme.palette.grey[isLight ? 100 : 300],
          },
          '&.Mui-checked.Mui-disabled, &.Mui-disabled': {
            color: theme.palette.grey[isLight ? 400 : 600],
          },
          '&.Mui-disabled+.MuiSwitch-track': {
            opacity: 1,
            backgroundColor: `${theme.palette.action.disabledBackground} !important`,
          },
        },
      },
    },
  };
}


Листинг А.196 – файл Table.js

export default function Table(theme) {
  return {
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&.Mui-selected': {
            backgroundColor: theme.palette.action.selected,
            '&:hover': {
              backgroundColor: theme.palette.action.hover,
            },
          },
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          borderBottom: 'none',
        },
        head: {
          color: theme.palette.text.secondary,
          backgroundColor: theme.palette.background.neutral,
          '&:first-of-type': {
            paddingLeft: theme.spacing(3),
            borderTopLeftRadius: theme.shape.borderRadius,
            borderBottomLeftRadius: theme.shape.borderRadius,
            boxShadow: `inset 8px 0 0 ${theme.palette.background.paper}`,
          },
          '&:last-of-type': {
            paddingRight: theme.spacing(3),
            borderTopRightRadius: theme.shape.borderRadius,
            borderBottomRightRadius: theme.shape.borderRadius,
            boxShadow: `inset -8px 0 0 ${theme.palette.background.paper}`,
          },
        },
        stickyHeader: {
          backgroundColor: theme.palette.background.paper,
          backgroundImage: `linear-gradient(to bottom, ${theme.palette.background.neutral} 0%, ${theme.palette.background.neutral} 100%)`,
        },
        body: {
          '&:first-of-type': {
            paddingLeft: theme.spacing(3),
          },
          '&:last-of-type': {
            paddingRight: theme.spacing(3),
          },
        },
      },
    },
    MuiTablePagination: {
      styleOverrides: {
        root: {
          borderTop: `solid 1px ${theme.palette.divider}`,
        },
        toolbar: {
          height: 64,
        },
        select: {
          '&:focus': {
            borderRadius: theme.shape.borderRadius,
          },
        },
        selectIcon: {
          width: 20,
          height: 20,
          marginTop: -4,
        },
      },
    },
  };
}


Листинг А.197 – файл Tabs.js

export default function Tabs(theme) {
  return {
    MuiTabs: {
      styleOverrides: {
        scrollButtons: {
          width: 48,
          borderRadius: '50%',
        },
      },
    },
    MuiTab: {
      styleOverrides: {
        root: {
          padding: 0,
          fontWeight: theme.typography.fontWeightMedium,
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius,
          '&.Mui-selected': {
            color: theme.palette.text.primary,
          },
          '&:not(:last-of-type)': {
            marginRight: theme.spacing(5),
          },
          '@media (min-width: 600px)': {
            minWidth: 48,
          },
        },
        labelIcon: {
          minHeight: 48,
          flexDirection: 'row',
          '& > *:first-of-type': {
            marginBottom: 0,
            marginRight: theme.spacing(1),
          },
        },
        wrapped: {
          flexDirection: 'row',
          whiteSpace: 'nowrap',
        },
        textColorInherit: {
          opacity: 1,
          color: theme.palette.text.secondary,
        },
      },
    },
    MuiTabPanel: {
      styleOverrides: {
        root: {
          padding: 0,
        },
      },
    },
  };
}


Листинг А.198 – файл Timeline.js

export default function Timeline(theme) {
  return {
    MuiTimelineDot: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
      },
    },

    MuiTimelineConnector: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.divider,
        },
      },
    },
  };
}


Листинг А.199 – файл ToggleButton.js

import { alpha } from '@mui/material/styles';


export default function ToggleButton(theme) {
  const style = (color) => ({
    props: { color },
    style: {
      '&:hover': {
        borderColor: alpha(theme.palette[color].main, 0.48),
        backgroundColor: alpha(theme.palette[color].main, theme.palette.action.hoverOpacity),
      },
      '&.Mui-selected': {
        borderColor: alpha(theme.palette[color].main, 0.48),
      },
    },
  });

  return {
    MuiToggleButton: {
      variants: [
        {
          props: { color: 'standard' },
          style: {
            '&.Mui-selected': {
              backgroundColor: theme.palette.action.selected,
            },
          },
        },
        style('primary'),
        style('secondary'),
        style('info'),
        style('success'),
        style('warning'),
        style('error'),
      ],
    },
    MuiToggleButtonGroup: {
      styleOverrides: {
        root: {
          borderRadius: theme.shape.borderRadius,
          backgroundColor: theme.palette.background.paper,
          border: `solid 1px ${theme.palette.grey[500_12]}`,
          '& .MuiToggleButton-root': {
            margin: 4,
            borderColor: 'transparent !important',
            borderRadius: `${theme.shape.borderRadius}px !important`,
          },
        },
      },
    },
  };
}


Листинг А.200 – файл Tooltip.js

export default function Tooltip(theme) {
  const isLight = theme.palette.mode === 'light';

  return {
    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          backgroundColor: theme.palette.grey[isLight ? 800 : 700],
        },
        arrow: {
          color: theme.palette.grey[isLight ? 800 : 700],
        },
      },
    },
  };
}


Листинг А.201 – файл TreeView.js

import { TreeViewCollapseIcon, TreeViewExpandIcon, TreeViewEndIcon } from './CustomIcons';

export default function TreeView(theme) {
  return {
    MuiTreeView: {
      defaultProps: {
        defaultCollapseIcon: <TreeViewCollapseIcon sx={{ width: 20, height: 20 }} />,
        defaultExpandIcon: <TreeViewExpandIcon sx={{ width: 20, height: 20 }} />,
        defaultEndIcon: <TreeViewEndIcon sx={{ color: 'text.secondary', width: 20, height: 20 }} />,
      },
    },
    MuiTreeItem: {
      styleOverrides: {
        label: { ...theme.typography.body2 },
        iconContainer: { width: 'auto' },
      },
    },
  };
}


Листинг А.202 – файл Typography.js

export default function Typography(theme) {
  return {
    MuiTypography: {
      styleOverrides: {
        paragraph: {
          marginBottom: theme.spacing(2),
        },
        gutterBottom: {
          marginBottom: theme.spacing(1),
        },
        article: {
          fontWeight: 700
        }
      },
    },
  };
}


Листинг А.203 – файл api.js

import axios from "axios";

const serverAPI = "http://localhost:5000/api";

export const getRoomExists = async (roomId) => {
    const response = await  axios.get(`${serverAPI}/room-exists/${roomId}`)
    console.log(serverAPI)
    return response.data
}






Листинг А.204 – файл axios.js

import axios from "axios";
import { BASE_API_URL } from "../config";

const createAxiosInstance = (token) => {
    const axiosInstance = axios.create({baseURL: BASE_API_URL});

    axiosInstance.interceptors.request.use(
        (config) => {
            // Ajoutez les en-têtes statiques
            config.headers['Accept'] = 'application/json';
            config.headers['Content-Type'] = 'application/json';

            // Ajoutez le jeton d'autorisation (Bearer) de manière dynamique
            if (token) {
                config.headers['Authorization'] = `Bearer ${token}`;
            }

            return config;
        },
        (error) => Promise.reject(error)
    );

    axiosInstance.interceptors.response.use(
        (response) => response,
        (error) =>
            Promise.reject((error.response && error.response.data) || "Something went wrong")
    );

    return axiosInstance;
};

export default createAxiosInstance;


Листинг А.205 – файл createAvatar.js

// ----------------------------------------------------------------------

const PRIMARY_NAME = ['A', 'N', 'H', 'L', 'Q', '9', '8'];
const INFO_NAME = ['F', 'G', 'T', 'I', 'J', '1', '2', '3'];
const SUCCESS_NAME = ['K', 'D', 'Y', 'B', 'O', '4', '5'];
const WARNING_NAME = ['P', 'E', 'R', 'S', 'C', 'U', '6', '7'];
const ERROR_NAME = ['V', 'W', 'X', 'M', 'Z'];

function getFirstCharacter(name) {
  return name && name.charAt(0).toUpperCase();
}

function getAvatarColor(name) {
  if (PRIMARY_NAME.includes(getFirstCharacter(name))) return 'primary';
  if (INFO_NAME.includes(getFirstCharacter(name))) return 'info';
  if (SUCCESS_NAME.includes(getFirstCharacter(name))) return 'success';
  if (WARNING_NAME.includes(getFirstCharacter(name))) return 'warning';
  if (ERROR_NAME.includes(getFirstCharacter(name))) return 'warning';
  return 'default';
}

export default function createAvatar(name) {
  return {
    name: getFirstCharacter(name),
    color: getAvatarColor(name),
  };
}


Листинг А.206 – файл cssStyles.js

import { alpha } from '@mui/material/styles';

// ----------------------------------------------------------------------

function getDirection(value = 'bottom') {
  return {
    top: 'to top',
    right: 'to right',
    bottom: 'to bottom',
    left: 'to left',
  }[value];
}

// ----------------------------------------------------------------------

export default function cssStyles(theme) {
  return {
    bgBlur: (props) => {
      const color = props?.color || theme?.palette.background.default || '#000000';
      const blur = props?.blur || 6;
      const opacity = props?.opacity || 0.8;

      return {
        backdropFilter: `blur(${blur}px)`,
        WebkitBackdropFilter: `blur(${blur}px)`, // Fix on Mobile
        backgroundColor: alpha(color, opacity),
      };
    },
    bgGradient: (props) => {
      const direction = getDirection(props?.direction);
      const startColor = props?.startColor || `${alpha('#000000', 0)} 0%`;
      const endColor = props?.endColor || '#000000 75%';

      return {
        background: `linear-gradient(${direction}, ${startColor}, ${endColor});`,
      };
    },
    bgImage: (props) => {
      const url = props?.url || '/assets/bg_gradient.jpg';
      const direction = getDirection(props?.direction);
      const startColor = props?.startColor || alpha(theme?.palette.grey[900] || '#000000', 0.88);
      const endColor = props?.endColor || alpha(theme?.palette.grey[900] || '#000000', 0.88);

      return {
        background: `linear-gradient(${direction}, ${startColor}, ${endColor}), url(${url})`,
        backgroundSize: 'cover',
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center center',
      };
    },
  };
}


Листинг А.207 – файл flattenArray.js

// ----------------------------------------------------------------------

export default function flattenArray(list, key = 'children') {
  let children = [];

  const flatten = list?.map((item) => {
    if (item[key] && item[key].length) {
      children = [...children, ...item[key]];
    }
    return item;
  });

  return flatten?.concat(children.length ? flattenArray(children, key) : children);
}


Листинг А.208 – файл formatNumber.js

import numeral from 'numeral';

// ----------------------------------------------------------------------

export function fCurrency(number) {
  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');
}

export function fPercent(number) {
  return numeral(number / 100).format('0.0%');
}

export function fNumber(number) {
  return numeral(number).format();
}

export function fShortenNumber(number) {
  return numeral(number).format('0.00a').replace('.00', '');
}

export function fData(number) {
  return numeral(number).format('0.0 b');
}


Листинг А.209 – файл formatTime.js

import { format, getTime, formatDistanceToNow } from 'date-fns';

// ----------------------------------------------------------------------

export function fDate(date) {
  return format(new Date(date), 'dd MMMM yyyy');
}

export function fDateTime(date) {
  return format(new Date(date), 'dd MMM yyyy HH:mm');
}

export function fTimestamp(date) {
  return getTime(new Date(date));
}

export function fDateTimeSuffix(date) {
  return format(new Date(date), 'dd/MM/yyyy hh:mm p');
}

export function fToNow(date) {
  return formatDistanceToNow(new Date(date), {
    addSuffix: true,
  });
}


Листинг А.210 – файл getColorName.js

// ----------------------------------------------------------------------

export default function getColorName(hex) {
  let color;

  switch (hex) {
    case '#00AB55':
      color = 'Green';
      break;
    case '#000000':
      color = 'Black';
      break;
    case '#FFFFFF':
      color = 'White';
      break;
    case '#FFC0CB':
      color = 'Pink';
      break;
    case '#FF4842':
      color = 'Red';
      break;
    case '#1890FF':
      color = 'Blue';
      break;
    case '#94D82D':
      color = 'Greenyellow';
      break;
    case '#FFC107':
      color = 'Orange';
      break;
    default:
      color = hex;
  }

  return color;
}


Листинг А.211 – файл getColorPresets.js

// theme
import palette from "../theme/palette";

export const colorPresets = [
  // DEFAULT
  {
    name: "default",
    ...palette.light.primary,
  },
  // PURPLE
  {
    name: "purple",
    lighter: "#EBD6FD",
    light: "#B985F4",
    main: "#7635dc",
    dark: "#431A9E",
    darker: "#200A69",
    contrastText: "#fff",
  },
  // CYAN
  {
    name: "cyan",
    lighter: "#D1FFFC",
    light: "#76F2FF",
    main: "#1CCAFF",
    dark: "#0E77B7",
    darker: "#053D7A",
    contrastText: palette.light.grey[800],
  },
  // BLUE
  {
    name: "blue",
    lighter: "#D1E9FC",
    light: "#76B0F1",
    main: "#2065D1",
    dark: "#103996",
    darker: "#061B64",

    contrastText: "#fff",
  },
  // ORANGE
  {
    name: "orange",
    lighter: "#FEF4D4",
    light: "#FED680",
    main: "#fda92d",
    dark: "#B66816",
    darker: "#793908",
    contrastText: palette.light.grey[800],
  },
  // RED
  {
    name: "red",
    lighter: "#FFE3D5",
    light: "#FFC1AC",
    main: "#FF3030",
    dark: "#B71833",
    darker: "#7A0930",
    contrastText: "#fff",
  },
];

export const defaultPreset = colorPresets[0];
export const purplePreset = colorPresets[1];
export const cyanPreset = colorPresets[2];
export const bluePreset = colorPresets[3];
export const orangePreset = colorPresets[4];
export const redPreset = colorPresets[5];

export default function getColorPresets(presetsKey) {
  return {
    purple: purplePreset,
    cyan: cyanPreset,
    blue: bluePreset,
    orange: orangePreset,
    red: redPreset,
    default: defaultPreset,
  }[presetsKey];
}


Листинг А.212 – файл getFileData.js

// ----------------------------------------------------------------------

export default function getFileData(file, index) {
  if (typeof file === 'string') {
    return {
      key: index ? `${file}-${index}` : file,
      preview: file,
    };
  }

  return {
    key: index ? `${file.name}-${index}` : file.name,
    name: file.name,
    size: file.size,
    path: file.path,
    type: file.type,
    preview: file.preview,
    lastModified: file.lastModified,
    lastModifiedDate: file.lastModifiedDate,
  };
}


Листинг А.213 – файл getFileFormat.js

// components
import Image from '../components/Image';
import Iconify from '../components/Iconify';

// ----------------------------------------------------------------------

const FORMAT_IMG = ['jpg', 'jpeg', 'gif', 'bmp', 'png'];
const FORMAT_VIDEO = ['m4v', 'avi', 'mpg', 'mp4', 'webm'];
const FORMAT_WORD = ['doc', 'docx'];
const FORMAT_EXCEL = ['xls', 'xlsx'];
const FORMAT_POWERPOINT = ['ppt', 'pptx'];
const FORMAT_PDF = ['pdf'];
const FORMAT_PHOTOSHOP = ['psd'];
const FORMAT_ILLUSTRATOR = ['ai', 'esp'];

export function getFileType(fileUrl = '') {
  return (fileUrl && fileUrl.split('.').pop()) || '';
}

export function getFileName(fileUrl) {
  return fileUrl.substring(fileUrl.lastIndexOf('/') + 1).replace(/\.[^/.]+$/, '');
}

export function getFileFullName(fileUrl) {
  return fileUrl.split('/').pop();
}

export function getFileFormat(fileUrl) {
  let format;

  switch (fileUrl.includes(getFileType(fileUrl))) {
    case FORMAT_IMG.includes(getFileType(fileUrl)):
      format = 'image';
      break;
    case FORMAT_VIDEO.includes(getFileType(fileUrl)):
      format = 'video';
      break;
    case FORMAT_WORD.includes(getFileType(fileUrl)):
      format = 'word';
      break;
    case FORMAT_EXCEL.includes(getFileType(fileUrl)):
      format = 'excel';
      break;
    case FORMAT_POWERPOINT.includes(getFileType(fileUrl)):
      format = 'powerpoint';
      break;
    case FORMAT_PDF.includes(getFileType(fileUrl)):
      format = 'pdf';
      break;
    case FORMAT_PHOTOSHOP.includes(getFileType(fileUrl)):
      format = 'photoshop';
      break;
    case FORMAT_ILLUSTRATOR.includes(getFileType(fileUrl)):
      format = 'illustrator';
      break;
    default:
      format = getFileType(fileUrl);
  }

  return format;
}

const getIcon = (name) => (
  <Image
    // TODO: change the url for assets/images
    src={`https://codingmonk/assets/icons/file/${name}.svg`}
    alt={name}
    sx={{ width: 28, height: 28 }}
  />
);

export function getFileThumb(fileUrl) {
  let thumb;
  switch (getFileFormat(fileUrl)) {
    case 'video':
      thumb = getIcon('format_video');
      break;
    case 'word':
      thumb = getIcon('format_word');
      break;
    case 'excel':
      thumb = getIcon('format_excel');
      break;
    case 'powerpoint':
      thumb = getIcon('format_powerpoint');
      break;
    case 'pdf':
      thumb = getIcon('format_pdf');
      break;
    case 'photoshop':
      thumb = getIcon('format_photoshop');
      break;
    case 'illustrator':
      thumb = getIcon('format_ai');
      break;
    case 'image':
      thumb = <Image src={fileUrl} alt={fileUrl} sx={{ height: 1 }} />;
      break;
    default:
      thumb = <Iconify icon={'eva:file-fill'} sx={{ width: 28, height: 28 }} />;
  }
  return thumb;
}


Листинг А.214 – файл getFontValue.js

// @mui
import { useTheme } from '@mui/material/styles';
// hooks
import useResponsive from '../hooks/useResponsive';


export default function GetFontValue(variant) {
  const theme = useTheme();

  const breakpoints = useWidth();

  const key = theme.breakpoints.up(breakpoints === 'xl' ? 'lg' : breakpoints);

  const hasResponsive =
    variant === 'h1' ||
    variant === 'h2' ||
    variant === 'h3' ||
    variant === 'h4' ||
    variant === 'h5' ||
    variant === 'h6';

  const getFont =
    hasResponsive && theme.typography[variant][key] ? theme.typography[variant][key] : theme.typography[variant];

  const fontSize = remToPx(getFont.fontSize);

  const lineHeight = Number(theme.typography[variant].lineHeight) * fontSize;

  const { fontWeight } = theme.typography[variant];

  const { letterSpacing } = theme.typography[variant];

  return { fontSize, lineHeight, fontWeight, letterSpacing };
}

// ----------------------------------------------------------------------

export function remToPx(value) {
  return Math.round(parseFloat(value) * 16);
}

export function pxToRem(value) {
  return `${value / 16}rem`;
}

export function responsiveFontSizes({ sm, md, lg }) {
  return {
    '@media (min-width:600px)': {
      fontSize: pxToRem(sm),
    },
    '@media (min-width:900px)': {
      fontSize: pxToRem(md),
    },
    '@media (min-width:1200px)': {
      fontSize: pxToRem(lg),
    },
  };
}

// ----------------------------------------------------------------------

function useWidth() {
  const theme = useTheme();

  const keys = [...theme.breakpoints.keys].reverse();

  return (
    keys.reduce((output, key) => {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const matches = useResponsive('up', key);

      return !output && matches ? key : output;
    }, null) || 'xs'
  );
}


Листинг А.215 – файл highlight.js

import hljs from 'highlight.js';
import 'highlight.js/styles/atom-one-dark-reasonable.css';

// ----------------------------------------------------------------------

hljs.configure({
  languages: ['javascript', 'jsx', 'sh', 'bash', 'html', 'scss', 'css', 'json'],
});

if (typeof window !== 'undefined') {
  window.hljs = hljs;
}


Листинг А.216 – файл jwt.js

import jwtDecode from 'jwt-decode';
// routes
import { PATH_AUTH } from '../routes/paths';
//
import axios from './axios';

// ----------------------------------------------------------------------

const isValidToken = (accessToken) => {
  if (!accessToken) {
    return false;
  }
  const decoded = jwtDecode(accessToken);

  const currentTime = Date.now() / 1000;

  return decoded.exp > currentTime;
};

const handleTokenExpired = (exp) => {
  let expiredTimer;

  const currentTime = Date.now();

  // Test token expires after 10s
  // const timeLeft = currentTime + 10000 - currentTime; // ~10s
  const timeLeft = exp * 1000 - currentTime;

  clearTimeout(expiredTimer);

  expiredTimer = setTimeout(() => {
    // eslint-disable-next-line no-alert
    alert('Token expired');

    localStorage.removeItem('accessToken');

    window.location.href = PATH_AUTH.login;
  }, timeLeft);
};

const setSession = (accessToken) => {
  if (accessToken) {
    localStorage.setItem('accessToken', accessToken);
    axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;

    // This function below will handle when token is expired
    const { exp } = jwtDecode(accessToken); // ~3 days
    handleTokenExpired(exp);
  } else {
    localStorage.removeItem('accessToken');
    delete axios.defaults.headers.common.Authorization;
  }
};

export { isValidToken, setSession };


Листинг А.217 – файл truncate.js

function truncateString(str, num) {
    if (str.length > num) {
        return str.slice(0, num) + "...";
    } else {
        return str;
    }
}

export default truncateString;


Листинг А.218 – файл uuidv4.js

/* eslint-disable */
// ----------------------------------------------------------------------

export default function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0,
      v = c === 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}


Листинг А.219 – файл webRTCHandler.js

import {store} from "../redux/store";
import {SetOverlay} from "../redux/slices/appSlice";
import * as wss from "./wss";

const constraints = {
    audio: true,
    video: true
}

let localStream ;
export const getLocalPreviewAndInitRoomConnection = (isRoomHost, identity, roomId=null) => {
    navigator.mediaDevices.getUserMedia(constraints)
        .then((stream) =>{
            console.log("stream successfully")
            store.dispatch(SetOverlay(false));
            localStream = stream;
            showLocalVideoPreview(localStream);
            isRoomHost ? wss.createNewRoom(identity) : wss.joinRoom(roomId, identity)
        })
        .catch((error) =>{
            console.log("error occured local stream", error);
        })
}
const showLocalVideoPreview = (stream) => {
    // TODO: show the video preview
}

export const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {

}


Листинг А.220 – файл wss.js

import io from 'socket.io-client';
import {store} from "../redux/store";
import {SetParticipants, SetRoomId} from "../redux/slices/appSlice";
import * as webRTCHandler from "./webRTCHandler";
import {AddDirectConversation, UpdateDirectConversation} from "../redux/slices/conversationSlice";

const SERVER = 'http://localhost:5000';

let socket = null;

export const connectWithSocketServer = (token) => {
    socket = io(SERVER, {
        query: { token }
    } );

    socket.on('connect', ()=> {
        console.log("connection established successfully with Socket server, socket ID: " + socket.id);
    })

    socket.on("authenticated", (data)=> {
        const { user_id } = data;
        console.log("authenticated", data)
        window.localStorage.setItem("user_id", user_id);
    })

    socket.on("room-id", (data)=> {
        const {roomId} = data;
        // console.log({roomId})

        store.dispatch(SetRoomId(roomId));
    })

    socket.on("room-update", (data) =>{
        const { connectedUsers} = data;
        // console.log({connectedUsers})
        store.dispatch(SetParticipants(connectedUsers))
    });

    socket.on("conn-prepare", (data) =>{
        const {connUserSocketId} = data;
        webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);
    })
    socket.on("disconnect", (data) =>{
        const {connectedUsers} = data;
        store.dispatch(SetParticipants(connectedUsers))
    });

    const conversations  =  store.getState().conversation.direct_chat;
    socket.on("start_chat", (data) => {
        console.log(data);
        const existing_conversation = conversations.find((el) => el.id === data._id);
        if (existing_conversation){
            // update the conversation
            store.dispatch(UpdateDirectConversation({conversation: data}));

        }else {
            // add conversation to the state
            store.dispatch(AddDirectConversation({conversation:data}))
        }
        // selectConversation
        // dispatch(S)
    });



}

export const createNewRoom = (identity) => {
    // emit a event to socket server
    const data = {
        identity,
    }

    socket.emit('create-new-room', data);
}

export const joinRoom = (roomId, identity) => {
    // emit a event to socket server
    const data = {
        roomId,
        identity,
    }

    socket.emit('join-room', data);
}

export const getDirectConversation = ({user_id}, callback) => {
    socket.emit('get_direct_conversation', {user_id}, callback)
}

export const startConversation = ({to, from}) => {
    socket.emit('start_conversation', {to, from});
    console.log({to, from});
}


Листинг А.221 – файл index.js

import {faker} from "@faker-js/faker";
import {
    ChatCircleDots,
    Gear,
    GearSix,
    Phone,
    SignOut,
    User,
    Users, VideoCamera,
} from "phosphor-react";

const Profile_Menu = [
    {
        key: 1,
        title: "Profile",
        icon: <User/>,
    },
    {
        key: 2,
        title: "Settings",
        icon: <Gear/>,
    },
    {
        key: 3,
        title: "Logout",
        icon: <SignOut/>,
    },
];

const Nav_Buttons = [
    {
        index: 0,
        icon: <ChatCircleDots/>,
    },
    {
        index: 1,
        icon: <Users/>,
    },
    {
        index: 2,
        icon: <Phone/>,
    },
    {
        index: 4,
        icon: <VideoCamera />,
    },
];

const Nav_Setting = [
    {
        index: 3,
        icon: <GearSix/>,
    },
];

const ChatList = [
    {
        id: 0,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "9:36",
        unread: 0,
        pinned: true,
        online: true,
    },
    {
        id: 1,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "12:02",
        unread: 2,
        pinned: true,
        online: false,
    },
    {
        id: 2,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "10:35",
        unread: 3,
        pinned: false,
        online: true,
    },
    {
        id: 3,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "04:00",
        unread: 0,
        pinned: false,
        online: true,
    },
    {
        id: 4,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "08:42",
        unread: 0,
        pinned: false,
        online: false,
    },
    {
        id: 5,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "08:42",
        unread: 0,
        pinned: false,
        online: false,
    },
    {
        id: 6,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "08:42",
        unread: 0,
        pinned: false,
        online: false,
    },
    {
        id: 7,
        img: faker.image.avatar(),
        name: faker.person.firstName(),
        msg: faker.music.songName(),
        time: "08:42",
        unread: 0,
        pinned: false,
        online: false,
    },
];

const Chat_History = [
    {
        type: "msg",
        message: "Hi 👋🏻, How are ya ?",
        incoming: true,
        outgoing: false,
    },
    {
        type: "divider",
        text: "Today",
    },
    {
        type: "msg",
        message: "Hi 👋 Panda, not bad, u ?",
        incoming: false,
        outgoing: true,
    },
    {
        type: "msg",
        message: "Can you send me an abstract image?",
        incoming: false,
        outgoing: true,
    },
    {
        type: "msg",
        message: "Ya sure, sending you a pic",
        incoming: true,
        outgoing: false,
    },

    {
        type: "msg",
        subtype: "img",
        message: "Here You Go",
        img: faker.image.abstract(),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        message: "Can you please send this in file format?",
        incoming: false,
        outgoing: true,
    },

    {
        type: "msg",
        subtype: "doc",
        message: faker.lorem.sentence(5),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "link",
        preview: faker.image.urlLoremFlickr({category: 'cats'}),
        message: faker.lorem.sentence(4),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "reply",
        reply: "This is a reply",
        message: faker.lorem.sentence(5),
        incoming: false,
        outgoing: true,
    },
];

const Message_options = [
    {
        title: "Reply",
    },
    {
        title: "React to message",
    },
    {
        title: "Forward message",
    },
    {
        title: "Star message",
    },
    {
        title: "Report",
    },
    {
        title: "Delete Message",
    },
];

const SHARED_LINKS = [
    {
        type: "msg",
        subtype: "link",
        preview: faker.image.urlLoremFlickr({category: 'cats'}),
        message: faker.lorem.words(10),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "link",
        preview: faker.image.urlLoremFlickr({category: 'cats'}),
        message: faker.lorem.words(10),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "link",
        preview: faker.image.urlLoremFlickr({category: 'cats'}),
        message: faker.lorem.words(10),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "link",
        preview: faker.image.urlLoremFlickr({category: 'cats'}),
        message: faker.lorem.words(10),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "link",
        preview: faker.image.urlLoremFlickr({category: 'cats'}),
        message: faker.lorem.words(10),
        incoming: true,
        outgoing: false,
    }

]

const SHARED_DOCS = [
    {
        type: "msg",
        subtype: "doc",
        message: faker.lorem.sentence(5),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "doc",
        message: faker.lorem.sentence(5),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "doc",
        message: faker.lorem.sentence(5),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "doc",
        message: faker.lorem.sentence(5),
        incoming: true,
        outgoing: false,
    },
    {
        type: "msg",
        subtype: "doc",
        message: faker.lorem.sentence(5),
        incoming: true,
        outgoing: false,
    },
]

const CALL_LOG = [
    {
        key: 1,
        incoming: true,
        videoCall: false,
        time: "14:15"
    },
    {
        key: 2,
        incoming: false,
        videoCall: false,
        time: "17:43"
    },
    {
        key: 3,
        incoming: false,
        videoCall: false,
        time: "15:50"
    },
    {
        key: 4,
        incoming: true,
        videoCall: true,
        time: "16:53"
    },
    {
        key: 1,
        incoming: true,
        videoCall: true,
        time: "16:53"
    }

]
export {
    Profile_Menu,
    Nav_Setting,
    Nav_Buttons,
    ChatList,
    Chat_History,
    Message_options,
    SHARED_LINKS,
    SHARED_DOCS,
    CALL_LOG
};


Листинг А.222 – файл index.js

import {Bell, ClipboardText, Image, Info, Key, Keyboard, Lock, MarkerCircle} from "phosphor-react";
import React from "react";

export const Settings_Menu = [
    {
        key: 1,
        icon: <Bell size={20}/>,
        text: "Уведомления",
    },
    {
        key: 2,
        icon: <Lock size={20}/>,
        text: "Конфиденциальность",
    },
    {
        key: 3,
        icon: <Key size={20}/>,
        text: "Безопасность",
    },
    {
        key: 4,
        icon: <MarkerCircle size={20}/>,
        text: "Тема",
    },
    {
        key: 5,
        icon: <Image size={20}/>,
        text: "Фон чата",

    },
    {
        key: 6,
        icon: <ClipboardText size={20}/>,
        text: "Запросить информацию об аккаунте",
    },
    {
        key: 7,
        icon: <Keyboard size={20}/>,
        text: "Горячие клавиши",
    },
    {
        key: 8,
        icon: <Info size={20}/>,
        text: "Помощь",
    },
]


